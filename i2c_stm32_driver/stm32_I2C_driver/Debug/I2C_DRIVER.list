
I2C_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000df8  08000df8  00010df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e2c  08000e2c  00010e34  2**0
                  CONTENTS
  4 .ARM          00000000  08000e2c  08000e2c  00010e34  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e2c  08000e34  00010e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e30  08000e30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000e34  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000e34  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e34  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010e5d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000173e  00000000  00000000  00010ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000744  00000000  00000000  000125de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000938  00000000  00000000  00012d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000188  00000000  00000000  00013660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000130  00000000  00000000  000137e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c2d  00000000  00000000  00013918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000027e8  00000000  00000000  00016545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a485  00000000  00000000  00018d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004bc  00000000  00000000  000231b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000de0 	.word	0x08000de0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000de0 	.word	0x08000de0

08000170 <EEPROM_init>:


#include "I2C_EEPROM_slave.h"

void EEPROM_init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	I2Cx_config i2c_cnfg;

	i2c_cnfg.I2C_clock_speed = I2C_CLCK_SM_100K;
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <EEPROM_init+0x38>)
 8000178:	607b      	str	r3, [r7, #4]
	i2c_cnfg.I2C_clock_stretching =I2C_stretch;
 800017a:	2300      	movs	r3, #0
 800017c:	60fb      	str	r3, [r7, #12]
	i2c_cnfg.I2C_generalcall =I2C_GENERALCALL_EN;
 800017e:	2340      	movs	r3, #64	; 0x40
 8000180:	613b      	str	r3, [r7, #16]
	i2c_cnfg.I2C_mode = I2C_MODE_I2C;
 8000182:	2300      	movs	r3, #0
 8000184:	623b      	str	r3, [r7, #32]
	i2c_cnfg.P_IRQ_Callback = NULL;
 8000186:	2300      	movs	r3, #0
 8000188:	627b      	str	r3, [r7, #36]	; 0x24
	i2c_cnfg.I2C_Achnowledge =I2C_ACK;
 800018a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_init+0x3c>)
 8000192:	f000 fa2b 	bl	80005ec <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &i2c_cnfg);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_init+0x3c>)
 800019c:	f000 f912 	bl	80003c4 <MCAL_I2C_Init>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_write>:
uint16_t EEPROM_write(uint16_t address,uint16_t*eeprom_buffer , uint16_t datalength){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c6      	sub	sp, #280	; 0x118
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001be:	6019      	str	r1, [r3, #0]
 80001c0:	4611      	mov	r1, r2
 80001c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001c6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80001ca:	4602      	mov	r2, r0
 80001cc:	801a      	strh	r2, [r3, #0]
 80001ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001d6:	460a      	mov	r2, r1
 80001d8:	801a      	strh	r2, [r3, #0]

	int i=0;
 80001da:	2300      	movs	r3, #0
 80001dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint8_t buffer[256];

	//setting first two bytes for slave address
	buffer[0] =(uint8_t) address>>8;
 80001e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001e4:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80001e8:	881b      	ldrh	r3, [r3, #0]
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	121b      	asrs	r3, r3, #8
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001f8:	701a      	strb	r2, [r3, #0]
	buffer[1] =(uint8_t)address;
 80001fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80001fe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	b2da      	uxtb	r2, r3
 8000206:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800020a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800020e:	705a      	strb	r2, [r3, #1]

	//sending data
	for(i=2;i<(datalength+2);i++){
 8000210:	2302      	movs	r3, #2
 8000212:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000216:	e01b      	b.n	8000250 <EEPROM_write+0xa0>

		buffer[i] =eeprom_buffer[i-2];
 8000218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800021c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000220:	3b02      	subs	r3, #2
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000228:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800022c:	6812      	ldr	r2, [r2, #0]
 800022e:	4413      	add	r3, r2
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	b2d9      	uxtb	r1, r3
 8000234:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000238:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800023c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000240:	4413      	add	r3, r2
 8000242:	460a      	mov	r2, r1
 8000244:	701a      	strb	r2, [r3, #0]
	for(i=2;i<(datalength+2);i++){
 8000246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800024a:	3301      	adds	r3, #1
 800024c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	3301      	adds	r3, #1
 800025c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000260:	429a      	cmp	r2, r3
 8000262:	ddd9      	ble.n	8000218 <EEPROM_write+0x68>
	}

	MCAL_master_TX(I2C1,  EEPROM_slave_addres, buffer, datalength+2, START, WITH_STOP);
 8000264:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000268:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	3302      	adds	r3, #2
 8000270:	b29b      	uxth	r3, r3
 8000272:	f107 020c 	add.w	r2, r7, #12
 8000276:	2100      	movs	r1, #0
 8000278:	9101      	str	r1, [sp, #4]
 800027a:	2100      	movs	r1, #0
 800027c:	9100      	str	r1, [sp, #0]
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <EEPROM_write+0xe4>)
 8000282:	f000 f9f7 	bl	8000674 <MCAL_master_TX>


	return 0;
 8000286:	2300      	movs	r3, #0


}
 8000288:	4618      	mov	r0, r3
 800028a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40005400 	.word	0x40005400

08000298 <EEPROM_read>:
uint16_t EEPROM_read(uint16_t address,uint16_t*eeprom_buffer , uint16_t datalength){
 8000298:	b580      	push	{r7, lr}
 800029a:	b0c4      	sub	sp, #272	; 0x110
 800029c:	af02      	add	r7, sp, #8
 800029e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80002a6:	6019      	str	r1, [r3, #0]
 80002a8:	4611      	mov	r1, r2
 80002aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002ae:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80002b2:	4602      	mov	r2, r0
 80002b4:	801a      	strh	r2, [r3, #0]
 80002b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002be:	460a      	mov	r2, r1
 80002c0:	801a      	strh	r2, [r3, #0]


	uint8_t buffer[256];

	//setting first two bytes for slave address
	buffer[0] =(uint8_t) address>>8;
 80002c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002c6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	121b      	asrs	r3, r3, #8
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80002da:	701a      	strb	r2, [r3, #0]
	buffer[1] =(uint8_t)address;
 80002dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002e0:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80002f0:	705a      	strb	r2, [r3, #1]

	//send slave address
    MCAL_master_TX(I2C1, EEPROM_slave_addres, &buffer, 2, START, WITHOUT_STOP);
 80002f2:	f107 0208 	add.w	r2, r7, #8
 80002f6:	2301      	movs	r3, #1
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	2300      	movs	r3, #0
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	2302      	movs	r3, #2
 8000300:	212a      	movs	r1, #42	; 0x2a
 8000302:	480d      	ldr	r0, [pc, #52]	; (8000338 <EEPROM_read+0xa0>)
 8000304:	f000 f9b6 	bl	8000674 <MCAL_master_TX>

    //recieve data

    MCAL_master_RX(I2C1, EEPROM_slave_addres, eeprom_buffer, datalength, REPEATED_START, WITH_STOP);
 8000308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800030c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8000316:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800031a:	2100      	movs	r1, #0
 800031c:	9101      	str	r1, [sp, #4]
 800031e:	2101      	movs	r1, #1
 8000320:	9100      	str	r1, [sp, #0]
 8000322:	6812      	ldr	r2, [r2, #0]
 8000324:	212a      	movs	r1, #42	; 0x2a
 8000326:	4804      	ldr	r0, [pc, #16]	; (8000338 <EEPROM_read+0xa0>)
 8000328:	f000 f9fa 	bl	8000720 <MCAL_master_RX>

    return 0;
 800032c:	2300      	movs	r3, #0
}
 800032e:	4618      	mov	r0, r3
 8000330:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40005400 	.word	0x40005400

0800033c <MCAL_RCC_GetSysCLK>:

const uint16_t AHB_PRESCALER[17U]={0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};


uint32_t MCAL_RCC_GetSysCLK(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable

			switch((RCC->CFGR >>2) & 0b11)
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MCAL_RCC_GetSysCLK+0x28>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	089b      	lsrs	r3, r3, #2
 8000346:	f003 0303 	and.w	r3, r3, #3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d002      	beq.n	8000354 <MCAL_RCC_GetSysCLK+0x18>
 800034e:	2b01      	cmp	r3, #1
 8000350:	d002      	beq.n	8000358 <MCAL_RCC_GetSysCLK+0x1c>
 8000352:	e003      	b.n	800035c <MCAL_RCC_GetSysCLK+0x20>
			{

			case 0:
				return HSI_CLK;
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <MCAL_RCC_GetSysCLK+0x2c>)
 8000356:	e001      	b.n	800035c <MCAL_RCC_GetSysCLK+0x20>
				break;
			case 1:
				return HSE_CLK;
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <MCAL_RCC_GetSysCLK+0x30>)
 800035a:	e7ff      	b.n	800035c <MCAL_RCC_GetSysCLK+0x20>
				break;

			}

}
 800035c:	4618      	mov	r0, r3
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000
 8000368:	007a1200 	.word	0x007a1200
 800036c:	00f42400 	.word	0x00f42400

08000370 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return( MCAL_RCC_GetSysCLK()>>(AHB_PRESCALER[(RCC->CFGR>>4) &0b1111]));
 8000374:	f7ff ffe2 	bl	800033c <MCAL_RCC_GetSysCLK>
 8000378:	4602      	mov	r2, r0
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MCAL_RCC_GetHCLKFreq+0x24>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	091b      	lsrs	r3, r3, #4
 8000380:	f003 030f 	and.w	r3, r3, #15
 8000384:	4904      	ldr	r1, [pc, #16]	; (8000398 <MCAL_RCC_GetHCLKFreq+0x28>)
 8000386:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800038a:	fa22 f303 	lsr.w	r3, r2, r3


}
 800038e:	4618      	mov	r0, r3
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	08000e08 	.word	0x08000e08

0800039c <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq()>>(APB_PRESCALER[(RCC->CFGR>>8) &0b111]));
 80003a0:	f7ff ffe6 	bl	8000370 <MCAL_RCC_GetHCLKFreq>
 80003a4:	4602      	mov	r2, r0
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <MCAL_RCC_GetPCLK1Freq+0x20>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	0a1b      	lsrs	r3, r3, #8
 80003ac:	f003 0307 	and.w	r3, r3, #7
 80003b0:	4903      	ldr	r1, [pc, #12]	; (80003c0 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80003b2:	5ccb      	ldrb	r3, [r1, r3]
 80003b4:	fa22 f303 	lsr.w	r3, r2, r3

}
 80003b8:	4618      	mov	r0, r3
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	08000e00 	.word	0x08000e00

080003c4 <MCAL_I2C_Init>:
#define I2C1_index   0
#define I2C2_index   1


void MCAL_I2C_Init(I2Cx_typedef *I2Cx ,I2Cx_config *I2C_cfg )
{
 80003c4:	b5b0      	push	{r4, r5, r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]

	uint16_t tempreg=0 , freqrange=0 , result=0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	82fb      	strh	r3, [r7, #22]
 80003d2:	2300      	movs	r3, #0
 80003d4:	82bb      	strh	r3, [r7, #20]
 80003d6:	2300      	movs	r3, #0
 80003d8:	827b      	strh	r3, [r7, #18]
	uint32_t pclk1 =0;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
//	• 2 MHz in Sm mode
//	• 4 MHz in Fm mode

	//**********checking I2C used and enabling clock***************

	if(I2Cx ==I2C1 )
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a7b      	ldr	r2, [pc, #492]	; (80005d0 <MCAL_I2C_Init+0x20c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d110      	bne.n	8000408 <MCAL_I2C_Init+0x44>
	{
		GLOBAL_I2C_CNFG[I2C1_index] = *I2C_cfg;
 80003e6:	4a7b      	ldr	r2, [pc, #492]	; (80005d4 <MCAL_I2C_Init+0x210>)
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	4614      	mov	r4, r2
 80003ec:	461d      	mov	r5, r3
 80003ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f6:	682b      	ldr	r3, [r5, #0]
 80003f8:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN;
 80003fa:	4b77      	ldr	r3, [pc, #476]	; (80005d8 <MCAL_I2C_Init+0x214>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a76      	ldr	r2, [pc, #472]	; (80005d8 <MCAL_I2C_Init+0x214>)
 8000400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	e010      	b.n	800042a <MCAL_I2C_Init+0x66>

	}
	else{
		GLOBAL_I2C_CNFG[I2C2_index] = *I2C_cfg;
 8000408:	4b72      	ldr	r3, [pc, #456]	; (80005d4 <MCAL_I2C_Init+0x210>)
 800040a:	683a      	ldr	r2, [r7, #0]
 800040c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000410:	4615      	mov	r5, r2
 8000412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800041a:	682b      	ldr	r3, [r5, #0]
 800041c:	6023      	str	r3, [r4, #0]

		RCC_I2C2_CLK_EN;
 800041e:	4b6e      	ldr	r3, [pc, #440]	; (80005d8 <MCAL_I2C_Init+0x214>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a6d      	ldr	r2, [pc, #436]	; (80005d8 <MCAL_I2C_Init+0x214>)
 8000424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000428:	61d3      	str	r3, [r2, #28]

	}

	if(I2C_cfg->I2C_mode == I2C_MODE_I2C)
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	2b00      	cmp	r3, #0
 8000430:	f040 8082 	bne.w	8000538 <MCAL_I2C_Init+0x174>
	{
		//**********clock configuration***************
			tempreg = I2Cx->CR2;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	82fb      	strh	r3, [r7, #22]
			//clear freq[0:5]
			tempreg &=~(I2C_CR2_FREQ_Msk);
 800043a:	8afb      	ldrh	r3, [r7, #22]
 800043c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000440:	82fb      	strh	r3, [r7, #22]

			pclk1 = MCAL_RCC_GetPCLK1Freq();
 8000442:	f7ff ffab 	bl	800039c <MCAL_RCC_GetPCLK1Freq>
 8000446:	60f8      	str	r0, [r7, #12]

			freqrange = (uint16_t)(pclk1/1000000);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	4a64      	ldr	r2, [pc, #400]	; (80005dc <MCAL_I2C_Init+0x218>)
 800044c:	fba2 2303 	umull	r2, r3, r2, r3
 8000450:	0c9b      	lsrs	r3, r3, #18
 8000452:	82bb      	strh	r3, [r7, #20]
			tempreg|=freqrange;
 8000454:	8afa      	ldrh	r2, [r7, #22]
 8000456:	8abb      	ldrh	r3, [r7, #20]
 8000458:	4313      	orrs	r3, r2
 800045a:	82fb      	strh	r3, [r7, #22]
			I2Cx->CR2 = tempreg;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	8afa      	ldrh	r2, [r7, #22]
 8000460:	805a      	strh	r2, [r3, #2]


			//disable peripheral
			I2Cx->CR1 &=~(I2C_CR1_PE);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	b29b      	uxth	r3, r3
 8000468:	f023 0301 	bic.w	r3, r3, #1
 800046c:	b29a      	uxth	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	801a      	strh	r2, [r3, #0]

			tempreg = 0; // we are going to use another register now
 8000472:	2300      	movs	r3, #0
 8000474:	82fb      	strh	r3, [r7, #22]

			if(I2C_cfg->I2C_clock_speed == I2C_CLCK_SM_50K  ||  I2C_cfg->I2C_clock_speed == I2C_CLCK_SM_100K)
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800047e:	4293      	cmp	r3, r2
 8000480:	d004      	beq.n	800048c <MCAL_I2C_Init+0xc8>
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a56      	ldr	r2, [pc, #344]	; (80005e0 <MCAL_I2C_Init+0x21c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d112      	bne.n	80004b2 <MCAL_I2C_Init+0xee>
				{
			result = (uint16_t)( pclk1 / (I2C_cfg->I2C_clock_speed <<1));
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	fbb2 f3f3 	udiv	r3, r2, r3
 8000498:	827b      	strh	r3, [r7, #18]
			tempreg |=result;
 800049a:	8afa      	ldrh	r2, [r7, #22]
 800049c:	8a7b      	ldrh	r3, [r7, #18]
 800049e:	4313      	orrs	r3, r2
 80004a0:	82fb      	strh	r3, [r7, #22]
			I2Cx->CCR =tempreg;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	8afa      	ldrh	r2, [r7, #22]
 80004a6:	81da      	strh	r2, [r3, #14]


			//**** TRISE config****

			I2Cx->TRISE = freqrange+1; //modi (|)
 80004a8:	8abb      	ldrh	r3, [r7, #20]
 80004aa:	3301      	adds	r3, #1
 80004ac:	b29a      	uxth	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	821a      	strh	r2, [r3, #16]
		}


		//***********writing on CR1 register

				tempreg = I2Cx->CR1;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	82fb      	strh	r3, [r7, #22]
				tempreg |= I2C_cfg->I2C_Achnowledge | I2C_cfg->I2C_clock_stretching | I2C_cfg->I2C_generalcall |I2C_cfg->I2C_mode;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	b29a      	uxth	r2, r3
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	4313      	orrs	r3, r2
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	4313      	orrs	r3, r2
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	4313      	orrs	r3, r2
 80004da:	b29a      	uxth	r2, r3
 80004dc:	8afb      	ldrh	r3, [r7, #22]
 80004de:	4313      	orrs	r3, r2
 80004e0:	82fb      	strh	r3, [r7, #22]
				I2Cx->CR1 = tempreg;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	8afa      	ldrh	r2, [r7, #22]
 80004e6:	801a      	strh	r2, [r3, #0]


		//======================configure OAR1 and OAR2 register=================================
				tempreg =0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	82fb      	strh	r3, [r7, #22]

				if(I2C_cfg->I2C_slave_address.Enable_Dual_Add == 1) // means writing two slave addresses
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	8a1b      	ldrh	r3, [r3, #16]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d10d      	bne.n	8000510 <MCAL_I2C_Init+0x14c>
				{
					tempreg =I2C_OAR2_ENDUAL;
 80004f4:	2301      	movs	r3, #1
 80004f6:	82fb      	strh	r3, [r7, #22]
					tempreg |=I2C_cfg->I2C_slave_address.Secondary_Slave_Add << I2C_OAR2_ADD2_Pos;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	8a9b      	ldrh	r3, [r3, #20]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	b21a      	sxth	r2, r3
 8000500:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000504:	4313      	orrs	r3, r2
 8000506:	b21b      	sxth	r3, r3
 8000508:	82fb      	strh	r3, [r7, #22]
					I2Cx->OAR2 =tempreg;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	8afa      	ldrh	r2, [r7, #22]
 800050e:	80da      	strh	r2, [r3, #6]

				}

				 	 	tempreg = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	82fb      	strh	r3, [r7, #22]
						tempreg |= I2C_cfg->I2C_slave_address.Primary_Slave_Add << 1;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	8a5b      	ldrh	r3, [r3, #18]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	b21a      	sxth	r2, r3
 800051c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000520:	4313      	orrs	r3, r2
 8000522:	b21b      	sxth	r3, r3
 8000524:	82fb      	strh	r3, [r7, #22]
						tempreg |= I2C_cfg->I2C_slave_address.Addressing_Slave_Mode;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	b29a      	uxth	r2, r3
 800052c:	8afb      	ldrh	r3, [r7, #22]
 800052e:	4313      	orrs	r3, r2
 8000530:	82fb      	strh	r3, [r7, #22]
						I2Cx->OAR1 = tempreg;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	8afa      	ldrh	r2, [r7, #22]
 8000536:	809a      	strh	r2, [r3, #4]
		//SMBUS not supported in this driver
	}

//Interrupt enable for slave

	if(I2C_cfg->P_IRQ_Callback !=NULL)
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d03a      	beq.n	80005b6 <MCAL_I2C_Init+0x1f2>
	{
		I2Cx->CR2 |= I2C_CR2_ITBUFEN;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	885b      	ldrh	r3, [r3, #2]
 8000544:	b29b      	uxth	r3, r3
 8000546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800054a:	b29a      	uxth	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	805a      	strh	r2, [r3, #2]
		I2Cx->CR2 |= I2C_CR2_ITERREN;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	885b      	ldrh	r3, [r3, #2]
 8000554:	b29b      	uxth	r3, r3
 8000556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055a:	b29a      	uxth	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	805a      	strh	r2, [r3, #2]
		I2Cx->CR2 |= I2C_CR2_ITEVTEN;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	885b      	ldrh	r3, [r3, #2]
 8000564:	b29b      	uxth	r3, r3
 8000566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800056a:	b29a      	uxth	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	805a      	strh	r2, [r3, #2]

		if(I2Cx == I2C1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <MCAL_I2C_Init+0x20c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d10c      	bne.n	8000592 <MCAL_I2C_Init+0x1ce>
		{
			NVIC_IRQ31_I2C1_EV_Enable();
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MCAL_I2C_Init+0x220>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <MCAL_I2C_Init+0x220>)
 800057e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000582:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable();
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MCAL_I2C_Init+0x224>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <MCAL_I2C_Init+0x224>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	e00b      	b.n	80005aa <MCAL_I2C_Init+0x1e6>

		}

		else
		{
			NVIC_IRQ33_I2C2_EV_Enable();
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MCAL_I2C_Init+0x224>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <MCAL_I2C_Init+0x224>)
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable();
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MCAL_I2C_Init+0x224>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <MCAL_I2C_Init+0x224>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6013      	str	r3, [r2, #0]

		}

			I2Cx->SR1 =0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	815a      	strh	r2, [r3, #10]
			I2Cx->SR2 =0;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	819a      	strh	r2, [r3, #12]

	}

// enabling the I2C peripheral
	I2Cx->CR1 |=(I2C_CR1_PE);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	801a      	strh	r2, [r3, #0]

}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40005400 	.word	0x40005400
 80005d4:	2000001c 	.word	0x2000001c
 80005d8:	40021000 	.word	0x40021000
 80005dc:	431bde83 	.word	0x431bde83
 80005e0:	000186a0 	.word	0x000186a0
 80005e4:	e000e100 	.word	0xe000e100
 80005e8:	e000e104 	.word	0xe000e104

080005ec <MCAL_I2C_GPIO_Set_Pins>:



}
void MCAL_I2C_GPIO_Set_Pins(I2Cx_typedef *I2Cx )
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	GPIO_CONFIGURATION gpio_cnfg;
	if(I2Cx == I2C1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a1d      	ldr	r2, [pc, #116]	; (800066c <MCAL_I2C_GPIO_Set_Pins+0x80>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d118      	bne.n	800062e <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//scl PB6
		//sda PB7
		gpio_cnfg.GPIO_PIN_MODE = GPIO_AFIO_OP_OUTPUT;
 80005fc:	2307      	movs	r3, #7
 80005fe:	817b      	strh	r3, [r7, #10]
		gpio_cnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000600:	2301      	movs	r3, #1
 8000602:	81bb      	strh	r3, [r7, #12]
		gpio_cnfg.GPIO_PIN_NUMBER = GPIO_PIN6;
 8000604:	2340      	movs	r3, #64	; 0x40
 8000606:	813b      	strh	r3, [r7, #8]
		MCAL_GPIO_INIT(GPIOB, &gpio_cnfg);
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	4619      	mov	r1, r3
 800060e:	4818      	ldr	r0, [pc, #96]	; (8000670 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 8000610:	f000 faac 	bl	8000b6c <MCAL_GPIO_INIT>

		gpio_cnfg.GPIO_PIN_MODE = GPIO_AFIO_OP_OUTPUT;
 8000614:	2307      	movs	r3, #7
 8000616:	817b      	strh	r3, [r7, #10]
		gpio_cnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000618:	2301      	movs	r3, #1
 800061a:	81bb      	strh	r3, [r7, #12]
		gpio_cnfg.GPIO_PIN_NUMBER = GPIO_PIN7;
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	813b      	strh	r3, [r7, #8]
		MCAL_GPIO_INIT(GPIOB, &gpio_cnfg);
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	4619      	mov	r1, r3
 8000626:	4812      	ldr	r0, [pc, #72]	; (8000670 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 8000628:	f000 faa0 	bl	8000b6c <MCAL_GPIO_INIT>




	}
}
 800062c:	e019      	b.n	8000662 <MCAL_I2C_GPIO_Set_Pins+0x76>
		gpio_cnfg.GPIO_PIN_MODE = GPIO_AFIO_OP_OUTPUT;
 800062e:	2307      	movs	r3, #7
 8000630:	817b      	strh	r3, [r7, #10]
		gpio_cnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000632:	2301      	movs	r3, #1
 8000634:	81bb      	strh	r3, [r7, #12]
		gpio_cnfg.GPIO_PIN_NUMBER = GPIO_PIN10;
 8000636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063a:	813b      	strh	r3, [r7, #8]
		MCAL_GPIO_INIT(GPIOB, &gpio_cnfg);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4619      	mov	r1, r3
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 8000644:	f000 fa92 	bl	8000b6c <MCAL_GPIO_INIT>
		gpio_cnfg.GPIO_PIN_MODE = GPIO_AFIO_OP_OUTPUT;
 8000648:	2307      	movs	r3, #7
 800064a:	817b      	strh	r3, [r7, #10]
		gpio_cnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 800064c:	2301      	movs	r3, #1
 800064e:	81bb      	strh	r3, [r7, #12]
		gpio_cnfg.GPIO_PIN_NUMBER = GPIO_PIN11;
 8000650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000654:	813b      	strh	r3, [r7, #8]
		MCAL_GPIO_INIT(GPIOB, &gpio_cnfg);
 8000656:	f107 0308 	add.w	r3, r7, #8
 800065a:	4619      	mov	r1, r3
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MCAL_I2C_GPIO_Set_Pins+0x84>)
 800065e:	f000 fa85 	bl	8000b6c <MCAL_GPIO_INIT>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40005400 	.word	0x40005400
 8000670:	40010c00 	.word	0x40010c00

08000674 <MCAL_master_TX>:

void MCAL_master_TX(I2Cx_typedef *I2Cx ,  uint16_t dataaddress , uint16_t *TX_buffer , uint16_t datalengh ,Repeated_Start start,Stop_Condition stop )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	461a      	mov	r2, r3
 8000680:	460b      	mov	r3, r1
 8000682:	817b      	strh	r3, [r7, #10]
 8000684:	4613      	mov	r3, r2
 8000686:	813b      	strh	r3, [r7, #8]

	int i=0;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
	//generating start bit
	I2C_generate_start(I2Cx, Enable, START);
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f000 f8d4 	bl	800083e <I2C_generate_start>

	//checking if start bit is generated (EV5)
	while(!(I2C_flag_status(I2Cx, EV5)));
 8000696:	bf00      	nop
 8000698:	2101      	movs	r1, #1
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 f91a 	bl	80008d4 <I2C_flag_status>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0f8      	beq.n	8000698 <MCAL_master_TX+0x24>

	//send slave address
	I2C_send_address(I2Cx, dataaddress, Transmit);//------>
 80006a6:	897b      	ldrh	r3, [r7, #10]
 80006a8:	2200      	movs	r2, #0
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f8a7 	bl	8000800 <I2C_send_address>

	//checking for EV6
	while(!(I2C_flag_status(I2Cx, EV6)));
 80006b2:	bf00      	nop
 80006b4:	2102      	movs	r1, #2
 80006b6:	68f8      	ldr	r0, [r7, #12]
 80006b8:	f000 f90c 	bl	80008d4 <I2C_flag_status>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f8      	beq.n	80006b4 <MCAL_master_TX+0x40>

	while(!(I2C_flag_status(I2Cx, master_byte_transmitter)));
 80006c2:	bf00      	nop
 80006c4:	4915      	ldr	r1, [pc, #84]	; (800071c <MCAL_master_TX+0xa8>)
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f000 f904 	bl	80008d4 <I2C_flag_status>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f8      	beq.n	80006c4 <MCAL_master_TX+0x50>
	//while(!(I2C_flag_status(I2Cx, EV8_1))); //modi


	//sending data

	for(i=0;i<datalengh;i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e011      	b.n	80006fc <MCAL_master_TX+0x88>
	{
		I2Cx->DR = TX_buffer[i];
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	881a      	ldrh	r2, [r3, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	811a      	strh	r2, [r3, #8]

		while(!(I2C_flag_status(I2Cx, EV8)));
 80006e6:	bf00      	nop
 80006e8:	2104      	movs	r1, #4
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f000 f8f2 	bl	80008d4 <I2C_flag_status>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f8      	beq.n	80006e8 <MCAL_master_TX+0x74>
	for(i=0;i<datalengh;i++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	893b      	ldrh	r3, [r7, #8]
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbe9      	blt.n	80006d8 <MCAL_master_TX+0x64>
	}



	//generating stop bit
	if(stop == WITH_STOP)
 8000704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <MCAL_master_TX+0xa0>
	{
	I2C_generate_stop(I2Cx, Enable);
 800070c:	2101      	movs	r1, #1
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f000 f8c0 	bl	8000894 <I2C_generate_stop>
	}



}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	00070080 	.word	0x00070080

08000720 <MCAL_master_RX>:

void MCAL_master_RX(I2Cx_typedef *I2Cx ,  uint16_t dataaddress , uint16_t *RX_buffer , uint16_t datalengh ,Repeated_Start start ,Stop_Condition stop)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	461a      	mov	r2, r3
 800072c:	460b      	mov	r3, r1
 800072e:	817b      	strh	r3, [r7, #10]
 8000730:	4613      	mov	r3, r2
 8000732:	813b      	strh	r3, [r7, #8]
	int i = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]

	uint8_t index = (I2Cx ==I2C1) ? I2C1_index:I2C2_index;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <MCAL_master_RX+0xd8>)
 800073c:	4293      	cmp	r3, r2
 800073e:	bf14      	ite	ne
 8000740:	2301      	movne	r3, #1
 8000742:	2300      	moveq	r3, #0
 8000744:	b2db      	uxtb	r3, r3
 8000746:	74fb      	strb	r3, [r7, #19]

	//generating start bit
	I2C_generate_start(I2Cx, Enable, START);
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f000 f876 	bl	800083e <I2C_generate_start>

	//checking if start bit is generated (EV5)
	while ((I2C_flag_status(I2Cx, EV5)));
 8000752:	bf00      	nop
 8000754:	2101      	movs	r1, #1
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f000 f8bc 	bl	80008d4 <I2C_flag_status>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f8      	bne.n	8000754 <MCAL_master_RX+0x34>

	//send slave address

	I2C_send_address(I2Cx, dataaddress, Receive);
 8000762:	897b      	ldrh	r3, [r7, #10]
 8000764:	2201      	movs	r2, #1
 8000766:	4619      	mov	r1, r3
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f000 f849 	bl	8000800 <I2C_send_address>

	//checking for EV6
	while (!(I2C_flag_status(I2Cx, EV6)));
 800076e:	bf00      	nop
 8000770:	2102      	movs	r1, #2
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f000 f8ae 	bl	80008d4 <I2C_flag_status>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f8      	beq.n	8000770 <MCAL_master_RX+0x50>

	//I2Cx->CR1 |=I2C_CR1_ACK;

	if(datalengh){
 800077e:	893b      	ldrh	r3, [r7, #8]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d018      	beq.n	80007b6 <MCAL_master_RX+0x96>
	for(i=datalengh;i>1;i--)
 8000784:	893b      	ldrh	r3, [r7, #8]
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e012      	b.n	80007b0 <MCAL_master_RX+0x90>
		{

			while(!(I2C_flag_status(I2Cx, EV7)));
 800078a:	bf00      	nop
 800078c:	2105      	movs	r1, #5
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f000 f8a0 	bl	80008d4 <I2C_flag_status>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0f8      	beq.n	800078c <MCAL_master_RX+0x6c>
			*RX_buffer=I2Cx->DR;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	891b      	ldrh	r3, [r3, #8]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	801a      	strh	r2, [r3, #0]

			RX_buffer++;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3302      	adds	r3, #2
 80007a8:	607b      	str	r3, [r7, #4]
	for(i=datalengh;i>1;i--)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	dce9      	bgt.n	800078a <MCAL_master_RX+0x6a>

//	I2Cx->CR1 &=~I2C_CR1_ACK;
	}

	//generating stop bit
		if(stop == WITH_STOP)
 80007b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d103      	bne.n	80007c6 <MCAL_master_RX+0xa6>
		{
		I2C_generate_stop(I2Cx, Enable);
 80007be:	2101      	movs	r1, #1
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f000 f867 	bl	8000894 <I2C_generate_stop>
		}


		//regenerating ACK

		if(GLOBAL_I2C_CNFG[index].I2C_Achnowledge == I2C_ACK)
 80007c6:	7cfa      	ldrb	r2, [r7, #19]
 80007c8:	490c      	ldr	r1, [pc, #48]	; (80007fc <MCAL_master_RX+0xdc>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	3304      	adds	r3, #4
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007dc:	d107      	bne.n	80007ee <MCAL_master_RX+0xce>
		{
			I2Cx->CR1 |=I2C_CR1_ACK;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	801a      	strh	r2, [r3, #0]





}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40005400 	.word	0x40005400
 80007fc:	2000001c 	.word	0x2000001c

08000800 <I2C_send_address>:

void I2C_send_address(I2Cx_typedef *I2Cx ,uint16_t address ,I2C_Direction direction)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	807b      	strh	r3, [r7, #2]
 800080c:	4613      	mov	r3, r2
 800080e:	707b      	strb	r3, [r7, #1]


	//this driver doesnt support 10-bit address only 7-bit
	address = address<<1;
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	807b      	strh	r3, [r7, #2]

	if(direction ==Transmit)
 8000816:	787b      	ldrb	r3, [r7, #1]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d104      	bne.n	8000826 <I2C_send_address+0x26>
	{
		address |=(1<<0);
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	807b      	strh	r3, [r7, #2]
 8000824:	e003      	b.n	800082e <I2C_send_address+0x2e>
	}
	else{
		address &=~(1<<0);
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	f023 0301 	bic.w	r3, r3, #1
 800082c:	807b      	strh	r3, [r7, #2]
	}

	I2Cx->DR= address;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	887a      	ldrh	r2, [r7, #2]
 8000832:	811a      	strh	r2, [r3, #8]

}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <I2C_generate_start>:

void I2C_generate_start(I2Cx_typedef *I2Cx,FunctionalState fun_state,Repeated_Start start)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	70fb      	strb	r3, [r7, #3]
 800084a:	4613      	mov	r3, r2
 800084c:	70bb      	strb	r3, [r7, #2]

	if(start != REPEATED_START)
 800084e:	78bb      	ldrb	r3, [r7, #2]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d007      	beq.n	8000864 <I2C_generate_start+0x26>
	{
		while(I2C_flag_status(I2Cx, I2C_busy) );
 8000854:	bf00      	nop
 8000856:	2100      	movs	r1, #0
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 f83b 	bl	80008d4 <I2C_flag_status>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f8      	bne.n	8000856 <I2C_generate_start+0x18>
	}

	if(fun_state != Disable)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d008      	beq.n	800087c <I2C_generate_start+0x3e>
	{
		I2Cx->CR1 |=I2C_CR1_START;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000874:	b29a      	uxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	801a      	strh	r2, [r3, #0]

		I2Cx->CR1 &= ~I2C_CR1_START;

	}

}
 800087a:	e007      	b.n	800088c <I2C_generate_start+0x4e>
		I2Cx->CR1 &= ~I2C_CR1_START;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b29b      	uxth	r3, r3
 8000882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000886:	b29a      	uxth	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	801a      	strh	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <I2C_generate_stop>:
void I2C_generate_stop(I2Cx_typedef *I2Cx,FunctionalState fun_state)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
//	0: No Stop generation.
//	1: Stop generation after the current byte transfer or after the current Start condition is sent.
//	In Slave mode:
//	0: No Stop generation.
//	1: Release the SCL and SDA lines after the current byte transfer
	if(fun_state ==Enable)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d108      	bne.n	80008b8 <I2C_generate_stop+0x24>
	{
		I2Cx->CR1 |=I2C_CR1_STOP;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	801a      	strh	r2, [r3, #0]
	{
		I2Cx->CR1 &=~I2C_CR1_STOP;
	}


}
 80008b6:	e007      	b.n	80008c8 <I2C_generate_stop+0x34>
		I2Cx->CR1 &=~I2C_CR1_STOP;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	801a      	strh	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
	...

080008d4 <I2C_flag_status>:

Flag_Status I2C_flag_status(I2Cx_typedef *I2Cx,I2C_status status )
{
 80008d4:	b480      	push	{r7}
 80008d6:	b087      	sub	sp, #28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]

	Flag_Status flag=RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	75fb      	strb	r3, [r7, #23]
	uint32_t flag1,flag2 , lastevent;

	switch(status)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	d811      	bhi.n	800090c <I2C_flag_status+0x38>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d87d      	bhi.n	80009ea <I2C_flag_status+0x116>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <I2C_flag_status+0x20>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000917 	.word	0x08000917
 80008f8:	08000931 	.word	0x08000931
 80008fc:	0800094b 	.word	0x0800094b
 8000900:	0800099d 	.word	0x0800099d
 8000904:	080009b7 	.word	0x080009b7
 8000908:	080009d1 	.word	0x080009d1
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <I2C_flag_status+0x124>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d027      	beq.n	8000964 <I2C_flag_status+0x90>
 8000914:	e069      	b.n	80009ea <I2C_flag_status+0x116>
//		– Set by hardware on detection of SDA or SCL low
//		– cleared by hardware on detection of a Stop condition.
//		It indicates a communication in progress on the bus. This information is still updated when
//		the interface is disabled (PE=0).

		if ((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	899b      	ldrh	r3, [r3, #12]
 800091a:	b29b      	uxth	r3, r3
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <I2C_flag_status+0x56>
			flag = SET;
 8000924:	2301      	movs	r3, #1
 8000926:	75fb      	strb	r3, [r7, #23]
		else
			flag = RESET;
		break;
 8000928:	e05f      	b.n	80009ea <I2C_flag_status+0x116>
			flag = RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	75fb      	strb	r3, [r7, #23]
		break;
 800092e:	e05c      	b.n	80009ea <I2C_flag_status+0x116>
//		1: Start condition generated.
//		– Set when a Start condition generated.
//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
//		hardware when PE=0

		if ((I2Cx->SR1) & (I2C_SR1_SB))
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	895b      	ldrh	r3, [r3, #10]
 8000934:	b29b      	uxth	r3, r3
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <I2C_flag_status+0x70>
			flag = SET;
 800093e:	2301      	movs	r3, #1
 8000940:	75fb      	strb	r3, [r7, #23]
		else
			flag = RESET;
		break;
 8000942:	e052      	b.n	80009ea <I2C_flag_status+0x116>
			flag = RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	75fb      	strb	r3, [r7, #23]
		break;
 8000948:	e04f      	b.n	80009ea <I2C_flag_status+0x116>
//		when PE=0.
//		Address matched (Slave)
//		0: Address mismatched or not received.
//		1: Received address matched.

		if ((I2Cx->SR1) & I2C_SR1_ADDR)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	895b      	ldrh	r3, [r3, #10]
 800094e:	b29b      	uxth	r3, r3
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <I2C_flag_status+0x8a>
			flag = SET;
 8000958:	2301      	movs	r3, #1
 800095a:	75fb      	strb	r3, [r7, #23]
		else
			flag = RESET;
		break;
 800095c:	e045      	b.n	80009ea <I2C_flag_status+0x116>
			flag = RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	75fb      	strb	r3, [r7, #23]
		break;
 8000962:	e042      	b.n	80009ea <I2C_flag_status+0x116>
	}
	case master_byte_transmitter:
	{

		// TRA, BUSY, MSL and TXE flags
		flag1 = I2Cx->SR1;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	895b      	ldrh	r3, [r3, #10]
 8000968:	b29b      	uxth	r3, r3
 800096a:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->SR2;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	899b      	ldrh	r3, [r3, #12]
 8000970:	b29b      	uxth	r3, r3
 8000972:	60fb      	str	r3, [r7, #12]
		flag2 = flag2<<16;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	60fb      	str	r3, [r7, #12]

		lastevent = (flag1 |flag2) &((uint32_t)(0x00ffff));
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	b29b      	uxth	r3, r3
 8000982:	60bb      	str	r3, [r7, #8]

		if((lastevent &status) == status)
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	4013      	ands	r3, r2
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d102      	bne.n	8000996 <I2C_flag_status+0xc2>
			flag =SET;
 8000990:	2301      	movs	r3, #1
 8000992:	75fb      	strb	r3, [r7, #23]

		else
			flag =RESET;
		break;
 8000994:	e029      	b.n	80009ea <I2C_flag_status+0x116>
			flag =RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	75fb      	strb	r3, [r7, #23]
		break;
 800099a:	e026      	b.n	80009ea <I2C_flag_status+0x116>
//		or when PE=0.
//		TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
//		Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
//		BTF is set, as in both cases the data register is still empty

		if ((I2Cx->SR1) & I2C_SR1_TXE)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	895b      	ldrh	r3, [r3, #10]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <I2C_flag_status+0xdc>
			flag = SET;
 80009aa:	2301      	movs	r3, #1
 80009ac:	75fb      	strb	r3, [r7, #23]
		else
			flag = RESET;
		break;
 80009ae:	e01c      	b.n	80009ea <I2C_flag_status+0x116>
			flag = RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	75fb      	strb	r3, [r7, #23]
		break;
 80009b4:	e019      	b.n	80009ea <I2C_flag_status+0x116>
	}

	case EV8 :
	{
		if ((I2Cx->SR1) & I2C_SR1_TXE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	895b      	ldrh	r3, [r3, #10]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <I2C_flag_status+0xf6>
			flag=SET ;
 80009c4:	2301      	movs	r3, #1
 80009c6:	75fb      	strb	r3, [r7, #23]
		else
			flag=RESET ;
		break;
 80009c8:	e00f      	b.n	80009ea <I2C_flag_status+0x116>
			flag=RESET ;
 80009ca:	2300      	movs	r3, #0
 80009cc:	75fb      	strb	r3, [r7, #23]
		break;
 80009ce:	e00c      	b.n	80009ea <I2C_flag_status+0x116>
//		1: Data register not empty
//		– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
//		– Cleared by software reading or writing the DR register or by hardware when PE=0.
//		RxNE is not set in case of ARLO event.
//		Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full
		if((I2Cx->SR1) & I2C_SR1_RXNE)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	895b      	ldrh	r3, [r3, #10]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <I2C_flag_status+0x110>
			flag = SET;
 80009de:	2301      	movs	r3, #1
 80009e0:	75fb      	strb	r3, [r7, #23]
		else
			flag = RESET;
		break;
 80009e2:	e001      	b.n	80009e8 <I2C_flag_status+0x114>
			flag = RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	75fb      	strb	r3, [r7, #23]
		break;
 80009e8:	bf00      	nop
	}

	}

	return flag; //modi
 80009ea:	7dfb      	ldrb	r3, [r7, #23]

}
 80009ec:	4618      	mov	r0, r3
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	00070080 	.word	0x00070080

080009fc <get_pin_position>:

 */


uint8_t get_pin_position(uint16_t pin)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
	switch (pin) {
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a0c:	f000 80a5 	beq.w	8000b5a <get_pin_position+0x15e>
 8000a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a14:	f300 80a3 	bgt.w	8000b5e <get_pin_position+0x162>
 8000a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a1c:	f000 809b 	beq.w	8000b56 <get_pin_position+0x15a>
 8000a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a24:	f300 809b 	bgt.w	8000b5e <get_pin_position+0x162>
 8000a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2c:	f000 8091 	beq.w	8000b52 <get_pin_position+0x156>
 8000a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a34:	f300 8093 	bgt.w	8000b5e <get_pin_position+0x162>
 8000a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a3c:	f000 8087 	beq.w	8000b4e <get_pin_position+0x152>
 8000a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a44:	f300 808b 	bgt.w	8000b5e <get_pin_position+0x162>
 8000a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a4c:	d07d      	beq.n	8000b4a <get_pin_position+0x14e>
 8000a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a52:	f300 8084 	bgt.w	8000b5e <get_pin_position+0x162>
 8000a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a5a:	d074      	beq.n	8000b46 <get_pin_position+0x14a>
 8000a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a60:	dc7d      	bgt.n	8000b5e <get_pin_position+0x162>
 8000a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a66:	d06c      	beq.n	8000b42 <get_pin_position+0x146>
 8000a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a6c:	dc77      	bgt.n	8000b5e <get_pin_position+0x162>
 8000a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a72:	d064      	beq.n	8000b3e <get_pin_position+0x142>
 8000a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a78:	dc71      	bgt.n	8000b5e <get_pin_position+0x162>
 8000a7a:	2b80      	cmp	r3, #128	; 0x80
 8000a7c:	d05d      	beq.n	8000b3a <get_pin_position+0x13e>
 8000a7e:	2b80      	cmp	r3, #128	; 0x80
 8000a80:	dc6d      	bgt.n	8000b5e <get_pin_position+0x162>
 8000a82:	2b20      	cmp	r3, #32
 8000a84:	dc48      	bgt.n	8000b18 <get_pin_position+0x11c>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	dd69      	ble.n	8000b5e <get_pin_position+0x162>
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	2b1f      	cmp	r3, #31
 8000a8e:	d866      	bhi.n	8000b5e <get_pin_position+0x162>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <get_pin_position+0x9c>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000b1f 	.word	0x08000b1f
 8000a9c:	08000b23 	.word	0x08000b23
 8000aa0:	08000b5f 	.word	0x08000b5f
 8000aa4:	08000b27 	.word	0x08000b27
 8000aa8:	08000b5f 	.word	0x08000b5f
 8000aac:	08000b5f 	.word	0x08000b5f
 8000ab0:	08000b5f 	.word	0x08000b5f
 8000ab4:	08000b2b 	.word	0x08000b2b
 8000ab8:	08000b5f 	.word	0x08000b5f
 8000abc:	08000b5f 	.word	0x08000b5f
 8000ac0:	08000b5f 	.word	0x08000b5f
 8000ac4:	08000b5f 	.word	0x08000b5f
 8000ac8:	08000b5f 	.word	0x08000b5f
 8000acc:	08000b5f 	.word	0x08000b5f
 8000ad0:	08000b5f 	.word	0x08000b5f
 8000ad4:	08000b2f 	.word	0x08000b2f
 8000ad8:	08000b5f 	.word	0x08000b5f
 8000adc:	08000b5f 	.word	0x08000b5f
 8000ae0:	08000b5f 	.word	0x08000b5f
 8000ae4:	08000b5f 	.word	0x08000b5f
 8000ae8:	08000b5f 	.word	0x08000b5f
 8000aec:	08000b5f 	.word	0x08000b5f
 8000af0:	08000b5f 	.word	0x08000b5f
 8000af4:	08000b5f 	.word	0x08000b5f
 8000af8:	08000b5f 	.word	0x08000b5f
 8000afc:	08000b5f 	.word	0x08000b5f
 8000b00:	08000b5f 	.word	0x08000b5f
 8000b04:	08000b5f 	.word	0x08000b5f
 8000b08:	08000b5f 	.word	0x08000b5f
 8000b0c:	08000b5f 	.word	0x08000b5f
 8000b10:	08000b5f 	.word	0x08000b5f
 8000b14:	08000b33 	.word	0x08000b33
 8000b18:	2b40      	cmp	r3, #64	; 0x40
 8000b1a:	d00c      	beq.n	8000b36 <get_pin_position+0x13a>
 8000b1c:	e01f      	b.n	8000b5e <get_pin_position+0x162>
	case GPIO_PIN0:
			return 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e01e      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN1:
			return 4;
 8000b22:	2304      	movs	r3, #4
 8000b24:	e01c      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN2:
			return 8;
 8000b26:	2308      	movs	r3, #8
 8000b28:	e01a      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN3:
			return 12;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	e018      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN4:
			return 16;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	e016      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN5:
			return 20;
 8000b32:	2314      	movs	r3, #20
 8000b34:	e014      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN6:
			return 24;
 8000b36:	2318      	movs	r3, #24
 8000b38:	e012      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN7:
			return 28;
 8000b3a:	231c      	movs	r3, #28
 8000b3c:	e010      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN8:
			return 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e00e      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN9:
			return 4;
 8000b42:	2304      	movs	r3, #4
 8000b44:	e00c      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN10:
			return 8;
 8000b46:	2308      	movs	r3, #8
 8000b48:	e00a      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN11:
			return 12;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	e008      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN12:
			return 16;
 8000b4e:	2310      	movs	r3, #16
 8000b50:	e006      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN13:
			return 20;
 8000b52:	2314      	movs	r3, #20
 8000b54:	e004      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN14:
			return 24;
 8000b56:	2318      	movs	r3, #24
 8000b58:	e002      	b.n	8000b60 <get_pin_position+0x164>
			break;
		case GPIO_PIN15:
			return 28;
 8000b5a:	231c      	movs	r3, #28
 8000b5c:	e000      	b.n	8000b60 <get_pin_position+0x164>
			break;
		}


	return -1;
 8000b5e:	23ff      	movs	r3, #255	; 0xff

}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <MCAL_GPIO_INIT>:


void MCAL_GPIO_INIT(GPIOx_typedef *GPIOx, GPIO_CONFIGURATION *pin_config){
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configregister = NULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
     uint16_t val;
	//check if the pin lies in CRL range or CRH range -> CRL[0-7] CRH[8-15]

	configregister =((pin_config->GPIO_PIN_NUMBER) < GPIO_PIN8 ) ? &GPIOx->CRL : &GPIOx->CRH;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	2bff      	cmp	r3, #255	; 0xff
 8000b82:	d801      	bhi.n	8000b88 <MCAL_GPIO_INIT+0x1c>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	e001      	b.n	8000b8c <MCAL_GPIO_INIT+0x20>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]

	//Clear  CNFy[1:0] MODEy[1:0] 4BITS OF THE PIN
	*configregister &= ~( 0xF<< get_pin_position(pin_config->GPIO_PIN_NUMBER) );
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff31 	bl	80009fc <get_pin_position>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	4093      	lsls	r3, r2
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	401a      	ands	r2, r3
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	601a      	str	r2, [r3, #0]

	//if the pin is in output mode
	if(pin_config->GPIO_PIN_MODE==GPIO_PUSHPULL_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_OPENDRAIN_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_AFIO_PP_OUTPUT  || pin_config->GPIO_PIN_MODE==GPIO_AFIO_OP_OUTPUT )
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	885b      	ldrh	r3, [r3, #2]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d00e      	beq.n	8000bd6 <MCAL_GPIO_INIT+0x6a>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	d009      	beq.n	8000bd6 <MCAL_GPIO_INIT+0x6a>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	885b      	ldrh	r3, [r3, #2]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d004      	beq.n	8000bd6 <MCAL_GPIO_INIT+0x6a>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	885b      	ldrh	r3, [r3, #2]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	2b07      	cmp	r3, #7
 8000bd4:	d110      	bne.n	8000bf8 <MCAL_GPIO_INIT+0x8c>
	{
		//set the values for CNF bits and MODEy
		val =(((pin_config->GPIO_PIN_MODE - 4) << 2 | pin_config->GPIO_OUTPUT_SPEED  )) & 0x0f;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	885b      	ldrh	r3, [r3, #2]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3b04      	subs	r3, #4
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	889b      	ldrh	r3, [r3, #4]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	81fb      	strh	r3, [r7, #14]
 8000bf6:	e031      	b.n	8000c5c <MCAL_GPIO_INIT+0xf0>
	}

	//in case if the pin is input
	else
	{
		if(pin_config->GPIO_PIN_MODE == GPIO_FLOATING_INPUT || pin_config->GPIO_PIN_MODE == GPIO_ANALOG)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	885b      	ldrh	r3, [r3, #2]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d004      	beq.n	8000c0c <MCAL_GPIO_INIT+0xa0>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	885b      	ldrh	r3, [r3, #2]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d108      	bne.n	8000c1e <MCAL_GPIO_INIT+0xb2>
		{

			val =((pin_config->GPIO_PIN_MODE )<< 2 | (0x0)  ) & 0x0f;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	885b      	ldrh	r3, [r3, #2]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	81fb      	strh	r3, [r7, #14]
 8000c1c:	e01e      	b.n	8000c5c <MCAL_GPIO_INIT+0xf0>

		}

		else
		{
				val =((pin_config->GPIO_PIN_MODE)<<2) &0x0f;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	885b      	ldrh	r3, [r3, #2]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	f003 030f 	and.w	r3, r3, #15
 8000c2c:	81fb      	strh	r3, [r7, #14]
			if(pin_config->GPIO_PIN_MODE == GPIO_PULLUP_INPUT)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	885b      	ldrh	r3, [r3, #2]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d108      	bne.n	8000c4a <MCAL_GPIO_INIT+0xde>
			{
				GPIOx->ODR |= (pin_config->GPIO_PIN_NUMBER);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	e008      	b.n	8000c5c <MCAL_GPIO_INIT+0xf0>

			}
			else
			{
				GPIOx->ODR &= ~(pin_config->GPIO_PIN_NUMBER);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	43da      	mvns	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	401a      	ands	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
		}

	}


	*configregister |=(val << (get_pin_position(pin_config->GPIO_PIN_NUMBER)));
 8000c5c:	89fc      	ldrh	r4, [r7, #14]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fec9 	bl	80009fc <get_pin_position>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	fa04 f203 	lsl.w	r2, r4, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	601a      	str	r2, [r3, #0]

}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}
	...

08000c84 <main>:
#include "I2C_EEPROM_slave.h"

void clock_init();

int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
    clock_init();
 8000c8a:	f000 f841 	bl	8000d10 <clock_init>

    //test case 1

    uint8_t ch1[]={0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <main+0x88>)
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c98:	6018      	str	r0, [r3, #0]
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	8019      	strh	r1, [r3, #0]
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	0c0a      	lsrs	r2, r1, #16
 8000ca2:	701a      	strb	r2, [r3, #0]
    uint8_t ch2[7] = {0};
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2100      	movs	r1, #0
 8000cac:	460a      	mov	r2, r1
 8000cae:	801a      	strh	r2, [r3, #0]
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	709a      	strb	r2, [r3, #2]

    EEPROM_init();
 8000cb4:	f7ff fa5c 	bl	8000170 <EEPROM_init>
    EEPROM_write(0xAF, ch1, 7);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	20af      	movs	r0, #175	; 0xaf
 8000cc2:	f7ff fa75 	bl	80001b0 <EEPROM_write>
    EEPROM_read(0xAF, ch2, 7);
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2207      	movs	r2, #7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	20af      	movs	r0, #175	; 0xaf
 8000cce:	f7ff fae3 	bl	8000298 <EEPROM_read>


    //test case 2
    ch1[0] =0xA;
 8000cd2:	230a      	movs	r3, #10
 8000cd4:	723b      	strb	r3, [r7, #8]
    ch1[1] =0xB;
 8000cd6:	230b      	movs	r3, #11
 8000cd8:	727b      	strb	r3, [r7, #9]
    ch1[2] =0xC;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	72bb      	strb	r3, [r7, #10]
    ch1[3] =0xD;
 8000cde:	230d      	movs	r3, #13
 8000ce0:	72fb      	strb	r3, [r7, #11]


    EEPROM_write(0xFFFF, ch1, 4);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cee:	f7ff fa5f 	bl	80001b0 <EEPROM_write>
     EEPROM_read(0xFFFF, ch2, 4);
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000cfc:	f7ff facc 	bl	8000298 <EEPROM_read>
 8000d00:	2300      	movs	r3, #0



}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	08000df8 	.word	0x08000df8

08000d10 <clock_init>:

void clock_init()
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLOCK_ENABLE;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <clock_init+0x30>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <clock_init+0x30>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_ENABLE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <clock_init+0x30>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <clock_init+0x30>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_ENABLE;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <clock_init+0x30>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <clock_init+0x30>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6193      	str	r3, [r2, #24]

}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000

08000d44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d48:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d72:	f000 f811 	bl	8000d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff ff85 	bl	8000c84 <main>

08000d7a <LoopForever>:

LoopForever:
  b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   r0, =_estack
 8000d7c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d88:	08000e34 	.word	0x08000e34
  ldr r2, =_sbss
 8000d8c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d90:	20000064 	.word	0x20000064

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>
	...

08000d98 <__libc_init_array>:
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	4d0c      	ldr	r5, [pc, #48]	; (8000dd0 <__libc_init_array+0x38>)
 8000d9e:	4c0d      	ldr	r4, [pc, #52]	; (8000dd4 <__libc_init_array+0x3c>)
 8000da0:	1b64      	subs	r4, r4, r5
 8000da2:	10a4      	asrs	r4, r4, #2
 8000da4:	42a6      	cmp	r6, r4
 8000da6:	d109      	bne.n	8000dbc <__libc_init_array+0x24>
 8000da8:	f000 f81a 	bl	8000de0 <_init>
 8000dac:	2600      	movs	r6, #0
 8000dae:	4d0a      	ldr	r5, [pc, #40]	; (8000dd8 <__libc_init_array+0x40>)
 8000db0:	4c0a      	ldr	r4, [pc, #40]	; (8000ddc <__libc_init_array+0x44>)
 8000db2:	1b64      	subs	r4, r4, r5
 8000db4:	10a4      	asrs	r4, r4, #2
 8000db6:	42a6      	cmp	r6, r4
 8000db8:	d105      	bne.n	8000dc6 <__libc_init_array+0x2e>
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc0:	4798      	blx	r3
 8000dc2:	3601      	adds	r6, #1
 8000dc4:	e7ee      	b.n	8000da4 <__libc_init_array+0xc>
 8000dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dca:	4798      	blx	r3
 8000dcc:	3601      	adds	r6, #1
 8000dce:	e7f2      	b.n	8000db6 <__libc_init_array+0x1e>
 8000dd0:	08000e2c 	.word	0x08000e2c
 8000dd4:	08000e2c 	.word	0x08000e2c
 8000dd8:	08000e2c 	.word	0x08000e2c
 8000ddc:	08000e30 	.word	0x08000e30

08000de0 <_init>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr

08000dec <_fini>:
 8000dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dee:	bf00      	nop
 8000df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df2:	bc08      	pop	{r3}
 8000df4:	469e      	mov	lr, r3
 8000df6:	4770      	bx	lr
