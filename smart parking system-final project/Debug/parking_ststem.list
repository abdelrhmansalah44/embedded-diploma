
parking_ststem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f24  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002054  08002054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002148  08002148  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08002148  08002148  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002148  08002148  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002148  08002148  00012148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800214c  0800214c  0001214c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08002150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000009c  080021ec  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080021ec  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002699  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000def  00000000  00000000  000227a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000340  00000000  00000000  00023590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000023c  00000000  00000000  000238d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ba9  00000000  00000000  00023b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005a14  00000000  00000000  000276b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b4d7  00000000  00000000  0002d0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ef8  00000000  00000000  000385a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00039498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000009c 	.word	0x2000009c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800203c 	.word	0x0800203c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a0 	.word	0x200000a0
 800016c:	0800203c 	.word	0x0800203c

08000170 <MCAL_init>:
			.e_OperMode = FOURBIT_2LINE_10DOT,

	};

void MCAL_init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLOCK_ENABLE;
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <MCAL_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <MCAL_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_ENABLE;
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <MCAL_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <MCAL_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_ENABLE;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <MCAL_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <MCAL_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
	Timer2_init();
 8000198:	f000 febe 	bl	8000f18 <Timer2_init>

}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40021000 	.word	0x40021000

080001a4 <HAL_init>:

void HAL_init()
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0


	LCD_init(&LCD_user);
 80001a8:	4808      	ldr	r0, [pc, #32]	; (80001cc <HAL_init+0x28>)
 80001aa:	f000 fc5e 	bl	8000a6a <LCD_init>
	LCD_init(&LCD_admin);
 80001ae:	4808      	ldr	r0, [pc, #32]	; (80001d0 <HAL_init+0x2c>)
 80001b0:	f000 fc5b 	bl	8000a6a <LCD_init>
	Keypad_init();
 80001b4:	f000 faf0 	bl	8000798 <Keypad_init>
	PIR_init();
 80001b8:	f000 fa58 	bl	800066c <PIR_init>
	led_init();
 80001bc:	f000 fe04 	bl	8000dc8 <led_init>
	Servo1_Entry_Gate_Init();
 80001c0:	f000 fa8c 	bl	80006dc <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 80001c4:	f000 fad2 	bl	800076c <Servo2_Exit_Gate_Init>

}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000018 	.word	0x20000018
 80001d0:	20000004 	.word	0x20000004

080001d4 <parking_init>:

void parking_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	LCD_gotoxy(&LCD_admin, 0, 0);
 80001da:	2200      	movs	r2, #0
 80001dc:	2100      	movs	r1, #0
 80001de:	483b      	ldr	r0, [pc, #236]	; (80002cc <parking_init+0xf8>)
 80001e0:	f000 fdb8 	bl	8000d54 <LCD_gotoxy>
	LCD_sendstring(&LCD_admin, (const char*) "welcome");
 80001e4:	493a      	ldr	r1, [pc, #232]	; (80002d0 <parking_init+0xfc>)
 80001e6:	4839      	ldr	r0, [pc, #228]	; (80002cc <parking_init+0xf8>)
 80001e8:	f000 fd6f 	bl	8000cca <LCD_sendstring>
	delay_ms(500);
 80001ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f0:	f000 fed2 	bl	8000f98 <delay_ms>
	LCD_clearscreen(&LCD_admin);
 80001f4:	4835      	ldr	r0, [pc, #212]	; (80002cc <parking_init+0xf8>)
 80001f6:	f000 fd8c 	bl	8000d12 <LCD_clearscreen>

	LCD_gotoxy(&LCD_admin, 0, 0);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2100      	movs	r1, #0
 80001fe:	4833      	ldr	r0, [pc, #204]	; (80002cc <parking_init+0xf8>)
 8000200:	f000 fda8 	bl	8000d54 <LCD_gotoxy>
	LCD_sendstring(&LCD_admin, (const char*) "enter the ID");
 8000204:	4933      	ldr	r1, [pc, #204]	; (80002d4 <parking_init+0x100>)
 8000206:	4831      	ldr	r0, [pc, #196]	; (80002cc <parking_init+0xf8>)
 8000208:	f000 fd5f 	bl	8000cca <LCD_sendstring>
	delay_ms(300);
 800020c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000210:	f000 fec2 	bl	8000f98 <delay_ms>
	for (int i = 0; i < 3; i++) {
 8000214:	2300      	movs	r3, #0
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	e025      	b.n	8000266 <parking_init+0x92>
		LCD_gotoxy(&LCD_admin, 0, i + 1);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	3301      	adds	r3, #1
 8000220:	b2db      	uxtb	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	2100      	movs	r1, #0
 8000226:	4829      	ldr	r0, [pc, #164]	; (80002cc <parking_init+0xf8>)
 8000228:	f000 fd94 	bl	8000d54 <LCD_gotoxy>
		sprintf(enteredID_buffer, "ENTER ID:[%d]", i + 1);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3301      	adds	r3, #1
 8000230:	461a      	mov	r2, r3
 8000232:	4929      	ldr	r1, [pc, #164]	; (80002d8 <parking_init+0x104>)
 8000234:	4829      	ldr	r0, [pc, #164]	; (80002dc <parking_init+0x108>)
 8000236:	f001 fa57 	bl	80016e8 <siprintf>
		LCD_sendstring(&LCD_admin, (const char*) enteredID_buffer);
 800023a:	4928      	ldr	r1, [pc, #160]	; (80002dc <parking_init+0x108>)
 800023c:	4823      	ldr	r0, [pc, #140]	; (80002cc <parking_init+0xf8>)
 800023e:	f000 fd44 	bl	8000cca <LCD_sendstring>

		do {
			approved_id[i] == Keypad_getkey();
 8000242:	f000 fb0f 	bl	8000864 <Keypad_getkey>
		} while (approved_id[i] == 0);
 8000246:	4a26      	ldr	r2, [pc, #152]	; (80002e0 <parking_init+0x10c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f7      	beq.n	8000242 <parking_init+0x6e>
		LCD_sendchar(&LCD_admin, approved_id, DATA);
 8000252:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <parking_init+0x10c>)
 8000254:	b2db      	uxtb	r3, r3
 8000256:	2201      	movs	r2, #1
 8000258:	4619      	mov	r1, r3
 800025a:	481c      	ldr	r0, [pc, #112]	; (80002cc <parking_init+0xf8>)
 800025c:	f000 fc8c 	bl	8000b78 <LCD_sendchar>
	for (int i = 0; i < 3; i++) {
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3301      	adds	r3, #1
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b02      	cmp	r3, #2
 800026a:	ddd6      	ble.n	800021a <parking_init+0x46>
	}
	LCD_clearscreen(&LCD_admin);
 800026c:	4817      	ldr	r0, [pc, #92]	; (80002cc <parking_init+0xf8>)
 800026e:	f000 fd50 	bl	8000d12 <LCD_clearscreen>
	LCD_gotoxy(&LCD_admin, 0, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	2100      	movs	r1, #0
 8000276:	4815      	ldr	r0, [pc, #84]	; (80002cc <parking_init+0xf8>)
 8000278:	f000 fd6c 	bl	8000d54 <LCD_gotoxy>
	LCD_sendstring(&LCD_admin, (const char*) "allowed IDS:");
 800027c:	4919      	ldr	r1, [pc, #100]	; (80002e4 <parking_init+0x110>)
 800027e:	4813      	ldr	r0, [pc, #76]	; (80002cc <parking_init+0xf8>)
 8000280:	f000 fd23 	bl	8000cca <LCD_sendstring>

	for (int i = 0; i < 3; i++) {
 8000284:	2300      	movs	r3, #0
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	e018      	b.n	80002bc <parking_init+0xe8>
		LCD_gotoxy(&LCD_admin, 0, i + 1);
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	3301      	adds	r3, #1
 8000290:	b2db      	uxtb	r3, r3
 8000292:	461a      	mov	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	480d      	ldr	r0, [pc, #52]	; (80002cc <parking_init+0xf8>)
 8000298:	f000 fd5c 	bl	8000d54 <LCD_gotoxy>
		sprintf(enteredID_buffer, "ID[%d]: %c", i, approved_id[i]);
 800029c:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <parking_init+0x10c>)
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	4413      	add	r3, r2
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	4910      	ldr	r1, [pc, #64]	; (80002e8 <parking_init+0x114>)
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <parking_init+0x108>)
 80002aa:	f001 fa1d 	bl	80016e8 <siprintf>
		LCD_sendstring(&LCD_admin, (const char*) enteredID_buffer);
 80002ae:	490b      	ldr	r1, [pc, #44]	; (80002dc <parking_init+0x108>)
 80002b0:	4806      	ldr	r0, [pc, #24]	; (80002cc <parking_init+0xf8>)
 80002b2:	f000 fd0a 	bl	8000cca <LCD_sendstring>
	for (int i = 0; i < 3; i++) {
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	dde3      	ble.n	800028a <parking_init+0xb6>

	}

}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000004 	.word	0x20000004
 80002d0:	08002054 	.word	0x08002054
 80002d4:	0800205c 	.word	0x0800205c
 80002d8:	0800206c 	.word	0x0800206c
 80002dc:	200000bc 	.word	0x200000bc
 80002e0:	200000b8 	.word	0x200000b8
 80002e4:	0800207c 	.word	0x0800207c
 80002e8:	0800208c 	.word	0x0800208c

080002ec <parking_entry>:
void parking_entry() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
	uint8_t flag = 1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	71fb      	strb	r3, [r7, #7]

	uart1_config();
 80002f6:	f000 f975 	bl	80005e4 <uart1_config>

	LCD_gotoxy(&LCD_user, 0, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	4853      	ldr	r0, [pc, #332]	; (800044c <parking_entry+0x160>)
 8000300:	f000 fd28 	bl	8000d54 <LCD_gotoxy>
	LCD_sendstring(&LCD_user, (const char*) "welcome");
 8000304:	4952      	ldr	r1, [pc, #328]	; (8000450 <parking_entry+0x164>)
 8000306:	4851      	ldr	r0, [pc, #324]	; (800044c <parking_entry+0x160>)
 8000308:	f000 fcdf 	bl	8000cca <LCD_sendstring>
	delay_ms(500);
 800030c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000310:	f000 fe42 	bl	8000f98 <delay_ms>
	LCD_clearscreen(&LCD_user);
 8000314:	484d      	ldr	r0, [pc, #308]	; (800044c <parking_entry+0x160>)
 8000316:	f000 fcfc 	bl	8000d12 <LCD_clearscreen>

	LCD_gotoxy(&LCD_user, 0, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2100      	movs	r1, #0
 800031e:	484b      	ldr	r0, [pc, #300]	; (800044c <parking_entry+0x160>)
 8000320:	f000 fd18 	bl	8000d54 <LCD_gotoxy>
	LCD_sendstring(&LCD_user, (const char*) "Enter your id");
 8000324:	494b      	ldr	r1, [pc, #300]	; (8000454 <parking_entry+0x168>)
 8000326:	4849      	ldr	r0, [pc, #292]	; (800044c <parking_entry+0x160>)
 8000328:	f000 fccf 	bl	8000cca <LCD_sendstring>

	MCAL_uart_recieve(UART1, recieve_buff, polling_enable);
 800032c:	2200      	movs	r2, #0
 800032e:	494a      	ldr	r1, [pc, #296]	; (8000458 <parking_entry+0x16c>)
 8000330:	484a      	ldr	r0, [pc, #296]	; (800045c <parking_entry+0x170>)
 8000332:	f001 f919 	bl	8001568 <MCAL_uart_recieve>
	for (int i = 0; i < 3; i++) {
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	e012      	b.n	8000362 <parking_entry+0x76>
		if (recieve_buff[i] == approved_id[i]) {
 800033c:	4a46      	ldr	r2, [pc, #280]	; (8000458 <parking_entry+0x16c>)
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000344:	4946      	ldr	r1, [pc, #280]	; (8000460 <parking_entry+0x174>)
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	440b      	add	r3, r1
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	429a      	cmp	r2, r3
 8000350:	d102      	bne.n	8000358 <parking_entry+0x6c>
			flag = 1;
 8000352:	2301      	movs	r3, #1
 8000354:	71fb      	strb	r3, [r7, #7]
 8000356:	e001      	b.n	800035c <parking_entry+0x70>

		} else {

			flag = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 3; i++) {
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	3301      	adds	r3, #1
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	2b02      	cmp	r3, #2
 8000366:	dde9      	ble.n	800033c <parking_entry+0x50>
		}
	}



	if (free_slots != 0) {
 8000368:	4b3e      	ldr	r3, [pc, #248]	; (8000464 <parking_entry+0x178>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d059      	beq.n	8000424 <parking_entry+0x138>

		if (flag == 1) {
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d13e      	bne.n	80003f4 <parking_entry+0x108>
			LCD_gotoxy(&LCD_user, 0, 1);
 8000376:	2201      	movs	r2, #1
 8000378:	2100      	movs	r1, #0
 800037a:	4834      	ldr	r0, [pc, #208]	; (800044c <parking_entry+0x160>)
 800037c:	f000 fcea 	bl	8000d54 <LCD_gotoxy>
			LCD_sendstring(&LCD_user, (const char*) "  ID is true  ");
 8000380:	4939      	ldr	r1, [pc, #228]	; (8000468 <parking_entry+0x17c>)
 8000382:	4832      	ldr	r0, [pc, #200]	; (800044c <parking_entry+0x160>)
 8000384:	f000 fca1 	bl	8000cca <LCD_sendstring>
			delay_ms(300);
 8000388:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800038c:	f000 fe04 	bl	8000f98 <delay_ms>
			free_slots--;
 8000390:	4b34      	ldr	r3, [pc, #208]	; (8000464 <parking_entry+0x178>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	3b01      	subs	r3, #1
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b32      	ldr	r3, [pc, #200]	; (8000464 <parking_entry+0x178>)
 800039a:	701a      	strb	r2, [r3, #0]
			sprintf(freeslot_buff,"freeslots:%d",free_slots);
 800039c:	4b31      	ldr	r3, [pc, #196]	; (8000464 <parking_entry+0x178>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4932      	ldr	r1, [pc, #200]	; (800046c <parking_entry+0x180>)
 80003a4:	4832      	ldr	r0, [pc, #200]	; (8000470 <parking_entry+0x184>)
 80003a6:	f001 f99f 	bl	80016e8 <siprintf>
			delay_ms(500);
 80003aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ae:	f000 fdf3 	bl	8000f98 <delay_ms>
			LCD_gotoxy(&LCD_user, 0, 2);
 80003b2:	2202      	movs	r2, #2
 80003b4:	2100      	movs	r1, #0
 80003b6:	4825      	ldr	r0, [pc, #148]	; (800044c <parking_entry+0x160>)
 80003b8:	f000 fccc 	bl	8000d54 <LCD_gotoxy>
			LCD_sendstring(&LCD_user, (const char*) freeslot_buff);
 80003bc:	492c      	ldr	r1, [pc, #176]	; (8000470 <parking_entry+0x184>)
 80003be:	4823      	ldr	r0, [pc, #140]	; (800044c <parking_entry+0x160>)
 80003c0:	f000 fc83 	bl	8000cca <LCD_sendstring>

			led__green_on();
 80003c4:	f000 fd20 	bl	8000e08 <led__green_on>
			delay_ms(1000);
 80003c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003cc:	f000 fde4 	bl	8000f98 <delay_ms>
			Servo1_Entry_Gate(UP);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 f999 	bl	8000708 <Servo1_Entry_Gate>
			delay_ms(200);
 80003d6:	20c8      	movs	r0, #200	; 0xc8
 80003d8:	f000 fdde 	bl	8000f98 <delay_ms>
			led_green_off();
 80003dc:	f000 fd20 	bl	8000e20 <led_green_off>

			while (PIR_Entergate());
 80003e0:	bf00      	nop
 80003e2:	f000 f963 	bl	80006ac <PIR_Entergate>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d1fa      	bne.n	80003e2 <parking_entry+0xf6>

			Servo1_Entry_Gate(Down);
 80003ec:	2002      	movs	r0, #2
 80003ee:	f000 f98b 	bl	8000708 <Servo1_Entry_Gate>
 80003f2:	e020      	b.n	8000436 <parking_entry+0x14a>
		} else if (flag == 0) {
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d11d      	bne.n	8000436 <parking_entry+0x14a>
			LCD_gotoxy(&LCD_user, 0, 1);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2100      	movs	r1, #0
 80003fe:	4813      	ldr	r0, [pc, #76]	; (800044c <parking_entry+0x160>)
 8000400:	f000 fca8 	bl	8000d54 <LCD_gotoxy>
			led__red_on();
 8000404:	f000 fd18 	bl	8000e38 <led__red_on>
			LCD_sendstring(&LCD_user, (const char*) "  ID is wrong  ");
 8000408:	491a      	ldr	r1, [pc, #104]	; (8000474 <parking_entry+0x188>)
 800040a:	4810      	ldr	r0, [pc, #64]	; (800044c <parking_entry+0x160>)
 800040c:	f000 fc5d 	bl	8000cca <LCD_sendstring>
			delay_ms(2000);
 8000410:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000414:	f000 fdc0 	bl	8000f98 <delay_ms>
			led_red_off();
 8000418:	f000 fd1a 	bl	8000e50 <led_red_off>
			LCD_clearscreen(&LCD_user);
 800041c:	480b      	ldr	r0, [pc, #44]	; (800044c <parking_entry+0x160>)
 800041e:	f000 fc78 	bl	8000d12 <LCD_clearscreen>
 8000422:	e008      	b.n	8000436 <parking_entry+0x14a>
		}

	} else {

		LCD_gotoxy(&LCD_user, 0, 1);
 8000424:	2201      	movs	r2, #1
 8000426:	2100      	movs	r1, #0
 8000428:	4808      	ldr	r0, [pc, #32]	; (800044c <parking_entry+0x160>)
 800042a:	f000 fc93 	bl	8000d54 <LCD_gotoxy>
		LCD_sendstring(&LCD_user, "Parking is full");
 800042e:	4912      	ldr	r1, [pc, #72]	; (8000478 <parking_entry+0x18c>)
 8000430:	4806      	ldr	r0, [pc, #24]	; (800044c <parking_entry+0x160>)
 8000432:	f000 fc4a 	bl	8000cca <LCD_sendstring>
	}

	delay_ms(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f000 fdad 	bl	8000f98 <delay_ms>
	LCD_clearscreen(&LCD_user);
 800043e:	4803      	ldr	r0, [pc, #12]	; (800044c <parking_entry+0x160>)
 8000440:	f000 fc67 	bl	8000d12 <LCD_clearscreen>


}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000018 	.word	0x20000018
 8000450:	08002054 	.word	0x08002054
 8000454:	08002098 	.word	0x08002098
 8000458:	200000d0 	.word	0x200000d0
 800045c:	40013800 	.word	0x40013800
 8000460:	200000b8 	.word	0x200000b8
 8000464:	20000000 	.word	0x20000000
 8000468:	080020a8 	.word	0x080020a8
 800046c:	080020b8 	.word	0x080020b8
 8000470:	200000f8 	.word	0x200000f8
 8000474:	080020c8 	.word	0x080020c8
 8000478:	080020d8 	.word	0x080020d8

0800047c <parking_exit>:

void parking_exit() {
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
		uint8_t flag = 1;
 8000482:	2301      	movs	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]

		uart2_config();
 8000486:	f000 f8cf 	bl	8000628 <uart2_config>

		LCD_gotoxy(&LCD_user, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	484a      	ldr	r0, [pc, #296]	; (80005b8 <parking_exit+0x13c>)
 8000490:	f000 fc60 	bl	8000d54 <LCD_gotoxy>
		LCD_sendstring(&LCD_user, (const char*) "welcome");
 8000494:	4949      	ldr	r1, [pc, #292]	; (80005bc <parking_exit+0x140>)
 8000496:	4848      	ldr	r0, [pc, #288]	; (80005b8 <parking_exit+0x13c>)
 8000498:	f000 fc17 	bl	8000cca <LCD_sendstring>
		delay_ms(500);
 800049c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a0:	f000 fd7a 	bl	8000f98 <delay_ms>
		LCD_clearscreen(&LCD_user);
 80004a4:	4844      	ldr	r0, [pc, #272]	; (80005b8 <parking_exit+0x13c>)
 80004a6:	f000 fc34 	bl	8000d12 <LCD_clearscreen>

		LCD_gotoxy(&LCD_user, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	4842      	ldr	r0, [pc, #264]	; (80005b8 <parking_exit+0x13c>)
 80004b0:	f000 fc50 	bl	8000d54 <LCD_gotoxy>
		LCD_sendstring(&LCD_user, (const char*) "Enter your id");
 80004b4:	4942      	ldr	r1, [pc, #264]	; (80005c0 <parking_exit+0x144>)
 80004b6:	4840      	ldr	r0, [pc, #256]	; (80005b8 <parking_exit+0x13c>)
 80004b8:	f000 fc07 	bl	8000cca <LCD_sendstring>

		MCAL_uart_recieve(UART1, recieve_buff, polling_enable);
 80004bc:	2200      	movs	r2, #0
 80004be:	4941      	ldr	r1, [pc, #260]	; (80005c4 <parking_exit+0x148>)
 80004c0:	4841      	ldr	r0, [pc, #260]	; (80005c8 <parking_exit+0x14c>)
 80004c2:	f001 f851 	bl	8001568 <MCAL_uart_recieve>
		for (int i = 0; i < 3; i++) {
 80004c6:	2300      	movs	r3, #0
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	e012      	b.n	80004f2 <parking_exit+0x76>
			if (recieve_buff[i] == approved_id[i]) {
 80004cc:	4a3d      	ldr	r2, [pc, #244]	; (80005c4 <parking_exit+0x148>)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004d4:	493d      	ldr	r1, [pc, #244]	; (80005cc <parking_exit+0x150>)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	440b      	add	r3, r1
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	429a      	cmp	r2, r3
 80004e0:	d102      	bne.n	80004e8 <parking_exit+0x6c>
				flag = 1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	e001      	b.n	80004ec <parking_exit+0x70>

			} else {

				flag = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	71fb      	strb	r3, [r7, #7]
		for (int i = 0; i < 3; i++) {
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	dde9      	ble.n	80004cc <parking_exit+0x50>

			}
		}

		LCD_clearscreen(&LCD_user);
 80004f8:	482f      	ldr	r0, [pc, #188]	; (80005b8 <parking_exit+0x13c>)
 80004fa:	f000 fc0a 	bl	8000d12 <LCD_clearscreen>


			if (flag == 1) {
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d13e      	bne.n	8000582 <parking_exit+0x106>
				LCD_gotoxy(&LCD_user, 0, 1);
 8000504:	2201      	movs	r2, #1
 8000506:	2100      	movs	r1, #0
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <parking_exit+0x13c>)
 800050a:	f000 fc23 	bl	8000d54 <LCD_gotoxy>
				LCD_sendstring(&LCD_user, (const char*) "  ID is true  ");
 800050e:	4930      	ldr	r1, [pc, #192]	; (80005d0 <parking_exit+0x154>)
 8000510:	4829      	ldr	r0, [pc, #164]	; (80005b8 <parking_exit+0x13c>)
 8000512:	f000 fbda 	bl	8000cca <LCD_sendstring>
				delay_ms(300);
 8000516:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800051a:	f000 fd3d 	bl	8000f98 <delay_ms>
				free_slots++;
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <parking_exit+0x158>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <parking_exit+0x158>)
 8000528:	701a      	strb	r2, [r3, #0]
				sprintf(freeslot_buff, "freeslots:%d", free_slots);
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <parking_exit+0x158>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	4929      	ldr	r1, [pc, #164]	; (80005d8 <parking_exit+0x15c>)
 8000532:	482a      	ldr	r0, [pc, #168]	; (80005dc <parking_exit+0x160>)
 8000534:	f001 f8d8 	bl	80016e8 <siprintf>
				delay_ms(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053c:	f000 fd2c 	bl	8000f98 <delay_ms>
				LCD_gotoxy(&LCD_user, 0, 2);
 8000540:	2202      	movs	r2, #2
 8000542:	2100      	movs	r1, #0
 8000544:	481c      	ldr	r0, [pc, #112]	; (80005b8 <parking_exit+0x13c>)
 8000546:	f000 fc05 	bl	8000d54 <LCD_gotoxy>
				LCD_sendstring(&LCD_user, (const char*) freeslot_buff);
 800054a:	4924      	ldr	r1, [pc, #144]	; (80005dc <parking_exit+0x160>)
 800054c:	481a      	ldr	r0, [pc, #104]	; (80005b8 <parking_exit+0x13c>)
 800054e:	f000 fbbc 	bl	8000cca <LCD_sendstring>
				led__green_on();
 8000552:	f000 fc59 	bl	8000e08 <led__green_on>
				delay_ms(2000);
 8000556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800055a:	f000 fd1d 	bl	8000f98 <delay_ms>
				Servo1_Entry_Gate(UP);
 800055e:	2001      	movs	r0, #1
 8000560:	f000 f8d2 	bl	8000708 <Servo1_Entry_Gate>
				delay_ms(200);
 8000564:	20c8      	movs	r0, #200	; 0xc8
 8000566:	f000 fd17 	bl	8000f98 <delay_ms>
				led_green_off();
 800056a:	f000 fc59 	bl	8000e20 <led_green_off>

				while (PIR_Entergate());
 800056e:	bf00      	nop
 8000570:	f000 f89c 	bl	80006ac <PIR_Entergate>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1fa      	bne.n	8000570 <parking_exit+0xf4>

				Servo1_Entry_Gate(Down);
 800057a:	2002      	movs	r0, #2
 800057c:	f000 f8c4 	bl	8000708 <Servo1_Entry_Gate>
				LCD_clearscreen(&LCD_user);
			}



}
 8000580:	e016      	b.n	80005b0 <parking_exit+0x134>
			} else if (flag == 0) {
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d113      	bne.n	80005b0 <parking_exit+0x134>
				LCD_gotoxy(&LCD_user, 0, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2100      	movs	r1, #0
 800058c:	480a      	ldr	r0, [pc, #40]	; (80005b8 <parking_exit+0x13c>)
 800058e:	f000 fbe1 	bl	8000d54 <LCD_gotoxy>
				led__red_on();
 8000592:	f000 fc51 	bl	8000e38 <led__red_on>
				LCD_sendstring(&LCD_user, (const char*) "  ID is wrong  ");
 8000596:	4912      	ldr	r1, [pc, #72]	; (80005e0 <parking_exit+0x164>)
 8000598:	4807      	ldr	r0, [pc, #28]	; (80005b8 <parking_exit+0x13c>)
 800059a:	f000 fb96 	bl	8000cca <LCD_sendstring>
				delay_ms(2000);
 800059e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005a2:	f000 fcf9 	bl	8000f98 <delay_ms>
				led_red_off();
 80005a6:	f000 fc53 	bl	8000e50 <led_red_off>
				LCD_clearscreen(&LCD_user);
 80005aa:	4803      	ldr	r0, [pc, #12]	; (80005b8 <parking_exit+0x13c>)
 80005ac:	f000 fbb1 	bl	8000d12 <LCD_clearscreen>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000018 	.word	0x20000018
 80005bc:	08002054 	.word	0x08002054
 80005c0:	08002098 	.word	0x08002098
 80005c4:	200000d0 	.word	0x200000d0
 80005c8:	40013800 	.word	0x40013800
 80005cc:	200000b8 	.word	0x200000b8
 80005d0:	080020a8 	.word	0x080020a8
 80005d4:	20000000 	.word	0x20000000
 80005d8:	080020b8 	.word	0x080020b8
 80005dc:	200000f8 	.word	0x200000f8
 80005e0:	080020c8 	.word	0x080020c8

080005e4 <uart1_config>:

void uart1_config() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
	UART_config U1_config;
	U1_config.uart_mode = uart_mode_TX_RX;
 80005ea:	230c      	movs	r3, #12
 80005ec:	713b      	strb	r3, [r7, #4]
	U1_config.flow_ctrl = uart_flowctrl_none;
 80005ee:	2300      	movs	r3, #0
 80005f0:	743b      	strb	r3, [r7, #16]
	U1_config.uart_baudrate = uart_baud_9600;
 80005f2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80005f6:	60bb      	str	r3, [r7, #8]
	U1_config.uart_parity = uart_parity_none;
 80005f8:	2300      	movs	r3, #0
 80005fa:	733b      	strb	r3, [r7, #12]
	U1_config.uart_payload_length = uart_payload_8bit;
 80005fc:	2300      	movs	r3, #0
 80005fe:	737b      	strb	r3, [r7, #13]
	U1_config.uart_stopbits = stopbit_1;
 8000600:	2300      	movs	r3, #0
 8000602:	73bb      	strb	r3, [r7, #14]
	U1_config.P_IRQ_callback = NULL;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
	U1_config.uart_IRQ_enable = uart_irq_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]

	MCAL_GPIO_uart_init(UART1);
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <uart1_config+0x40>)
 800060e:	f000 ff45 	bl	800149c <MCAL_GPIO_uart_init>
	MCAL_uart_init(UART1, &U1_config);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <uart1_config+0x40>)
 8000618:	f000 fe74 	bl	8001304 <MCAL_uart_init>

}
 800061c:	bf00      	nop
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40013800 	.word	0x40013800

08000628 <uart2_config>:
void uart2_config() {
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
	UART_config U2_config;
	U2_config.uart_mode = uart_mode_TX_RX;
 800062e:	230c      	movs	r3, #12
 8000630:	713b      	strb	r3, [r7, #4]
	U2_config.flow_ctrl = uart_flowctrl_none;
 8000632:	2300      	movs	r3, #0
 8000634:	743b      	strb	r3, [r7, #16]
	U2_config.uart_baudrate = uart_baud_9600;
 8000636:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800063a:	60bb      	str	r3, [r7, #8]
	U2_config.uart_parity = uart_parity_none;
 800063c:	2300      	movs	r3, #0
 800063e:	733b      	strb	r3, [r7, #12]
	U2_config.uart_payload_length = uart_payload_8bit;
 8000640:	2300      	movs	r3, #0
 8000642:	737b      	strb	r3, [r7, #13]
	U2_config.uart_stopbits = stopbit_1;
 8000644:	2300      	movs	r3, #0
 8000646:	73bb      	strb	r3, [r7, #14]
	U2_config.P_IRQ_callback = NULL;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
	U2_config.uart_IRQ_enable = uart_irq_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	73fb      	strb	r3, [r7, #15]

	MCAL_GPIO_uart_init(UART2);
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <uart2_config+0x40>)
 8000652:	f000 ff23 	bl	800149c <MCAL_GPIO_uart_init>
	MCAL_uart_init(UART2, &U2_config);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <uart2_config+0x40>)
 800065c:	f000 fe52 	bl	8001304 <MCAL_uart_init>

}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40004400 	.word	0x40004400

0800066c <PIR_init>:
 */

#include "PIR.h"

void PIR_init()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	GPIO_CONFIGURATION pincnfg;


	//entry gate pin configuration
	pincnfg.GPIO_PIN_NUMBER =PIR_entrypin;
 8000672:	2340      	movs	r3, #64	; 0x40
 8000674:	803b      	strh	r3, [r7, #0]
	pincnfg.GPIO_OUTPUT_SPEED =GPIO_OUTPUT_10MHz;
 8000676:	2301      	movs	r3, #1
 8000678:	80bb      	strh	r3, [r7, #4]
	pincnfg.GPIO_PIN_MODE =GPIO_PUSHPULL_OUTPUT;
 800067a:	2304      	movs	r3, #4
 800067c:	807b      	strh	r3, [r7, #2]
	MCAL_GPIO_INIT(PIR_gpiox, &pincnfg);
 800067e:	463b      	mov	r3, r7
 8000680:	4619      	mov	r1, r3
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <PIR_init+0x3c>)
 8000684:	f000 fd5a 	bl	800113c <MCAL_GPIO_INIT>

	//exit gate pin configuration
	pincnfg.GPIO_PIN_NUMBER =PIR_exitpin;
 8000688:	2302      	movs	r3, #2
 800068a:	803b      	strh	r3, [r7, #0]
	pincnfg.GPIO_OUTPUT_SPEED =GPIO_OUTPUT_10MHz;
 800068c:	2301      	movs	r3, #1
 800068e:	80bb      	strh	r3, [r7, #4]
	pincnfg.GPIO_PIN_MODE =GPIO_PUSHPULL_OUTPUT;
 8000690:	2304      	movs	r3, #4
 8000692:	807b      	strh	r3, [r7, #2]
	MCAL_GPIO_INIT(PIR_gpiox, &pincnfg);
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <PIR_init+0x3c>)
 800069a:	f000 fd4f 	bl	800113c <MCAL_GPIO_INIT>


}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40010800 	.word	0x40010800

080006ac <PIR_Entergate>:
PIR_status PIR_Entergate()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	uint8_t pin_status=MCAL_GPIO_READ_PIN(PIR_gpiox, PIR_entrypin);
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <PIR_Entergate+0x2c>)
 80006b6:	f000 fdf1 	bl	800129c <MCAL_GPIO_READ_PIN>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71bb      	strb	r3, [r7, #6]
	PIR_status status;
	if(pin_status == GPIO_PIN_true)
 80006be:	79bb      	ldrb	r3, [r7, #6]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d102      	bne.n	80006ca <PIR_Entergate+0x1e>
	{

		status= PIR_true;
 80006c4:	2301      	movs	r3, #1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	e001      	b.n	80006ce <PIR_Entergate+0x22>
	}

	else
	{
		status= PIR_false;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]

	}



	return status;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40010800 	.word	0x40010800

080006dc <Servo1_Entry_Gate_Init>:



//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_CONFIGURATION PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN8;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	803b      	strh	r3, [r7, #0]
	PinCinfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80006e8:	2304      	movs	r3, #4
 80006ea:	807b      	strh	r3, [r7, #2]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_OUTPUT_10MHz;
 80006ec:	2301      	movs	r3, #1
 80006ee:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOB, &PinCinfg);
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <Servo1_Entry_Gate_Init+0x28>)
 80006f6:	f000 fd21 	bl	800113c <MCAL_GPIO_INIT>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40010c00 	.word	0x40010c00

08000708 <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d10f      	bne.n	8000738 <Servo1_Entry_Gate+0x30>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WRITE_PIN(GPIOB, GPIO_PIN8, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <Servo1_Entry_Gate+0x60>)
 8000720:	f000 fd97 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
		delay_us(500);
 8000724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000728:	f000 fc20 	bl	8000f6c <delay_us>
		MCAL_GPIO_WRITE_PIN(GPIOB, GPIO_PIN8, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <Servo1_Entry_Gate+0x60>)
 8000734:	f000 fd8d 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
	}
	if(Direction==Down)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b02      	cmp	r3, #2
 800073c:	d10f      	bne.n	800075e <Servo1_Entry_Gate+0x56>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WRITE_PIN(GPIOB, GPIO_PIN8, 1);
 800073e:	2201      	movs	r2, #1
 8000740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <Servo1_Entry_Gate+0x60>)
 8000746:	f000 fd84 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
		delay_us(1488);
 800074a:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 800074e:	f000 fc0d 	bl	8000f6c <delay_us>
		MCAL_GPIO_WRITE_PIN(GPIOB, GPIO_PIN8, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <Servo1_Entry_Gate+0x60>)
 800075a:	f000 fd7a 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
	}


}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40010c00 	.word	0x40010c00

0800076c <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/

	GPIO_CONFIGURATION PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN9;
 8000772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000776:	803b      	strh	r3, [r7, #0]
	PinCinfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000778:	2304      	movs	r3, #4
 800077a:	807b      	strh	r3, [r7, #2]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_OUTPUT_10MHz;
 800077c:	2301      	movs	r3, #1
 800077e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_INIT(GPIOB, &PinCinfg);
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <Servo2_Exit_Gate_Init+0x28>)
 8000786:	f000 fcd9 	bl	800113c <MCAL_GPIO_INIT>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010c00 	.word	0x40010c00

08000798 <Keypad_init>:
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}

void Keypad_init() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
//	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
//	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
//	KEYPAD_PORT = 0xFF;
	GPIO_CONFIGURATION Pincnfg;

	Pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 800079e:	2304      	movs	r3, #4
 80007a0:	807b      	strh	r3, [r7, #2]
	Pincnfg.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_10MHz;
 80007a2:	2301      	movs	r3, #1
 80007a4:	80bb      	strh	r3, [r7, #4]
	Pincnfg.GPIO_PIN_NUMBER = R0;
 80007a6:	2301      	movs	r3, #1
 80007a8:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_INIT(KEYPAD_PORT, &Pincnfg);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	482c      	ldr	r0, [pc, #176]	; (8000860 <Keypad_init+0xc8>)
 80007b0:	f000 fcc4 	bl	800113c <MCAL_GPIO_INIT>

	Pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80007b4:	2304      	movs	r3, #4
 80007b6:	807b      	strh	r3, [r7, #2]
	Pincnfg.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_10MHz;
 80007b8:	2301      	movs	r3, #1
 80007ba:	80bb      	strh	r3, [r7, #4]
	Pincnfg.GPIO_PIN_NUMBER = R1;
 80007bc:	2302      	movs	r3, #2
 80007be:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_INIT(KEYPAD_PORT, &Pincnfg);
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	4826      	ldr	r0, [pc, #152]	; (8000860 <Keypad_init+0xc8>)
 80007c6:	f000 fcb9 	bl	800113c <MCAL_GPIO_INIT>

	Pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80007ca:	2304      	movs	r3, #4
 80007cc:	807b      	strh	r3, [r7, #2]
	Pincnfg.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_10MHz;
 80007ce:	2301      	movs	r3, #1
 80007d0:	80bb      	strh	r3, [r7, #4]
	Pincnfg.GPIO_PIN_NUMBER = R2;
 80007d2:	2308      	movs	r3, #8
 80007d4:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_INIT(KEYPAD_PORT, &Pincnfg);
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4821      	ldr	r0, [pc, #132]	; (8000860 <Keypad_init+0xc8>)
 80007dc:	f000 fcae 	bl	800113c <MCAL_GPIO_INIT>

	Pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80007e0:	2304      	movs	r3, #4
 80007e2:	807b      	strh	r3, [r7, #2]
	Pincnfg.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_10MHz;
 80007e4:	2301      	movs	r3, #1
 80007e6:	80bb      	strh	r3, [r7, #4]
	Pincnfg.GPIO_PIN_NUMBER = R3;
 80007e8:	2310      	movs	r3, #16
 80007ea:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_INIT(KEYPAD_PORT, &Pincnfg);
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	481b      	ldr	r0, [pc, #108]	; (8000860 <Keypad_init+0xc8>)
 80007f2:	f000 fca3 	bl	800113c <MCAL_GPIO_INIT>

	Pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80007f6:	2304      	movs	r3, #4
 80007f8:	807b      	strh	r3, [r7, #2]
	Pincnfg.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_10MHz;
 80007fa:	2301      	movs	r3, #1
 80007fc:	80bb      	strh	r3, [r7, #4]
	Pincnfg.GPIO_PIN_NUMBER = C0;
 80007fe:	2320      	movs	r3, #32
 8000800:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_INIT(KEYPAD_PORT, &Pincnfg);
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4816      	ldr	r0, [pc, #88]	; (8000860 <Keypad_init+0xc8>)
 8000808:	f000 fc98 	bl	800113c <MCAL_GPIO_INIT>

	Pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 800080c:	2304      	movs	r3, #4
 800080e:	807b      	strh	r3, [r7, #2]
	Pincnfg.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_10MHz;
 8000810:	2301      	movs	r3, #1
 8000812:	80bb      	strh	r3, [r7, #4]
	Pincnfg.GPIO_PIN_NUMBER = C1;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_INIT(KEYPAD_PORT, &Pincnfg);
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4810      	ldr	r0, [pc, #64]	; (8000860 <Keypad_init+0xc8>)
 800081e:	f000 fc8d 	bl	800113c <MCAL_GPIO_INIT>

	Pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000822:	2304      	movs	r3, #4
 8000824:	807b      	strh	r3, [r7, #2]
	Pincnfg.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_10MHz;
 8000826:	2301      	movs	r3, #1
 8000828:	80bb      	strh	r3, [r7, #4]
	Pincnfg.GPIO_PIN_NUMBER = C2;
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_INIT(KEYPAD_PORT, &Pincnfg);
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <Keypad_init+0xc8>)
 8000834:	f000 fc82 	bl	800113c <MCAL_GPIO_INIT>

	Pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000838:	2304      	movs	r3, #4
 800083a:	807b      	strh	r3, [r7, #2]
	Pincnfg.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_10MHz;
 800083c:	2301      	movs	r3, #1
 800083e:	80bb      	strh	r3, [r7, #4]
	Pincnfg.GPIO_PIN_NUMBER = C3;
 8000840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000844:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_INIT(KEYPAD_PORT, &Pincnfg);
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <Keypad_init+0xc8>)
 800084c:	f000 fc76 	bl	800113c <MCAL_GPIO_INIT>


	MCAL_GPIO_WRITE_PORT(KEYPAD_PORT, 0xFF);
 8000850:	21ff      	movs	r1, #255	; 0xff
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <Keypad_init+0xc8>)
 8000854:	f000 fd14 	bl	8001280 <MCAL_GPIO_WRITE_PORT>

}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40010c00 	.word	0x40010c00

08000864 <Keypad_getkey>:

char Keypad_getkey()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

int i, j;
	for (i = 0; i < 4; i++)
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	e0b4      	b.n	80009da <Keypad_getkey+0x176>
	{

		MCAL_GPIO_WRITE_PIN(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_true);
 8000870:	4b5e      	ldr	r3, [pc, #376]	; (80009ec <Keypad_getkey+0x188>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	2201      	movs	r2, #1
 8000878:	4619      	mov	r1, r3
 800087a:	485d      	ldr	r0, [pc, #372]	; (80009f0 <Keypad_getkey+0x18c>)
 800087c:	f000 fce9 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
		MCAL_GPIO_WRITE_PIN(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_true);
 8000880:	4b5a      	ldr	r3, [pc, #360]	; (80009ec <Keypad_getkey+0x188>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	b29b      	uxth	r3, r3
 8000886:	2201      	movs	r2, #1
 8000888:	4619      	mov	r1, r3
 800088a:	4859      	ldr	r0, [pc, #356]	; (80009f0 <Keypad_getkey+0x18c>)
 800088c:	f000 fce1 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
		MCAL_GPIO_WRITE_PIN(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_true);
 8000890:	4b56      	ldr	r3, [pc, #344]	; (80009ec <Keypad_getkey+0x188>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	b29b      	uxth	r3, r3
 8000896:	2201      	movs	r2, #1
 8000898:	4619      	mov	r1, r3
 800089a:	4855      	ldr	r0, [pc, #340]	; (80009f0 <Keypad_getkey+0x18c>)
 800089c:	f000 fcd9 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
		MCAL_GPIO_WRITE_PIN(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_true);
 80008a0:	4b52      	ldr	r3, [pc, #328]	; (80009ec <Keypad_getkey+0x188>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2201      	movs	r2, #1
 80008a8:	4619      	mov	r1, r3
 80008aa:	4851      	ldr	r0, [pc, #324]	; (80009f0 <Keypad_getkey+0x18c>)
 80008ac:	f000 fcd1 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
		MCAL_GPIO_WRITE_PIN(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_false);
 80008b0:	4a4e      	ldr	r2, [pc, #312]	; (80009ec <Keypad_getkey+0x188>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	484c      	ldr	r0, [pc, #304]	; (80009f0 <Keypad_getkey+0x18c>)
 80008c0:	f000 fcc7 	bl	8001252 <MCAL_GPIO_WRITE_PIN>

		for (j = 0; j < 4; j++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	e080      	b.n	80009cc <Keypad_getkey+0x168>
		{
			if (MCAL_GPIO_READ_PIN(KEYPAD_PORT, Key_padRow[j]) == 0) {
 80008ca:	4a4a      	ldr	r2, [pc, #296]	; (80009f4 <Keypad_getkey+0x190>)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	4619      	mov	r1, r3
 80008d6:	4846      	ldr	r0, [pc, #280]	; (80009f0 <Keypad_getkey+0x18c>)
 80008d8:	f000 fce0 	bl	800129c <MCAL_GPIO_READ_PIN>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d171      	bne.n	80009c6 <Keypad_getkey+0x162>
				while (MCAL_GPIO_READ_PIN(KEYPAD_PORT, Key_padRow[j]) == 0)
 80008e2:	bf00      	nop
 80008e4:	4a43      	ldr	r2, [pc, #268]	; (80009f4 <Keypad_getkey+0x190>)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	483f      	ldr	r0, [pc, #252]	; (80009f0 <Keypad_getkey+0x18c>)
 80008f2:	f000 fcd3 	bl	800129c <MCAL_GPIO_READ_PIN>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0f3      	beq.n	80008e4 <Keypad_getkey+0x80>
					;
				switch (i) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d861      	bhi.n	80009c6 <Keypad_getkey+0x162>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <Keypad_getkey+0xa4>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000919 	.word	0x08000919
 800090c:	08000941 	.word	0x08000941
 8000910:	08000969 	.word	0x08000969
 8000914:	08000991 	.word	0x08000991
				case (0):
					if (j == 0)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <Keypad_getkey+0xbe>
						return '7';
 800091e:	2337      	movs	r3, #55	; 0x37
 8000920:	e060      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 1)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d101      	bne.n	800092c <Keypad_getkey+0xc8>
						return '4';
 8000928:	2334      	movs	r3, #52	; 0x34
 800092a:	e05b      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 2)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d101      	bne.n	8000936 <Keypad_getkey+0xd2>
						return '1';
 8000932:	2331      	movs	r3, #49	; 0x31
 8000934:	e056      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 3)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d13d      	bne.n	80009b8 <Keypad_getkey+0x154>
						return '!';
 800093c:	2321      	movs	r3, #33	; 0x21
 800093e:	e051      	b.n	80009e4 <Keypad_getkey+0x180>
					break;
				case (1):
					if (j == 0)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <Keypad_getkey+0xe6>
						return '8';
 8000946:	2338      	movs	r3, #56	; 0x38
 8000948:	e04c      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 1)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d101      	bne.n	8000954 <Keypad_getkey+0xf0>
						return '5';
 8000950:	2335      	movs	r3, #53	; 0x35
 8000952:	e047      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 2)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d101      	bne.n	800095e <Keypad_getkey+0xfa>
						return '2';
 800095a:	2332      	movs	r3, #50	; 0x32
 800095c:	e042      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 3)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d12b      	bne.n	80009bc <Keypad_getkey+0x158>
						return '0';
 8000964:	2330      	movs	r3, #48	; 0x30
 8000966:	e03d      	b.n	80009e4 <Keypad_getkey+0x180>
					break;
				case (2):
					if (j == 0)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <Keypad_getkey+0x10e>
						return '9';
 800096e:	2339      	movs	r3, #57	; 0x39
 8000970:	e038      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 1)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d101      	bne.n	800097c <Keypad_getkey+0x118>
						return '6';
 8000978:	2336      	movs	r3, #54	; 0x36
 800097a:	e033      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 2)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d101      	bne.n	8000986 <Keypad_getkey+0x122>
						return '3';
 8000982:	2333      	movs	r3, #51	; 0x33
 8000984:	e02e      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 3)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d119      	bne.n	80009c0 <Keypad_getkey+0x15c>
						return '=';
 800098c:	233d      	movs	r3, #61	; 0x3d
 800098e:	e029      	b.n	80009e4 <Keypad_getkey+0x180>
					break;
				case (3):
					if (j == 0)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <Keypad_getkey+0x136>
						return '/';
 8000996:	232f      	movs	r3, #47	; 0x2f
 8000998:	e024      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 1)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <Keypad_getkey+0x140>
						return '*';
 80009a0:	232a      	movs	r3, #42	; 0x2a
 80009a2:	e01f      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 2)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d101      	bne.n	80009ae <Keypad_getkey+0x14a>
						return '-';
 80009aa:	232d      	movs	r3, #45	; 0x2d
 80009ac:	e01a      	b.n	80009e4 <Keypad_getkey+0x180>
					else if (j == 3)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d107      	bne.n	80009c4 <Keypad_getkey+0x160>
						return '+';
 80009b4:	232b      	movs	r3, #43	; 0x2b
 80009b6:	e015      	b.n	80009e4 <Keypad_getkey+0x180>
					break;
 80009b8:	bf00      	nop
 80009ba:	e004      	b.n	80009c6 <Keypad_getkey+0x162>
					break;
 80009bc:	bf00      	nop
 80009be:	e002      	b.n	80009c6 <Keypad_getkey+0x162>
					break;
 80009c0:	bf00      	nop
 80009c2:	e000      	b.n	80009c6 <Keypad_getkey+0x162>
					break;
 80009c4:	bf00      	nop
		for (j = 0; j < 4; j++)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	f77f af7b 	ble.w	80008ca <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	f77f af47 	ble.w	8000870 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 80009e2:	2341      	movs	r3, #65	; 0x41
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000003c 	.word	0x2000003c
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	2000002c 	.word	0x2000002c

080009f8 <LCD_delay>:
#define SET_CG_ADDRESS			0x40
#define SET_DD_ADDRESS			0x80



static void LCD_delay(int ms){
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	volatile uint32_t counter =0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
	for(int i =0;i<ms;i++){
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e00a      	b.n	8000a20 <LCD_delay+0x28>
		for(;counter<1500;counter++);
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	f240 52db 	movw	r2, #1499	; 0x5db
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d9f7      	bls.n	8000a0a <LCD_delay+0x12>
	for(int i =0;i<ms;i++){
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbf3      	blt.n	8000a10 <LCD_delay+0x18>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <LCD_kick>:
//void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx,uint16_t PinNumber,uint8_t Vlaue);

void LCD_kick(s_LCD_Config_t  * LCD){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.enpin);									//enable pulse
MCAL_GPIO_WRITE_PIN(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.enpin,GPIO_PIN_true);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	88db      	ldrh	r3, [r3, #6]
 8000a44:	2201      	movs	r2, #1
 8000a46:	4619      	mov	r1, r3
 8000a48:	f000 fc03 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
	LCD_delay(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ffd3 	bl	80009f8 <LCD_delay>
MCAL_GPIO_WRITE_PIN(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.enpin,GPIO_PIN_false);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	88db      	ldrh	r3, [r3, #6]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f000 fbf8 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <LCD_init>:

void LCD_init(s_LCD_Config_t  *  LCD ){
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	//*(LCD->s_LCDCtrlPins.p_DataDireReg) |= (1<<LCD->s_LCDCtrlPins.enpin) | (1<<LCD->s_LCDCtrlPins.rspin) | (1<<LCD->s_LCDCtrlPins.rwpin);
	GPIO_CONFIGURATION pin = {LCD->s_LCDCtrlPins.enpin ,GPIO_PUSHPULL_OUTPUT, GPIO_OUTPUT_10MHz};
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	88db      	ldrh	r3, [r3, #6]
 8000a76:	813b      	strh	r3, [r7, #8]
 8000a78:	2304      	movs	r3, #4
 8000a7a:	817b      	strh	r3, [r7, #10]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_INIT(LCD->s_LCDCtrlPins.GPIOX,&pin);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f107 0208 	add.w	r2, r7, #8
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fb56 	bl	800113c <MCAL_GPIO_INIT>
	pin.GPIO_PIN_NUMBER = LCD->s_LCDCtrlPins.rspin;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	889b      	ldrh	r3, [r3, #4]
 8000a94:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_INIT(LCD->s_LCDCtrlPins.GPIOX,&pin);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fb4b 	bl	800113c <MCAL_GPIO_INIT>
	LCD->Ch_Counter = 0;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	74da      	strb	r2, [r3, #19]
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7c9b      	ldrb	r3, [r3, #18]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d819      	bhi.n	8000ae8 <LCD_init+0x7e>
	{
		//*(LCD->s_LCDDataPins.p_DataDireReg) |= (0x0F << LCD->s_LCDDataPins.DataPinStart);
		for(uint8_t i =0;i<4;i++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e012      	b.n	8000ae0 <LCD_init+0x76>
			pin.GPIO_PIN_NUMBER = LCD->s_LCDDataPins.DataPinStart << i;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_INIT(LCD->s_LCDDataPins.GPIOX,&pin);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	f107 0208 	add.w	r2, r7, #8
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fb31 	bl	800113c <MCAL_GPIO_INIT>
		for(uint8_t i =0;i<4;i++){
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	3301      	adds	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d9e9      	bls.n	8000aba <LCD_init+0x50>
 8000ae6:	e018      	b.n	8000b1a <LCD_init+0xb0>
		}
	}
	else
	{
		for(uint8_t i =0;i<8;i++){
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73bb      	strb	r3, [r7, #14]
 8000aec:	e012      	b.n	8000b14 <LCD_init+0xaa>
			pin.GPIO_PIN_NUMBER = LCD->s_LCDDataPins.DataPinStart << i;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	899b      	ldrh	r3, [r3, #12]
 8000af2:	461a      	mov	r2, r3
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	813b      	strh	r3, [r7, #8]
			MCAL_GPIO_INIT(LCD->s_LCDDataPins.GPIOX,&pin);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f107 0208 	add.w	r2, r7, #8
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fb17 	bl	800113c <MCAL_GPIO_INIT>
		for(uint8_t i =0;i<8;i++){
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	3301      	adds	r3, #1
 8000b12:	73bb      	strb	r3, [r7, #14]
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	d9e9      	bls.n	8000aee <LCD_init+0x84>
		}
	}
	LCD_sendchar(LCD ,RETURN_HOME , COMMAND );
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f82a 	bl	8000b78 <LCD_sendchar>
	LCD_sendchar(LCD ,FUNCTION_SET + LCD->e_OperMode , COMMAND );
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7c9b      	ldrb	r3, [r3, #18]
 8000b28:	3320      	adds	r3, #32
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f821 	bl	8000b78 <LCD_sendchar>
	LCD_sendchar(LCD ,DISPLAY_CONTROL + LCD->e_DispCtrl , COMMAND );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7c5b      	ldrb	r3, [r3, #17]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f818 	bl	8000b78 <LCD_sendchar>
	LCD_sendchar(LCD ,ENTRY_MODE_SET + LCD->e_EntryMode , COMMAND );
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7c1b      	ldrb	r3, [r3, #16]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f80f 	bl	8000b78 <LCD_sendchar>
	LCD_clearscreen(LCD);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f8d9 	bl	8000d12 <LCD_clearscreen>
	LCD_returnhome(LCD);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 f8e6 	bl	8000d32 <LCD_returnhome>
	LCD_sendchar(LCD ,SET_DD_ADDRESS , COMMAND );
 8000b66:	2200      	movs	r2, #0
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 f804 	bl	8000b78 <LCD_sendchar>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <LCD_sendchar>:
void LCD_sendchar(s_LCD_Config_t  *  LCD ,unsigned char data ,e_LCDCharType_t e_LCDCharType)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
 8000b84:	4613      	mov	r3, r2
 8000b86:	70bb      	strb	r3, [r7, #2]
	LCDIsbusy(LCD);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 f8b7 	bl	8000cfc <LCDIsbusy>
	if(LCD->e_OperMode < EIGHTBIT_1LINE_7DOT)	// 4 bits
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7c9b      	ldrb	r3, [r3, #18]
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	d846      	bhi.n	8000c24 <LCD_sendchar+0xac>
	{
		//void MCAL_GPIO_WriteGroup(GPIO_TypeDef * GPIOx,uint16_t Vlaue,uint16_t mask);
		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0x0F << LCD->s_LCDDataPins.DataPinStart);						// clear the data pins
		//*(LCD->s_LCDDataPins.p_PortReg) = (((data & 0xF0) >> 4) << LCD->s_LCDDataPins.DataPinStart);		//the high nibble
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6898      	ldr	r0, [r3, #8]
				,((data & 0xF0) >> 4)*LCD->s_LCDDataPins.DataPinStart
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	b299      	uxth	r1, r3
				,0x0F*LCD->s_LCDDataPins.DataPinStart);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	f000 fb86 	bl	80012ca <MCAL_GPIO_WriteGroup>
		if(e_LCDCharType == COMMAND)
 8000bbe:	78bb      	ldrb	r3, [r7, #2]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d108      	bne.n	8000bd6 <LCD_sendchar+0x5e>
			//BITCLEAR(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
		MCAL_GPIO_WRITE_PIN(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_false);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	889b      	ldrh	r3, [r3, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f000 fb3f 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
 8000bd4:	e007      	b.n	8000be6 <LCD_sendchar+0x6e>
		else{
			//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
		MCAL_GPIO_WRITE_PIN(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_true);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	2201      	movs	r2, #1
 8000be0:	4619      	mov	r1, r3
 8000be2:	f000 fb36 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
		}

		LCD_kick(LCD);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff24 	bl	8000a34 <LCD_kick>

		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0x0F << LCD->s_LCDDataPins.DataPinStart);
		//*(LCD->s_LCDDataPins.p_PortReg) |= ((data & 0x0F) << LCD->s_LCDDataPins.DataPinStart);
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6898      	ldr	r0, [r3, #8]
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	b29b      	uxth	r3, r3
				,(data & 0x0F)*LCD->s_LCDDataPins.DataPinStart
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000bfe:	fb02 f303 	mul.w	r3, r2, r3
 8000c02:	b299      	uxth	r1, r3
				,0x0F*LCD->s_LCDDataPins.DataPinStart);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000c08:	461a      	mov	r2, r3
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	f000 fb5a 	bl	80012ca <MCAL_GPIO_WriteGroup>

		LCD_kick(LCD);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ff0c 	bl	8000a34 <LCD_kick>
		LCD_delay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff feeb 	bl	80009f8 <LCD_delay>
 8000c22:	e028      	b.n	8000c76 <LCD_sendchar+0xfe>
	}
	else
	{						//8bit mode
		//*(LCD->s_LCDDataPins.p_PortReg) &= ~(0xFF << LCD->s_LCDDataPins.DataPinStart);
		//*(LCD->s_LCDDataPins.p_PortReg) |= (data << LCD->s_LCDDataPins.DataPinStart);
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6898      	ldr	r0, [r3, #8]
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	b29b      	uxth	r3, r3
				,(data & 0xFF)*LCD->s_LCDDataPins.DataPinStart
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	8992      	ldrh	r2, [r2, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000c30:	fb02 f303 	mul.w	r3, r2, r3
 8000c34:	b299      	uxth	r1, r3
				,0xFF*LCD->s_LCDDataPins.DataPinStart);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	899b      	ldrh	r3, [r3, #12]
		MCAL_GPIO_WriteGroup(LCD->s_LCDDataPins.GPIOX
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	0212      	lsls	r2, r2, #8
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	f000 fb41 	bl	80012ca <MCAL_GPIO_WriteGroup>
		if(e_LCDCharType == COMMAND)
 8000c48:	78bb      	ldrb	r3, [r7, #2]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d108      	bne.n	8000c60 <LCD_sendchar+0xe8>
			//BITCLEAR(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
		MCAL_GPIO_WRITE_PIN(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_false);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	889b      	ldrh	r3, [r3, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f000 fafa 	bl	8001252 <MCAL_GPIO_WRITE_PIN>
 8000c5e:	e007      	b.n	8000c70 <LCD_sendchar+0xf8>
		else{
			//BITSET(*(LCD->s_LCDCtrlPins.p_PortReg),LCD->s_LCDCtrlPins.rspin);
		MCAL_GPIO_WRITE_PIN(LCD->s_LCDCtrlPins.GPIOX,LCD->s_LCDCtrlPins.rspin,GPIO_PIN_true);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	889b      	ldrh	r3, [r3, #4]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f000 faf1 	bl	8001252 <MCAL_GPIO_WRITE_PIN>

		}
		LCD_kick(LCD);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fedf 	bl	8000a34 <LCD_kick>
	}
	if(e_LCDCharType == DATA){
 8000c76:	78bb      	ldrb	r3, [r7, #2]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d122      	bne.n	8000cc2 <LCD_sendchar+0x14a>
		LCD->Ch_Counter ++;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7cdb      	ldrb	r3, [r3, #19]
 8000c80:	3301      	adds	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	74da      	strb	r2, [r3, #19]
			if(LCD->Ch_Counter==LINE_DIGITS)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7cdb      	ldrb	r3, [r3, #19]
 8000c8c:	2b10      	cmp	r3, #16
 8000c8e:	d105      	bne.n	8000c9c <LCD_sendchar+0x124>
				LCD_gotoxy(LCD,0,1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2100      	movs	r1, #0
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f85d 	bl	8000d54 <LCD_gotoxy>
			else if (LCD->Ch_Counter==2*LINE_DIGITS)
				LCD_gotoxy(LCD,0,2);
			else if (LCD->Ch_Counter==3*LINE_DIGITS)
				LCD_gotoxy(LCD,0,3);
		}
}
 8000c9a:	e012      	b.n	8000cc2 <LCD_sendchar+0x14a>
			else if (LCD->Ch_Counter==2*LINE_DIGITS)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7cdb      	ldrb	r3, [r3, #19]
 8000ca0:	2b20      	cmp	r3, #32
 8000ca2:	d105      	bne.n	8000cb0 <LCD_sendchar+0x138>
				LCD_gotoxy(LCD,0,2);
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 f853 	bl	8000d54 <LCD_gotoxy>
}
 8000cae:	e008      	b.n	8000cc2 <LCD_sendchar+0x14a>
			else if (LCD->Ch_Counter==3*LINE_DIGITS)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7cdb      	ldrb	r3, [r3, #19]
 8000cb4:	2b30      	cmp	r3, #48	; 0x30
 8000cb6:	d104      	bne.n	8000cc2 <LCD_sendchar+0x14a>
				LCD_gotoxy(LCD,0,3);
 8000cb8:	2203      	movs	r2, #3
 8000cba:	2100      	movs	r1, #0
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f849 	bl	8000d54 <LCD_gotoxy>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <LCD_sendstring>:
void LCD_sendstring(s_LCD_Config_t  * LCD , const char *  data)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	6039      	str	r1, [r7, #0]
	for(;*data != '\0';data++){
 8000cd4:	e009      	b.n	8000cea <LCD_sendstring+0x20>
		LCD_sendchar(LCD,*data,DATA);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4619      	mov	r1, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4a 	bl	8000b78 <LCD_sendchar>
	for(;*data != '\0';data++){
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f1      	bne.n	8000cd6 <LCD_sendstring+0xc>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <LCDIsbusy>:
void LCDIsbusy(s_LCD_Config_t  * LCD)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	//currently I'm working on reading the actual busy flag
	//for the end of the dev process xD let it simply a delay.
	LCD_delay(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fe77 	bl	80009f8 <LCD_delay>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <LCD_clearscreen>:

void LCD_clearscreen(s_LCD_Config_t  * LCD)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	LCD_sendchar(LCD , ClEAR_SCREEN , COMMAND );
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ff2a 	bl	8000b78 <LCD_sendchar>
	LCD->Ch_Counter=0;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	74da      	strb	r2, [r3, #19]
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <LCD_returnhome>:
void LCD_returnhome(s_LCD_Config_t  * LCD)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	LCD_sendchar(LCD , RETURN_HOME , COMMAND );
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff1a 	bl	8000b78 <LCD_sendchar>
	LCD->Ch_Counter=0;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	74da      	strb	r2, [r3, #19]
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <LCD_gotoxy>:
void LCD_gotoxy(s_LCD_Config_t  * LCD , unsigned char x , unsigned char y)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
 8000d60:	4613      	mov	r3, r2
 8000d62:	70bb      	strb	r3, [r7, #2]
	uint32_t address;
	switch(y)
 8000d64:	78bb      	ldrb	r3, [r7, #2]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d819      	bhi.n	8000d9e <LCD_gotoxy+0x4a>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <LCD_gotoxy+0x1c>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000d81 	.word	0x08000d81
 8000d74:	08000d87 	.word	0x08000d87
 8000d78:	08000d8f 	.word	0x08000d8f
 8000d7c:	08000d97 	.word	0x08000d97
	{
	case 0:
		address = x;
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	60fb      	str	r3, [r7, #12]
		break;
 8000d84:	e00b      	b.n	8000d9e <LCD_gotoxy+0x4a>
	case 1:
		address = 0x40+x;
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	3340      	adds	r3, #64	; 0x40
 8000d8a:	60fb      	str	r3, [r7, #12]
		break;
 8000d8c:	e007      	b.n	8000d9e <LCD_gotoxy+0x4a>
	case 2:
		address = 0x14+x;
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	3314      	adds	r3, #20
 8000d92:	60fb      	str	r3, [r7, #12]
		break;
 8000d94:	e003      	b.n	8000d9e <LCD_gotoxy+0x4a>
	case 3:
		address = 0x54+x;
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	3354      	adds	r3, #84	; 0x54
 8000d9a:	60fb      	str	r3, [r7, #12]
		break;
 8000d9c:	bf00      	nop
	}
	LCD->Ch_Counter=y*LINE_DIGITS+x;
 8000d9e:	78bb      	ldrb	r3, [r7, #2]
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	4413      	add	r3, r2
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	74da      	strb	r2, [r3, #19]
	LCD_sendchar(LCD,SET_DD_ADDRESS+address,COMMAND);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3b80      	subs	r3, #128	; 0x80
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fedc 	bl	8000b78 <LCD_sendchar>
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <led_init>:
 *      Author: abdalrahman salah
 */

#include "led.h"

void led_init() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

	GPIO_CONFIGURATION pincnfg;

	//green led init
	pincnfg.GPIO_PIN_NUMBER = led_green_pin;
 8000dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dd2:	803b      	strh	r3, [r7, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	80bb      	strh	r3, [r7, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	807b      	strh	r3, [r7, #2]
	MCAL_GPIO_INIT(led_gpiox, &pincnfg);
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4619      	mov	r1, r3
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <led_init+0x3c>)
 8000de2:	f000 f9ab 	bl	800113c <MCAL_GPIO_INIT>

	//red led init
	pincnfg.GPIO_PIN_NUMBER = led_red_pin;
 8000de6:	2301      	movs	r3, #1
 8000de8:	803b      	strh	r3, [r7, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000dea:	2301      	movs	r3, #1
 8000dec:	80bb      	strh	r3, [r7, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000dee:	2304      	movs	r3, #4
 8000df0:	807b      	strh	r3, [r7, #2]
	MCAL_GPIO_INIT(led_gpiox, &pincnfg);
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4803      	ldr	r0, [pc, #12]	; (8000e04 <led_init+0x3c>)
 8000df8:	f000 f9a0 	bl	800113c <MCAL_GPIO_INIT>

}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010800 	.word	0x40010800

08000e08 <led__green_on>:
void led__green_on() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

	MCAL_GPIO_WRITE_PIN(led_gpiox, led_green_pin, GPIO_PIN_true);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e12:	4802      	ldr	r0, [pc, #8]	; (8000e1c <led__green_on+0x14>)
 8000e14:	f000 fa1d 	bl	8001252 <MCAL_GPIO_WRITE_PIN>

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010800 	.word	0x40010800

08000e20 <led_green_off>:
void led_green_off() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

	MCAL_GPIO_WRITE_PIN(led_gpiox, led_green_pin, GPIO_PIN_false);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e2a:	4802      	ldr	r0, [pc, #8]	; (8000e34 <led_green_off+0x14>)
 8000e2c:	f000 fa11 	bl	8001252 <MCAL_GPIO_WRITE_PIN>

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40010800 	.word	0x40010800

08000e38 <led__red_on>:
void led__red_on() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

	MCAL_GPIO_WRITE_PIN(led_gpiox, led_red_pin, GPIO_PIN_true);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <led__red_on+0x14>)
 8000e42:	f000 fa06 	bl	8001252 <MCAL_GPIO_WRITE_PIN>

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010800 	.word	0x40010800

08000e50 <led_red_off>:
void led_red_off() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

	MCAL_GPIO_WRITE_PIN(led_gpiox, led_red_pin, GPIO_PIN_false);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <led_red_off+0x14>)
 8000e5a:	f000 f9fa 	bl	8001252 <MCAL_GPIO_WRITE_PIN>

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010800 	.word	0x40010800

08000e68 <MCAL_RCC_GetSysCLK>:

const uint16_t AHB_PRESCALER[17U]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};


uint32_t MCAL_RCC_GetSysCLK(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable

			switch((RCC->CFGR >>2) & 0b11)
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MCAL_RCC_GetSysCLK+0x28>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <MCAL_RCC_GetSysCLK+0x18>
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d002      	beq.n	8000e84 <MCAL_RCC_GetSysCLK+0x1c>
 8000e7e:	e003      	b.n	8000e88 <MCAL_RCC_GetSysCLK+0x20>
			{

			case 0:
				return HSI_CLK;
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <MCAL_RCC_GetSysCLK+0x2c>)
 8000e82:	e001      	b.n	8000e88 <MCAL_RCC_GetSysCLK+0x20>
				break;
			case 1:
				return HSE_CLK;
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <MCAL_RCC_GetSysCLK+0x30>)
 8000e86:	e7ff      	b.n	8000e88 <MCAL_RCC_GetSysCLK+0x20>
				break;

			}

}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000
 8000e94:	007a1200 	.word	0x007a1200
 8000e98:	00f42400 	.word	0x00f42400

08000e9c <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return( MCAL_RCC_GetSysCLK()>>(AHB_PRESCALER[(RCC->CFGR>>4) &0b1111]));
 8000ea0:	f7ff ffe2 	bl	8000e68 <MCAL_RCC_GetSysCLK>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <MCAL_RCC_GetHCLKFreq+0x28>)
 8000eb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000eb6:	fa22 f303 	lsr.w	r3, r2, r3


}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	080020f0 	.word	0x080020f0

08000ec8 <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq()>>(APB_PRESCALER[(RCC->CFGR>>8) &0b111]));
 8000ecc:	f7ff ffe6 	bl	8000e9c <MCAL_RCC_GetHCLKFreq>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	4903      	ldr	r1, [pc, #12]	; (8000eec <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000ede:	5ccb      	ldrb	r3, [r1, r3]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	080020e8 	.word	0x080020e8

08000ef0 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq()>>(APB_PRESCALER[(RCC->CFGR)>>11 &0b111]));
 8000ef4:	f7ff ffd2 	bl	8000e9c <MCAL_RCC_GetHCLKFreq>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	0adb      	lsrs	r3, r3, #11
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	4903      	ldr	r1, [pc, #12]	; (8000f14 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000f06:	5ccb      	ldrb	r3, [r1, r3]
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3


}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	080020e8 	.word	0x080020e8

08000f18 <Timer2_init>:
#include "Timer.h"



void Timer2_init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <Timer2_init+0x44>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <Timer2_init+0x44>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <Timer2_init+0x48>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <Timer2_init+0x4c>)
 8000f30:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f34:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 8000f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 8000f46:	bf00      	nop
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <Timer2_init+0x50>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0fb      	beq.n	8000f48 <Timer2_init+0x30>
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	4002101c 	.word	0x4002101c
 8000f60:	40000028 	.word	0x40000028
 8000f64:	4000002c 	.word	0x4000002c
 8000f68:	40000010 	.word	0x40000010

08000f6c <delay_us>:

void delay_us(int us)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <delay_us+0x28>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 8000f7a:	bf00      	nop
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <delay_us+0x28>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3fa      	bcc.n	8000f7c <delay_us+0x10>
}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40000024 	.word	0x40000024

08000f98 <delay_ms>:

void delay_ms(int ms)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	int i=0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e006      	b.n	8000fb8 <delay_ms+0x20>
	{
		delay_us(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f7ff ffdd 	bl	8000f6c <delay_us>
	for(i=0;i<ms;i++)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf4      	blt.n	8000faa <delay_ms+0x12>
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <get_pin_position>:

 */


uint8_t get_pin_position(uint16_t pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
	switch (pin) {
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fdc:	f000 80a5 	beq.w	800112a <get_pin_position+0x15e>
 8000fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fe4:	f300 80a3 	bgt.w	800112e <get_pin_position+0x162>
 8000fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fec:	f000 809b 	beq.w	8001126 <get_pin_position+0x15a>
 8000ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ff4:	f300 809b 	bgt.w	800112e <get_pin_position+0x162>
 8000ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ffc:	f000 8091 	beq.w	8001122 <get_pin_position+0x156>
 8001000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001004:	f300 8093 	bgt.w	800112e <get_pin_position+0x162>
 8001008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800100c:	f000 8087 	beq.w	800111e <get_pin_position+0x152>
 8001010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001014:	f300 808b 	bgt.w	800112e <get_pin_position+0x162>
 8001018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800101c:	d07d      	beq.n	800111a <get_pin_position+0x14e>
 800101e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001022:	f300 8084 	bgt.w	800112e <get_pin_position+0x162>
 8001026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102a:	d074      	beq.n	8001116 <get_pin_position+0x14a>
 800102c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001030:	dc7d      	bgt.n	800112e <get_pin_position+0x162>
 8001032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001036:	d06c      	beq.n	8001112 <get_pin_position+0x146>
 8001038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800103c:	dc77      	bgt.n	800112e <get_pin_position+0x162>
 800103e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001042:	d064      	beq.n	800110e <get_pin_position+0x142>
 8001044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001048:	dc71      	bgt.n	800112e <get_pin_position+0x162>
 800104a:	2b80      	cmp	r3, #128	; 0x80
 800104c:	d05d      	beq.n	800110a <get_pin_position+0x13e>
 800104e:	2b80      	cmp	r3, #128	; 0x80
 8001050:	dc6d      	bgt.n	800112e <get_pin_position+0x162>
 8001052:	2b20      	cmp	r3, #32
 8001054:	dc48      	bgt.n	80010e8 <get_pin_position+0x11c>
 8001056:	2b00      	cmp	r3, #0
 8001058:	dd69      	ble.n	800112e <get_pin_position+0x162>
 800105a:	3b01      	subs	r3, #1
 800105c:	2b1f      	cmp	r3, #31
 800105e:	d866      	bhi.n	800112e <get_pin_position+0x162>
 8001060:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <get_pin_position+0x9c>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	080010ef 	.word	0x080010ef
 800106c:	080010f3 	.word	0x080010f3
 8001070:	0800112f 	.word	0x0800112f
 8001074:	080010f7 	.word	0x080010f7
 8001078:	0800112f 	.word	0x0800112f
 800107c:	0800112f 	.word	0x0800112f
 8001080:	0800112f 	.word	0x0800112f
 8001084:	080010fb 	.word	0x080010fb
 8001088:	0800112f 	.word	0x0800112f
 800108c:	0800112f 	.word	0x0800112f
 8001090:	0800112f 	.word	0x0800112f
 8001094:	0800112f 	.word	0x0800112f
 8001098:	0800112f 	.word	0x0800112f
 800109c:	0800112f 	.word	0x0800112f
 80010a0:	0800112f 	.word	0x0800112f
 80010a4:	080010ff 	.word	0x080010ff
 80010a8:	0800112f 	.word	0x0800112f
 80010ac:	0800112f 	.word	0x0800112f
 80010b0:	0800112f 	.word	0x0800112f
 80010b4:	0800112f 	.word	0x0800112f
 80010b8:	0800112f 	.word	0x0800112f
 80010bc:	0800112f 	.word	0x0800112f
 80010c0:	0800112f 	.word	0x0800112f
 80010c4:	0800112f 	.word	0x0800112f
 80010c8:	0800112f 	.word	0x0800112f
 80010cc:	0800112f 	.word	0x0800112f
 80010d0:	0800112f 	.word	0x0800112f
 80010d4:	0800112f 	.word	0x0800112f
 80010d8:	0800112f 	.word	0x0800112f
 80010dc:	0800112f 	.word	0x0800112f
 80010e0:	0800112f 	.word	0x0800112f
 80010e4:	08001103 	.word	0x08001103
 80010e8:	2b40      	cmp	r3, #64	; 0x40
 80010ea:	d00c      	beq.n	8001106 <get_pin_position+0x13a>
 80010ec:	e01f      	b.n	800112e <get_pin_position+0x162>
	case GPIO_PIN0:
			return 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e01e      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN1:
			return 4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	e01c      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN2:
			return 8;
 80010f6:	2308      	movs	r3, #8
 80010f8:	e01a      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN3:
			return 12;
 80010fa:	230c      	movs	r3, #12
 80010fc:	e018      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN4:
			return 16;
 80010fe:	2310      	movs	r3, #16
 8001100:	e016      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN5:
			return 20;
 8001102:	2314      	movs	r3, #20
 8001104:	e014      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN6:
			return 24;
 8001106:	2318      	movs	r3, #24
 8001108:	e012      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN7:
			return 28;
 800110a:	231c      	movs	r3, #28
 800110c:	e010      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN8:
			return 0;
 800110e:	2300      	movs	r3, #0
 8001110:	e00e      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN9:
			return 4;
 8001112:	2304      	movs	r3, #4
 8001114:	e00c      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN10:
			return 8;
 8001116:	2308      	movs	r3, #8
 8001118:	e00a      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN11:
			return 12;
 800111a:	230c      	movs	r3, #12
 800111c:	e008      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN12:
			return 16;
 800111e:	2310      	movs	r3, #16
 8001120:	e006      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN13:
			return 20;
 8001122:	2314      	movs	r3, #20
 8001124:	e004      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN14:
			return 24;
 8001126:	2318      	movs	r3, #24
 8001128:	e002      	b.n	8001130 <get_pin_position+0x164>
			break;
		case GPIO_PIN15:
			return 28;
 800112a:	231c      	movs	r3, #28
 800112c:	e000      	b.n	8001130 <get_pin_position+0x164>
			break;
		}


	return -1;
 800112e:	23ff      	movs	r3, #255	; 0xff

}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <MCAL_GPIO_INIT>:


void MCAL_GPIO_INIT(GPIOx_typedef *GPIOx, GPIO_CONFIGURATION *pin_config){
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configregister = NULL;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
     uint16_t val;
	//check if the pin lies in CRL range or CRH range -> CRL[0-7] CRH[8-15]

	configregister =((pin_config->GPIO_PIN_NUMBER) < GPIO_PIN8 ) ? &GPIOx->CRL : &GPIOx->CRH;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d801      	bhi.n	8001158 <MCAL_GPIO_INIT+0x1c>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	e001      	b.n	800115c <MCAL_GPIO_INIT+0x20>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3304      	adds	r3, #4
 800115c:	60bb      	str	r3, [r7, #8]

	//Clear  CNFy[1:0] MODEy[1:0] 4BITS OF THE PIN
	*configregister &= ~( 0xF<< get_pin_position(pin_config->GPIO_PIN_NUMBER) );
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <get_pin_position>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	230f      	movs	r3, #15
 8001170:	4093      	lsls	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	401a      	ands	r2, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	601a      	str	r2, [r3, #0]

	//if the pin is in output mode
	if(pin_config->GPIO_PIN_MODE==GPIO_PUSHPULL_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_OPENDRAIN_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_AFIO_PP_OUTPUT  || pin_config->GPIO_PIN_MODE==GPIO_AFIO_OP_OUTPUT )
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	885b      	ldrh	r3, [r3, #2]
 8001182:	b29b      	uxth	r3, r3
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00e      	beq.n	80011a6 <MCAL_GPIO_INIT+0x6a>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	885b      	ldrh	r3, [r3, #2]
 800118c:	b29b      	uxth	r3, r3
 800118e:	2b05      	cmp	r3, #5
 8001190:	d009      	beq.n	80011a6 <MCAL_GPIO_INIT+0x6a>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	885b      	ldrh	r3, [r3, #2]
 8001196:	b29b      	uxth	r3, r3
 8001198:	2b06      	cmp	r3, #6
 800119a:	d004      	beq.n	80011a6 <MCAL_GPIO_INIT+0x6a>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	885b      	ldrh	r3, [r3, #2]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d110      	bne.n	80011c8 <MCAL_GPIO_INIT+0x8c>
	{
		//set the values for CNF bits and MODEy
		val =(((pin_config->GPIO_PIN_MODE - 4) << 2 | pin_config->GPIO_OUTPUT_SPEED  )) & 0x0f;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	885b      	ldrh	r3, [r3, #2]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3b04      	subs	r3, #4
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	889b      	ldrh	r3, [r3, #4]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	81fb      	strh	r3, [r7, #14]
 80011c6:	e031      	b.n	800122c <MCAL_GPIO_INIT+0xf0>
	}

	//in case if the pin is input
	else
	{
		if(pin_config->GPIO_PIN_MODE == GPIO_FLOATING_INPUT || pin_config->GPIO_PIN_MODE == GPIO_ANALOG)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	885b      	ldrh	r3, [r3, #2]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d004      	beq.n	80011dc <MCAL_GPIO_INIT+0xa0>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	885b      	ldrh	r3, [r3, #2]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d108      	bne.n	80011ee <MCAL_GPIO_INIT+0xb2>
		{

			val =((pin_config->GPIO_PIN_MODE )<< 2 | (0x0)  ) & 0x0f;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	885b      	ldrh	r3, [r3, #2]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	81fb      	strh	r3, [r7, #14]
 80011ec:	e01e      	b.n	800122c <MCAL_GPIO_INIT+0xf0>

		}

		else
		{
				val =((pin_config->GPIO_PIN_MODE)<<2) &0x0f;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	885b      	ldrh	r3, [r3, #2]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	81fb      	strh	r3, [r7, #14]
			if(pin_config->GPIO_PIN_MODE == GPIO_PULLUP_INPUT)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	885b      	ldrh	r3, [r3, #2]
 8001202:	b29b      	uxth	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d108      	bne.n	800121a <MCAL_GPIO_INIT+0xde>
			{
				GPIOx->ODR |= (pin_config->GPIO_PIN_NUMBER);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	e008      	b.n	800122c <MCAL_GPIO_INIT+0xf0>

			}
			else
			{
				GPIOx->ODR &= ~(pin_config->GPIO_PIN_NUMBER);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	43da      	mvns	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	401a      	ands	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	60da      	str	r2, [r3, #12]
		}

	}


	*configregister |=(val << (get_pin_position(pin_config->GPIO_PIN_NUMBER)));
 800122c:	89fc      	ldrh	r4, [r7, #14]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fec9 	bl	8000fcc <get_pin_position>
 800123a:	4603      	mov	r3, r0
 800123c:	fa04 f203 	lsl.w	r2, r4, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	431a      	orrs	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	601a      	str	r2, [r3, #0]

}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}

08001252 <MCAL_GPIO_WRITE_PIN>:
 @param[in]-pin number
 @param[in]-value
 @returnval-none
 note- none
 */
void MCAL_GPIO_WRITE_PIN(GPIOx_typedef *GPIOx, uint16_t pin_number ,uint8_t value){
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	807b      	strh	r3, [r7, #2]
 800125e:	4613      	mov	r3, r2
 8001260:	707b      	strb	r3, [r7, #1]


			if(value == GPIO_PIN_true)
 8001262:	787b      	ldrb	r3, [r7, #1]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d103      	bne.n	8001270 <MCAL_GPIO_WRITE_PIN+0x1e>
			{
				GPIOx->BSRR =(uint32_t)pin_number;
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	611a      	str	r2, [r3, #16]
			else
			{
				GPIOx->BRR =(uint32_t)pin_number;
			}

}
 800126e:	e002      	b.n	8001276 <MCAL_GPIO_WRITE_PIN+0x24>
				GPIOx->BRR =(uint32_t)pin_number;
 8001270:	887a      	ldrh	r2, [r7, #2]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	615a      	str	r2, [r3, #20]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <MCAL_GPIO_WRITE_PORT>:
 @param[in]-GPIO port
 @param[in]-value
 @returnval-none
 note- none
 */
void MCAL_GPIO_WRITE_PORT(GPIOx_typedef *GPIOx , uint8_t value){
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]


       GPIOx->ODR =(uint32_t)value;
 800128c:	78fa      	ldrb	r2, [r7, #3]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60da      	str	r2, [r3, #12]

}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <MCAL_GPIO_READ_PIN>:
 @param[in]-GPIO port
 @param[in]-pin number
 @returnval-pin state
 note- none
 */
uint8_t MCAL_GPIO_READ_PIN(GPIOx_typedef *GPIOx, uint16_t pin_number){
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]


	uint8_t statues;
	if((GPIOx->IDR & pin_number) !=(uint32_t)GPIO_PIN_false)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <MCAL_GPIO_READ_PIN+0x1e>
		statues =GPIO_PIN_true;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <MCAL_GPIO_READ_PIN+0x22>

	else
		statues =GPIO_PIN_false;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

            return statues;
 80012be:	7bfb      	ldrb	r3, [r7, #15]

}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <MCAL_GPIO_WriteGroup>:
		}


}
void MCAL_GPIO_WriteGroup(GPIOx_typedef * GPIOx,uint16_t Value,uint16_t Mask)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
	GPIOx->ODR &= ~(Mask);				// clear the group
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	883a      	ldrh	r2, [r7, #0]
 80012e0:	43d2      	mvns	r2, r2
 80012e2:	401a      	ands	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]
	GPIOx->ODR |= (Value & Mask);		// put the new value
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	8879      	ldrh	r1, [r7, #2]
 80012ee:	883a      	ldrh	r2, [r7, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	b292      	uxth	r2, r2
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60da      	str	r2, [r3, #12]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <MCAL_uart_init>:
 * ===============================================
 */


void MCAL_uart_init(UART_typedef * UARTx, UART_config * config)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]

	Global_UART_Config =config;
 800130e:	4a5b      	ldr	r2, [pc, #364]	; (800147c <MCAL_uart_init+0x178>)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6013      	str	r3, [r2, #0]
	uint32_t fclk ,BRR;

	if (UARTx == UART1) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a5a      	ldr	r2, [pc, #360]	; (8001480 <MCAL_uart_init+0x17c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d109      	bne.n	8001330 <MCAL_uart_init+0x2c>
		RCC_USART1_CLK_EN;
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <MCAL_uart_init+0x180>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a58      	ldr	r2, [pc, #352]	; (8001484 <MCAL_uart_init+0x180>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	6193      	str	r3, [r2, #24]
		Global_UARTx_Cnfg[0] =config;
 8001328:	4a57      	ldr	r2, [pc, #348]	; (8001488 <MCAL_uart_init+0x184>)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01a      	b.n	8001366 <MCAL_uart_init+0x62>

	} else if (UARTx == UART2) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <MCAL_uart_init+0x188>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d109      	bne.n	800134c <MCAL_uart_init+0x48>
		RCC_USART2_CLK_EN;
 8001338:	4b52      	ldr	r3, [pc, #328]	; (8001484 <MCAL_uart_init+0x180>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a51      	ldr	r2, [pc, #324]	; (8001484 <MCAL_uart_init+0x180>)
 800133e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001342:	61d3      	str	r3, [r2, #28]
		Global_UARTx_Cnfg[1] =config;
 8001344:	4a50      	ldr	r2, [pc, #320]	; (8001488 <MCAL_uart_init+0x184>)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	6053      	str	r3, [r2, #4]
 800134a:	e00c      	b.n	8001366 <MCAL_uart_init+0x62>

	}

	else if (UARTx == UART3) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a50      	ldr	r2, [pc, #320]	; (8001490 <MCAL_uart_init+0x18c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d108      	bne.n	8001366 <MCAL_uart_init+0x62>

		RCC_USART3_CLK_EN;
 8001354:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <MCAL_uart_init+0x180>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	4a4a      	ldr	r2, [pc, #296]	; (8001484 <MCAL_uart_init+0x180>)
 800135a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135e:	61d3      	str	r3, [r2, #28]
		Global_UARTx_Cnfg[2] =config;
 8001360:	4a49      	ldr	r2, [pc, #292]	; (8001488 <MCAL_uart_init+0x184>)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	6093      	str	r3, [r2, #8]

	}

//	 Enable the USART by writing the UE bit in USART_CR1 register to 1.
	UARTx->CR1 |= (1 << 13);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60da      	str	r2, [r3, #12]


//configure uart mode TX or RX
	UARTx->CR1 |=config->uart_mode;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60da      	str	r2, [r3, #12]

//Program the M bit in USART_CR1 to define the word length.
	UARTx->CR1 |= config->uart_payload_length;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	7a52      	ldrb	r2, [r2, #9]
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]

//CONFIGURE parity
	UARTx->CR1 |=config->uart_parity;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	7a12      	ldrb	r2, [r2, #8]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]

//Program the number of stop bits in USART_CR2.
	UARTx->CR2 |=config->uart_stopbits;   //try in 1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	7a92      	ldrb	r2, [r2, #10]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]


//configure flow control
	UARTx->CR3 |=config->flow_ctrl; //try in 1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	7b12      	ldrb	r2, [r2, #12]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	615a      	str	r2, [r3, #20]


//Select the desired baud rate using the USART_BRR register

    if(UARTx == UART1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a31      	ldr	r2, [pc, #196]	; (8001480 <MCAL_uart_init+0x17c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d103      	bne.n	80013c8 <MCAL_uart_init+0xc4>

    {
    	fclk = MCAL_RCC_GetPCLK2Freq();
 80013c0:	f7ff fd96 	bl	8000ef0 <MCAL_RCC_GetPCLK2Freq>
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	e002      	b.n	80013ce <MCAL_uart_init+0xca>
    }
    else
    {
    	fclk=MCAL_RCC_GetPCLK1Freq();
 80013c8:	f7ff fd7e 	bl	8000ec8 <MCAL_RCC_GetPCLK1Freq>
 80013cc:	60f8      	str	r0, [r7, #12]
    }

   BRR = UART_BRR_Register(fclk,config->uart_baudrate);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	0119      	lsls	r1, r3, #4
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	009a      	lsls	r2, r3, #2
 80013e6:	441a      	add	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fe:	2064      	movs	r0, #100	; 0x64
 8001400:	fb00 f303 	mul.w	r3, r0, r3
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	4a22      	ldr	r2, [pc, #136]	; (8001494 <MCAL_uart_init+0x190>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	430b      	orrs	r3, r1
 8001416:	60bb      	str	r3, [r7, #8]
   UARTx->BRR =BRR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	609a      	str	r2, [r3, #8]
//configure irq

	if (config->uart_IRQ_enable != uart_irq_NONE) {
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	7adb      	ldrb	r3, [r3, #11]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d026      	beq.n	8001474 <MCAL_uart_init+0x170>
		UARTx->CR1 |= config->uart_IRQ_enable;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	7ad2      	ldrb	r2, [r2, #11]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]

		//NVIC enable
		if (UARTx == UART1) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MCAL_uart_init+0x17c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d106      	bne.n	800144a <MCAL_uart_init+0x146>
			NVIC_USART1_IRQ_ENABLE;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MCAL_uart_init+0x194>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a15      	ldr	r2, [pc, #84]	; (8001498 <MCAL_uart_init+0x194>)
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	6013      	str	r3, [r2, #0]
		} else if (UARTx == UART3) {
			NVIC_USART3_IRQ_ENABLE;
		}
	}

}
 8001448:	e014      	b.n	8001474 <MCAL_uart_init+0x170>
		} else if (UARTx == UART2) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0f      	ldr	r2, [pc, #60]	; (800148c <MCAL_uart_init+0x188>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d106      	bne.n	8001460 <MCAL_uart_init+0x15c>
			NVIC_USART2_IRQ_ENABLE;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MCAL_uart_init+0x194>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <MCAL_uart_init+0x194>)
 8001458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145c:	6013      	str	r3, [r2, #0]
}
 800145e:	e009      	b.n	8001474 <MCAL_uart_init+0x170>
		} else if (UARTx == UART3) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <MCAL_uart_init+0x18c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d105      	bne.n	8001474 <MCAL_uart_init+0x170>
			NVIC_USART3_IRQ_ENABLE;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MCAL_uart_init+0x194>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <MCAL_uart_init+0x194>)
 800146e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000010c 	.word	0x2000010c
 8001480:	40013800 	.word	0x40013800
 8001484:	40021000 	.word	0x40021000
 8001488:	20000110 	.word	0x20000110
 800148c:	40004400 	.word	0x40004400
 8001490:	40004800 	.word	0x40004800
 8001494:	51eb851f 	.word	0x51eb851f
 8001498:	e000e104 	.word	0xe000e104

0800149c <MCAL_GPIO_uart_init>:

	}

}
void MCAL_GPIO_uart_init(UART_typedef * UARTx)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	GPIO_CONFIGURATION gpio_config;


	if(UARTx == UART1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a2b      	ldr	r2, [pc, #172]	; (8001554 <MCAL_GPIO_uart_init+0xb8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d118      	bne.n	80014de <MCAL_GPIO_uart_init+0x42>
	{
	//uart1   pa9 tx , pa10 rx, pa11 cts, pa12 rts

	//tx
	gpio_config.GPIO_PIN_NUMBER = GPIO_PIN9 ;
 80014ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b0:	813b      	strh	r3, [r7, #8]
	gpio_config.GPIO_PIN_MODE = GPIO_AFIO_PP_OUTPUT;
 80014b2:	2306      	movs	r3, #6
 80014b4:	817b      	strh	r3, [r7, #10]
	gpio_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 80014b6:	2301      	movs	r3, #1
 80014b8:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_INIT(GPIOA, &gpio_config);
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	4825      	ldr	r0, [pc, #148]	; (8001558 <MCAL_GPIO_uart_init+0xbc>)
 80014c2:	f7ff fe3b 	bl	800113c <MCAL_GPIO_INIT>


	//rx
	gpio_config.GPIO_PIN_NUMBER = GPIO_PIN10 ;
 80014c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ca:	813b      	strh	r3, [r7, #8]
	gpio_config.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 80014cc:	2301      	movs	r3, #1
 80014ce:	817b      	strh	r3, [r7, #10]
	MCAL_GPIO_INIT(GPIOA, &gpio_config);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	4820      	ldr	r0, [pc, #128]	; (8001558 <MCAL_GPIO_uart_init+0xbc>)
 80014d8:	f7ff fe30 	bl	800113c <MCAL_GPIO_INIT>


	}


}
 80014dc:	e036      	b.n	800154c <MCAL_GPIO_uart_init+0xb0>
	else if (UARTx == UART2) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <MCAL_GPIO_uart_init+0xc0>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d116      	bne.n	8001514 <MCAL_GPIO_uart_init+0x78>
		gpio_config.GPIO_PIN_NUMBER = GPIO_PIN2;
 80014e6:	2304      	movs	r3, #4
 80014e8:	813b      	strh	r3, [r7, #8]
		gpio_config.GPIO_PIN_MODE = GPIO_AFIO_PP_OUTPUT;
 80014ea:	2306      	movs	r3, #6
 80014ec:	817b      	strh	r3, [r7, #10]
		gpio_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 80014ee:	2301      	movs	r3, #1
 80014f0:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOA, &gpio_config);
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4619      	mov	r1, r3
 80014f8:	4817      	ldr	r0, [pc, #92]	; (8001558 <MCAL_GPIO_uart_init+0xbc>)
 80014fa:	f7ff fe1f 	bl	800113c <MCAL_GPIO_INIT>
		gpio_config.GPIO_PIN_NUMBER = GPIO_PIN3;
 80014fe:	2308      	movs	r3, #8
 8001500:	813b      	strh	r3, [r7, #8]
		gpio_config.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 8001502:	2301      	movs	r3, #1
 8001504:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_INIT(GPIOA, &gpio_config);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4619      	mov	r1, r3
 800150c:	4812      	ldr	r0, [pc, #72]	; (8001558 <MCAL_GPIO_uart_init+0xbc>)
 800150e:	f7ff fe15 	bl	800113c <MCAL_GPIO_INIT>
}
 8001512:	e01b      	b.n	800154c <MCAL_GPIO_uart_init+0xb0>
	else if (UARTx == UART3) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <MCAL_GPIO_uart_init+0xc4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d117      	bne.n	800154c <MCAL_GPIO_uart_init+0xb0>
		gpio_config.GPIO_PIN_NUMBER = GPIO_PIN10;
 800151c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001520:	813b      	strh	r3, [r7, #8]
		gpio_config.GPIO_PIN_MODE = GPIO_AFIO_PP_OUTPUT;
 8001522:	2306      	movs	r3, #6
 8001524:	817b      	strh	r3, [r7, #10]
		gpio_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8001526:	2301      	movs	r3, #1
 8001528:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOB, &gpio_config);
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <MCAL_GPIO_uart_init+0xc8>)
 8001532:	f7ff fe03 	bl	800113c <MCAL_GPIO_INIT>
		gpio_config.GPIO_PIN_NUMBER = GPIO_PIN11;
 8001536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800153a:	813b      	strh	r3, [r7, #8]
		gpio_config.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 800153c:	2301      	movs	r3, #1
 800153e:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_INIT(GPIOB, &gpio_config);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4619      	mov	r1, r3
 8001546:	4807      	ldr	r0, [pc, #28]	; (8001564 <MCAL_GPIO_uart_init+0xc8>)
 8001548:	f7ff fdf8 	bl	800113c <MCAL_GPIO_INIT>
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40013800 	.word	0x40013800
 8001558:	40010800 	.word	0x40010800
 800155c:	40004400 	.word	0x40004400
 8001560:	40004800 	.word	0x40004800
 8001564:	40010c00 	.word	0x40010c00

08001568 <MCAL_uart_recieve>:
	}


}
void MCAL_uart_recieve(UART_typedef * UARTx,uint16_t *RX_buffer, Polling_mechanism polling)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	4613      	mov	r3, r2
 8001574:	71fb      	strb	r3, [r7, #7]


	if(polling == polling_enable)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d106      	bne.n	800158a <MCAL_uart_recieve+0x22>
		{
			while(!((UARTx->SR >>5)&1));
 800157c:	bf00      	nop
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f9      	beq.n	800157e <MCAL_uart_recieve+0x16>
		*((uint16_t*)RX_buffer) = UARTx->DR & (uint8_t)(0xff);

	}
	}

	else if(Global_UART_Config->uart_payload_length == uart_payload_8bit)
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MCAL_uart_recieve+0x60>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	7a5b      	ldrb	r3, [r3, #9]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d114      	bne.n	80015be <MCAL_uart_recieve+0x56>
		{

		if(Global_UART_Config->uart_parity == uart_parity_none)
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MCAL_uart_recieve+0x60>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	7a1b      	ldrb	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d107      	bne.n	80015ae <MCAL_uart_recieve+0x46>

			{
				*((uint16_t*)RX_buffer) = (UARTx->DR & (uint8_t)(0xff));
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	801a      	strh	r2, [r3, #0]


	}


}
 80015ac:	e007      	b.n	80015be <MCAL_uart_recieve+0x56>
			*((uint16_t*)RX_buffer) = (UARTx->DR & (uint8_t)(0x7f));
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	801a      	strh	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	2000010c 	.word	0x2000010c

080015cc <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	/* USART1 global interrupt */
	Global_UART_Config->P_IRQ_callback();
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <USART1_IRQHandler+0x10>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	4798      	blx	r3
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000010c 	.word	0x2000010c

080015e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	/* USART2 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <USART2_IRQHandler+0x10>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	4798      	blx	r3
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000010c 	.word	0x2000010c

080015f4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	/* USART3 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <USART3_IRQHandler+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4798      	blx	r3
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000010c 	.word	0x2000010c

08001608 <main>:
#endif

#include "app.h"

int main(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	MCAL_init();
 800160c:	f7fe fdb0 	bl	8000170 <MCAL_init>
	HAL_init();
 8001610:	f7fe fdc8 	bl	80001a4 <HAL_init>
	parking_init();
 8001614:	f7fe fdde 	bl	80001d4 <parking_init>
	parking_entry();
 8001618:	f7fe fe68 	bl	80002ec <parking_entry>
	parking_exit();
 800161c:	f7fe ff2e 	bl	800047c <parking_exit>
 8001620:	2300      	movs	r3, #0


}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f000 f866 	bl	8001728 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20002800 	.word	0x20002800
 8001688:	00000400 	.word	0x00000400
 800168c:	2000011c 	.word	0x2000011c
 8001690:	20000268 	.word	0x20000268

08001694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001698:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	; (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	; (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016c2:	f000 f837 	bl	8001734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7ff ff9f 	bl	8001608 <main>

080016ca <LoopForever>:

LoopForever:
  b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80016d8:	08002150 	.word	0x08002150
  ldr r2, =_sbss
 80016dc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80016e0:	20000268 	.word	0x20000268

080016e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_2_IRQHandler>
	...

080016e8 <siprintf>:
 80016e8:	b40e      	push	{r1, r2, r3}
 80016ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016ee:	b500      	push	{lr}
 80016f0:	b09c      	sub	sp, #112	; 0x70
 80016f2:	ab1d      	add	r3, sp, #116	; 0x74
 80016f4:	9002      	str	r0, [sp, #8]
 80016f6:	9006      	str	r0, [sp, #24]
 80016f8:	9107      	str	r1, [sp, #28]
 80016fa:	9104      	str	r1, [sp, #16]
 80016fc:	4808      	ldr	r0, [pc, #32]	; (8001720 <siprintf+0x38>)
 80016fe:	4909      	ldr	r1, [pc, #36]	; (8001724 <siprintf+0x3c>)
 8001700:	f853 2b04 	ldr.w	r2, [r3], #4
 8001704:	9105      	str	r1, [sp, #20]
 8001706:	6800      	ldr	r0, [r0, #0]
 8001708:	a902      	add	r1, sp, #8
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f000 f986 	bl	8001a1c <_svfiprintf_r>
 8001710:	2200      	movs	r2, #0
 8001712:	9b02      	ldr	r3, [sp, #8]
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	b01c      	add	sp, #112	; 0x70
 8001718:	f85d eb04 	ldr.w	lr, [sp], #4
 800171c:	b003      	add	sp, #12
 800171e:	4770      	bx	lr
 8001720:	20000098 	.word	0x20000098
 8001724:	ffff0208 	.word	0xffff0208

08001728 <__errno>:
 8001728:	4b01      	ldr	r3, [pc, #4]	; (8001730 <__errno+0x8>)
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000098 	.word	0x20000098

08001734 <__libc_init_array>:
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	2600      	movs	r6, #0
 8001738:	4d0c      	ldr	r5, [pc, #48]	; (800176c <__libc_init_array+0x38>)
 800173a:	4c0d      	ldr	r4, [pc, #52]	; (8001770 <__libc_init_array+0x3c>)
 800173c:	1b64      	subs	r4, r4, r5
 800173e:	10a4      	asrs	r4, r4, #2
 8001740:	42a6      	cmp	r6, r4
 8001742:	d109      	bne.n	8001758 <__libc_init_array+0x24>
 8001744:	f000 fc7a 	bl	800203c <_init>
 8001748:	2600      	movs	r6, #0
 800174a:	4d0a      	ldr	r5, [pc, #40]	; (8001774 <__libc_init_array+0x40>)
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <__libc_init_array+0x44>)
 800174e:	1b64      	subs	r4, r4, r5
 8001750:	10a4      	asrs	r4, r4, #2
 8001752:	42a6      	cmp	r6, r4
 8001754:	d105      	bne.n	8001762 <__libc_init_array+0x2e>
 8001756:	bd70      	pop	{r4, r5, r6, pc}
 8001758:	f855 3b04 	ldr.w	r3, [r5], #4
 800175c:	4798      	blx	r3
 800175e:	3601      	adds	r6, #1
 8001760:	e7ee      	b.n	8001740 <__libc_init_array+0xc>
 8001762:	f855 3b04 	ldr.w	r3, [r5], #4
 8001766:	4798      	blx	r3
 8001768:	3601      	adds	r6, #1
 800176a:	e7f2      	b.n	8001752 <__libc_init_array+0x1e>
 800176c:	08002148 	.word	0x08002148
 8001770:	08002148 	.word	0x08002148
 8001774:	08002148 	.word	0x08002148
 8001778:	0800214c 	.word	0x0800214c

0800177c <__retarget_lock_acquire_recursive>:
 800177c:	4770      	bx	lr

0800177e <__retarget_lock_release_recursive>:
 800177e:	4770      	bx	lr

08001780 <_free_r>:
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	4605      	mov	r5, r0
 8001784:	2900      	cmp	r1, #0
 8001786:	d040      	beq.n	800180a <_free_r+0x8a>
 8001788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800178c:	1f0c      	subs	r4, r1, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	bfb8      	it	lt
 8001792:	18e4      	addlt	r4, r4, r3
 8001794:	f000 f8dc 	bl	8001950 <__malloc_lock>
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <_free_r+0x8c>)
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	b933      	cbnz	r3, 80017ac <_free_r+0x2c>
 800179e:	6063      	str	r3, [r4, #4]
 80017a0:	6014      	str	r4, [r2, #0]
 80017a2:	4628      	mov	r0, r5
 80017a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017a8:	f000 b8d8 	b.w	800195c <__malloc_unlock>
 80017ac:	42a3      	cmp	r3, r4
 80017ae:	d908      	bls.n	80017c2 <_free_r+0x42>
 80017b0:	6820      	ldr	r0, [r4, #0]
 80017b2:	1821      	adds	r1, r4, r0
 80017b4:	428b      	cmp	r3, r1
 80017b6:	bf01      	itttt	eq
 80017b8:	6819      	ldreq	r1, [r3, #0]
 80017ba:	685b      	ldreq	r3, [r3, #4]
 80017bc:	1809      	addeq	r1, r1, r0
 80017be:	6021      	streq	r1, [r4, #0]
 80017c0:	e7ed      	b.n	800179e <_free_r+0x1e>
 80017c2:	461a      	mov	r2, r3
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	b10b      	cbz	r3, 80017cc <_free_r+0x4c>
 80017c8:	42a3      	cmp	r3, r4
 80017ca:	d9fa      	bls.n	80017c2 <_free_r+0x42>
 80017cc:	6811      	ldr	r1, [r2, #0]
 80017ce:	1850      	adds	r0, r2, r1
 80017d0:	42a0      	cmp	r0, r4
 80017d2:	d10b      	bne.n	80017ec <_free_r+0x6c>
 80017d4:	6820      	ldr	r0, [r4, #0]
 80017d6:	4401      	add	r1, r0
 80017d8:	1850      	adds	r0, r2, r1
 80017da:	4283      	cmp	r3, r0
 80017dc:	6011      	str	r1, [r2, #0]
 80017de:	d1e0      	bne.n	80017a2 <_free_r+0x22>
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4408      	add	r0, r1
 80017e6:	6010      	str	r0, [r2, #0]
 80017e8:	6053      	str	r3, [r2, #4]
 80017ea:	e7da      	b.n	80017a2 <_free_r+0x22>
 80017ec:	d902      	bls.n	80017f4 <_free_r+0x74>
 80017ee:	230c      	movs	r3, #12
 80017f0:	602b      	str	r3, [r5, #0]
 80017f2:	e7d6      	b.n	80017a2 <_free_r+0x22>
 80017f4:	6820      	ldr	r0, [r4, #0]
 80017f6:	1821      	adds	r1, r4, r0
 80017f8:	428b      	cmp	r3, r1
 80017fa:	bf01      	itttt	eq
 80017fc:	6819      	ldreq	r1, [r3, #0]
 80017fe:	685b      	ldreq	r3, [r3, #4]
 8001800:	1809      	addeq	r1, r1, r0
 8001802:	6021      	streq	r1, [r4, #0]
 8001804:	6063      	str	r3, [r4, #4]
 8001806:	6054      	str	r4, [r2, #4]
 8001808:	e7cb      	b.n	80017a2 <_free_r+0x22>
 800180a:	bd38      	pop	{r3, r4, r5, pc}
 800180c:	20000260 	.word	0x20000260

08001810 <sbrk_aligned>:
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	4e0e      	ldr	r6, [pc, #56]	; (800184c <sbrk_aligned+0x3c>)
 8001814:	460c      	mov	r4, r1
 8001816:	6831      	ldr	r1, [r6, #0]
 8001818:	4605      	mov	r5, r0
 800181a:	b911      	cbnz	r1, 8001822 <sbrk_aligned+0x12>
 800181c:	f000 fbaa 	bl	8001f74 <_sbrk_r>
 8001820:	6030      	str	r0, [r6, #0]
 8001822:	4621      	mov	r1, r4
 8001824:	4628      	mov	r0, r5
 8001826:	f000 fba5 	bl	8001f74 <_sbrk_r>
 800182a:	1c43      	adds	r3, r0, #1
 800182c:	d00a      	beq.n	8001844 <sbrk_aligned+0x34>
 800182e:	1cc4      	adds	r4, r0, #3
 8001830:	f024 0403 	bic.w	r4, r4, #3
 8001834:	42a0      	cmp	r0, r4
 8001836:	d007      	beq.n	8001848 <sbrk_aligned+0x38>
 8001838:	1a21      	subs	r1, r4, r0
 800183a:	4628      	mov	r0, r5
 800183c:	f000 fb9a 	bl	8001f74 <_sbrk_r>
 8001840:	3001      	adds	r0, #1
 8001842:	d101      	bne.n	8001848 <sbrk_aligned+0x38>
 8001844:	f04f 34ff 	mov.w	r4, #4294967295
 8001848:	4620      	mov	r0, r4
 800184a:	bd70      	pop	{r4, r5, r6, pc}
 800184c:	20000264 	.word	0x20000264

08001850 <_malloc_r>:
 8001850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001854:	1ccd      	adds	r5, r1, #3
 8001856:	f025 0503 	bic.w	r5, r5, #3
 800185a:	3508      	adds	r5, #8
 800185c:	2d0c      	cmp	r5, #12
 800185e:	bf38      	it	cc
 8001860:	250c      	movcc	r5, #12
 8001862:	2d00      	cmp	r5, #0
 8001864:	4607      	mov	r7, r0
 8001866:	db01      	blt.n	800186c <_malloc_r+0x1c>
 8001868:	42a9      	cmp	r1, r5
 800186a:	d905      	bls.n	8001878 <_malloc_r+0x28>
 800186c:	230c      	movs	r3, #12
 800186e:	2600      	movs	r6, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	4630      	mov	r0, r6
 8001874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001878:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800194c <_malloc_r+0xfc>
 800187c:	f000 f868 	bl	8001950 <__malloc_lock>
 8001880:	f8d8 3000 	ldr.w	r3, [r8]
 8001884:	461c      	mov	r4, r3
 8001886:	bb5c      	cbnz	r4, 80018e0 <_malloc_r+0x90>
 8001888:	4629      	mov	r1, r5
 800188a:	4638      	mov	r0, r7
 800188c:	f7ff ffc0 	bl	8001810 <sbrk_aligned>
 8001890:	1c43      	adds	r3, r0, #1
 8001892:	4604      	mov	r4, r0
 8001894:	d155      	bne.n	8001942 <_malloc_r+0xf2>
 8001896:	f8d8 4000 	ldr.w	r4, [r8]
 800189a:	4626      	mov	r6, r4
 800189c:	2e00      	cmp	r6, #0
 800189e:	d145      	bne.n	800192c <_malloc_r+0xdc>
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d048      	beq.n	8001936 <_malloc_r+0xe6>
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	4631      	mov	r1, r6
 80018a8:	4638      	mov	r0, r7
 80018aa:	eb04 0903 	add.w	r9, r4, r3
 80018ae:	f000 fb61 	bl	8001f74 <_sbrk_r>
 80018b2:	4581      	cmp	r9, r0
 80018b4:	d13f      	bne.n	8001936 <_malloc_r+0xe6>
 80018b6:	6821      	ldr	r1, [r4, #0]
 80018b8:	4638      	mov	r0, r7
 80018ba:	1a6d      	subs	r5, r5, r1
 80018bc:	4629      	mov	r1, r5
 80018be:	f7ff ffa7 	bl	8001810 <sbrk_aligned>
 80018c2:	3001      	adds	r0, #1
 80018c4:	d037      	beq.n	8001936 <_malloc_r+0xe6>
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	442b      	add	r3, r5
 80018ca:	6023      	str	r3, [r4, #0]
 80018cc:	f8d8 3000 	ldr.w	r3, [r8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d038      	beq.n	8001946 <_malloc_r+0xf6>
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	42a2      	cmp	r2, r4
 80018d8:	d12b      	bne.n	8001932 <_malloc_r+0xe2>
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	e00f      	b.n	8001900 <_malloc_r+0xb0>
 80018e0:	6822      	ldr	r2, [r4, #0]
 80018e2:	1b52      	subs	r2, r2, r5
 80018e4:	d41f      	bmi.n	8001926 <_malloc_r+0xd6>
 80018e6:	2a0b      	cmp	r2, #11
 80018e8:	d917      	bls.n	800191a <_malloc_r+0xca>
 80018ea:	1961      	adds	r1, r4, r5
 80018ec:	42a3      	cmp	r3, r4
 80018ee:	6025      	str	r5, [r4, #0]
 80018f0:	bf18      	it	ne
 80018f2:	6059      	strne	r1, [r3, #4]
 80018f4:	6863      	ldr	r3, [r4, #4]
 80018f6:	bf08      	it	eq
 80018f8:	f8c8 1000 	streq.w	r1, [r8]
 80018fc:	5162      	str	r2, [r4, r5]
 80018fe:	604b      	str	r3, [r1, #4]
 8001900:	4638      	mov	r0, r7
 8001902:	f104 060b 	add.w	r6, r4, #11
 8001906:	f000 f829 	bl	800195c <__malloc_unlock>
 800190a:	f026 0607 	bic.w	r6, r6, #7
 800190e:	1d23      	adds	r3, r4, #4
 8001910:	1af2      	subs	r2, r6, r3
 8001912:	d0ae      	beq.n	8001872 <_malloc_r+0x22>
 8001914:	1b9b      	subs	r3, r3, r6
 8001916:	50a3      	str	r3, [r4, r2]
 8001918:	e7ab      	b.n	8001872 <_malloc_r+0x22>
 800191a:	42a3      	cmp	r3, r4
 800191c:	6862      	ldr	r2, [r4, #4]
 800191e:	d1dd      	bne.n	80018dc <_malloc_r+0x8c>
 8001920:	f8c8 2000 	str.w	r2, [r8]
 8001924:	e7ec      	b.n	8001900 <_malloc_r+0xb0>
 8001926:	4623      	mov	r3, r4
 8001928:	6864      	ldr	r4, [r4, #4]
 800192a:	e7ac      	b.n	8001886 <_malloc_r+0x36>
 800192c:	4634      	mov	r4, r6
 800192e:	6876      	ldr	r6, [r6, #4]
 8001930:	e7b4      	b.n	800189c <_malloc_r+0x4c>
 8001932:	4613      	mov	r3, r2
 8001934:	e7cc      	b.n	80018d0 <_malloc_r+0x80>
 8001936:	230c      	movs	r3, #12
 8001938:	4638      	mov	r0, r7
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	f000 f80e 	bl	800195c <__malloc_unlock>
 8001940:	e797      	b.n	8001872 <_malloc_r+0x22>
 8001942:	6025      	str	r5, [r4, #0]
 8001944:	e7dc      	b.n	8001900 <_malloc_r+0xb0>
 8001946:	605b      	str	r3, [r3, #4]
 8001948:	deff      	udf	#255	; 0xff
 800194a:	bf00      	nop
 800194c:	20000260 	.word	0x20000260

08001950 <__malloc_lock>:
 8001950:	4801      	ldr	r0, [pc, #4]	; (8001958 <__malloc_lock+0x8>)
 8001952:	f7ff bf13 	b.w	800177c <__retarget_lock_acquire_recursive>
 8001956:	bf00      	nop
 8001958:	2000025c 	.word	0x2000025c

0800195c <__malloc_unlock>:
 800195c:	4801      	ldr	r0, [pc, #4]	; (8001964 <__malloc_unlock+0x8>)
 800195e:	f7ff bf0e 	b.w	800177e <__retarget_lock_release_recursive>
 8001962:	bf00      	nop
 8001964:	2000025c 	.word	0x2000025c

08001968 <__ssputs_r>:
 8001968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800196c:	461f      	mov	r7, r3
 800196e:	688e      	ldr	r6, [r1, #8]
 8001970:	4682      	mov	sl, r0
 8001972:	42be      	cmp	r6, r7
 8001974:	460c      	mov	r4, r1
 8001976:	4690      	mov	r8, r2
 8001978:	680b      	ldr	r3, [r1, #0]
 800197a:	d82c      	bhi.n	80019d6 <__ssputs_r+0x6e>
 800197c:	898a      	ldrh	r2, [r1, #12]
 800197e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001982:	d026      	beq.n	80019d2 <__ssputs_r+0x6a>
 8001984:	6965      	ldr	r5, [r4, #20]
 8001986:	6909      	ldr	r1, [r1, #16]
 8001988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800198c:	eba3 0901 	sub.w	r9, r3, r1
 8001990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001994:	1c7b      	adds	r3, r7, #1
 8001996:	444b      	add	r3, r9
 8001998:	106d      	asrs	r5, r5, #1
 800199a:	429d      	cmp	r5, r3
 800199c:	bf38      	it	cc
 800199e:	461d      	movcc	r5, r3
 80019a0:	0553      	lsls	r3, r2, #21
 80019a2:	d527      	bpl.n	80019f4 <__ssputs_r+0x8c>
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7ff ff53 	bl	8001850 <_malloc_r>
 80019aa:	4606      	mov	r6, r0
 80019ac:	b360      	cbz	r0, 8001a08 <__ssputs_r+0xa0>
 80019ae:	464a      	mov	r2, r9
 80019b0:	6921      	ldr	r1, [r4, #16]
 80019b2:	f000 fafd 	bl	8001fb0 <memcpy>
 80019b6:	89a3      	ldrh	r3, [r4, #12]
 80019b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80019bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c0:	81a3      	strh	r3, [r4, #12]
 80019c2:	6126      	str	r6, [r4, #16]
 80019c4:	444e      	add	r6, r9
 80019c6:	6026      	str	r6, [r4, #0]
 80019c8:	463e      	mov	r6, r7
 80019ca:	6165      	str	r5, [r4, #20]
 80019cc:	eba5 0509 	sub.w	r5, r5, r9
 80019d0:	60a5      	str	r5, [r4, #8]
 80019d2:	42be      	cmp	r6, r7
 80019d4:	d900      	bls.n	80019d8 <__ssputs_r+0x70>
 80019d6:	463e      	mov	r6, r7
 80019d8:	4632      	mov	r2, r6
 80019da:	4641      	mov	r1, r8
 80019dc:	6820      	ldr	r0, [r4, #0]
 80019de:	f000 faaf 	bl	8001f40 <memmove>
 80019e2:	2000      	movs	r0, #0
 80019e4:	68a3      	ldr	r3, [r4, #8]
 80019e6:	1b9b      	subs	r3, r3, r6
 80019e8:	60a3      	str	r3, [r4, #8]
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	4433      	add	r3, r6
 80019ee:	6023      	str	r3, [r4, #0]
 80019f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019f4:	462a      	mov	r2, r5
 80019f6:	f000 fae9 	bl	8001fcc <_realloc_r>
 80019fa:	4606      	mov	r6, r0
 80019fc:	2800      	cmp	r0, #0
 80019fe:	d1e0      	bne.n	80019c2 <__ssputs_r+0x5a>
 8001a00:	4650      	mov	r0, sl
 8001a02:	6921      	ldr	r1, [r4, #16]
 8001a04:	f7ff febc 	bl	8001780 <_free_r>
 8001a08:	230c      	movs	r3, #12
 8001a0a:	f8ca 3000 	str.w	r3, [sl]
 8001a0e:	89a3      	ldrh	r3, [r4, #12]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a18:	81a3      	strh	r3, [r4, #12]
 8001a1a:	e7e9      	b.n	80019f0 <__ssputs_r+0x88>

08001a1c <_svfiprintf_r>:
 8001a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a20:	4698      	mov	r8, r3
 8001a22:	898b      	ldrh	r3, [r1, #12]
 8001a24:	4607      	mov	r7, r0
 8001a26:	061b      	lsls	r3, r3, #24
 8001a28:	460d      	mov	r5, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	b09d      	sub	sp, #116	; 0x74
 8001a2e:	d50e      	bpl.n	8001a4e <_svfiprintf_r+0x32>
 8001a30:	690b      	ldr	r3, [r1, #16]
 8001a32:	b963      	cbnz	r3, 8001a4e <_svfiprintf_r+0x32>
 8001a34:	2140      	movs	r1, #64	; 0x40
 8001a36:	f7ff ff0b 	bl	8001850 <_malloc_r>
 8001a3a:	6028      	str	r0, [r5, #0]
 8001a3c:	6128      	str	r0, [r5, #16]
 8001a3e:	b920      	cbnz	r0, 8001a4a <_svfiprintf_r+0x2e>
 8001a40:	230c      	movs	r3, #12
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	e0d0      	b.n	8001bec <_svfiprintf_r+0x1d0>
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	616b      	str	r3, [r5, #20]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9309      	str	r3, [sp, #36]	; 0x24
 8001a52:	2320      	movs	r3, #32
 8001a54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a58:	2330      	movs	r3, #48	; 0x30
 8001a5a:	f04f 0901 	mov.w	r9, #1
 8001a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a62:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001c04 <_svfiprintf_r+0x1e8>
 8001a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	469a      	mov	sl, r3
 8001a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a72:	b10a      	cbz	r2, 8001a78 <_svfiprintf_r+0x5c>
 8001a74:	2a25      	cmp	r2, #37	; 0x25
 8001a76:	d1f9      	bne.n	8001a6c <_svfiprintf_r+0x50>
 8001a78:	ebba 0b04 	subs.w	fp, sl, r4
 8001a7c:	d00b      	beq.n	8001a96 <_svfiprintf_r+0x7a>
 8001a7e:	465b      	mov	r3, fp
 8001a80:	4622      	mov	r2, r4
 8001a82:	4629      	mov	r1, r5
 8001a84:	4638      	mov	r0, r7
 8001a86:	f7ff ff6f 	bl	8001968 <__ssputs_r>
 8001a8a:	3001      	adds	r0, #1
 8001a8c:	f000 80a9 	beq.w	8001be2 <_svfiprintf_r+0x1c6>
 8001a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a92:	445a      	add	r2, fp
 8001a94:	9209      	str	r2, [sp, #36]	; 0x24
 8001a96:	f89a 3000 	ldrb.w	r3, [sl]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80a1 	beq.w	8001be2 <_svfiprintf_r+0x1c6>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001aaa:	f10a 0a01 	add.w	sl, sl, #1
 8001aae:	9304      	str	r3, [sp, #16]
 8001ab0:	9307      	str	r3, [sp, #28]
 8001ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8001ab8:	4654      	mov	r4, sl
 8001aba:	2205      	movs	r2, #5
 8001abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ac0:	4850      	ldr	r0, [pc, #320]	; (8001c04 <_svfiprintf_r+0x1e8>)
 8001ac2:	f000 fa67 	bl	8001f94 <memchr>
 8001ac6:	9a04      	ldr	r2, [sp, #16]
 8001ac8:	b9d8      	cbnz	r0, 8001b02 <_svfiprintf_r+0xe6>
 8001aca:	06d0      	lsls	r0, r2, #27
 8001acc:	bf44      	itt	mi
 8001ace:	2320      	movmi	r3, #32
 8001ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ad4:	0711      	lsls	r1, r2, #28
 8001ad6:	bf44      	itt	mi
 8001ad8:	232b      	movmi	r3, #43	; 0x2b
 8001ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ade:	f89a 3000 	ldrb.w	r3, [sl]
 8001ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ae4:	d015      	beq.n	8001b12 <_svfiprintf_r+0xf6>
 8001ae6:	4654      	mov	r4, sl
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f04f 0c0a 	mov.w	ip, #10
 8001aee:	9a07      	ldr	r2, [sp, #28]
 8001af0:	4621      	mov	r1, r4
 8001af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001af6:	3b30      	subs	r3, #48	; 0x30
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d94d      	bls.n	8001b98 <_svfiprintf_r+0x17c>
 8001afc:	b1b0      	cbz	r0, 8001b2c <_svfiprintf_r+0x110>
 8001afe:	9207      	str	r2, [sp, #28]
 8001b00:	e014      	b.n	8001b2c <_svfiprintf_r+0x110>
 8001b02:	eba0 0308 	sub.w	r3, r0, r8
 8001b06:	fa09 f303 	lsl.w	r3, r9, r3
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	46a2      	mov	sl, r4
 8001b0e:	9304      	str	r3, [sp, #16]
 8001b10:	e7d2      	b.n	8001ab8 <_svfiprintf_r+0x9c>
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	1d19      	adds	r1, r3, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	9103      	str	r1, [sp, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bfbb      	ittet	lt
 8001b1e:	425b      	neglt	r3, r3
 8001b20:	f042 0202 	orrlt.w	r2, r2, #2
 8001b24:	9307      	strge	r3, [sp, #28]
 8001b26:	9307      	strlt	r3, [sp, #28]
 8001b28:	bfb8      	it	lt
 8001b2a:	9204      	strlt	r2, [sp, #16]
 8001b2c:	7823      	ldrb	r3, [r4, #0]
 8001b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8001b30:	d10c      	bne.n	8001b4c <_svfiprintf_r+0x130>
 8001b32:	7863      	ldrb	r3, [r4, #1]
 8001b34:	2b2a      	cmp	r3, #42	; 0x2a
 8001b36:	d134      	bne.n	8001ba2 <_svfiprintf_r+0x186>
 8001b38:	9b03      	ldr	r3, [sp, #12]
 8001b3a:	3402      	adds	r4, #2
 8001b3c:	1d1a      	adds	r2, r3, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	9203      	str	r2, [sp, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bfb8      	it	lt
 8001b46:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b4a:	9305      	str	r3, [sp, #20]
 8001b4c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001c08 <_svfiprintf_r+0x1ec>
 8001b50:	2203      	movs	r2, #3
 8001b52:	4650      	mov	r0, sl
 8001b54:	7821      	ldrb	r1, [r4, #0]
 8001b56:	f000 fa1d 	bl	8001f94 <memchr>
 8001b5a:	b138      	cbz	r0, 8001b6c <_svfiprintf_r+0x150>
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	9b04      	ldr	r3, [sp, #16]
 8001b60:	eba0 000a 	sub.w	r0, r0, sl
 8001b64:	4082      	lsls	r2, r0
 8001b66:	4313      	orrs	r3, r2
 8001b68:	3401      	adds	r4, #1
 8001b6a:	9304      	str	r3, [sp, #16]
 8001b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b70:	2206      	movs	r2, #6
 8001b72:	4826      	ldr	r0, [pc, #152]	; (8001c0c <_svfiprintf_r+0x1f0>)
 8001b74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b78:	f000 fa0c 	bl	8001f94 <memchr>
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d038      	beq.n	8001bf2 <_svfiprintf_r+0x1d6>
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <_svfiprintf_r+0x1f4>)
 8001b82:	bb1b      	cbnz	r3, 8001bcc <_svfiprintf_r+0x1b0>
 8001b84:	9b03      	ldr	r3, [sp, #12]
 8001b86:	3307      	adds	r3, #7
 8001b88:	f023 0307 	bic.w	r3, r3, #7
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	9303      	str	r3, [sp, #12]
 8001b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b92:	4433      	add	r3, r6
 8001b94:	9309      	str	r3, [sp, #36]	; 0x24
 8001b96:	e768      	b.n	8001a6a <_svfiprintf_r+0x4e>
 8001b98:	460c      	mov	r4, r1
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ba0:	e7a6      	b.n	8001af0 <_svfiprintf_r+0xd4>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f04f 0c0a 	mov.w	ip, #10
 8001ba8:	4619      	mov	r1, r3
 8001baa:	3401      	adds	r4, #1
 8001bac:	9305      	str	r3, [sp, #20]
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bb4:	3a30      	subs	r2, #48	; 0x30
 8001bb6:	2a09      	cmp	r2, #9
 8001bb8:	d903      	bls.n	8001bc2 <_svfiprintf_r+0x1a6>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0c6      	beq.n	8001b4c <_svfiprintf_r+0x130>
 8001bbe:	9105      	str	r1, [sp, #20]
 8001bc0:	e7c4      	b.n	8001b4c <_svfiprintf_r+0x130>
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bca:	e7f0      	b.n	8001bae <_svfiprintf_r+0x192>
 8001bcc:	ab03      	add	r3, sp, #12
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	462a      	mov	r2, r5
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <_svfiprintf_r+0x1f8>)
 8001bd6:	a904      	add	r1, sp, #16
 8001bd8:	f3af 8000 	nop.w
 8001bdc:	1c42      	adds	r2, r0, #1
 8001bde:	4606      	mov	r6, r0
 8001be0:	d1d6      	bne.n	8001b90 <_svfiprintf_r+0x174>
 8001be2:	89ab      	ldrh	r3, [r5, #12]
 8001be4:	065b      	lsls	r3, r3, #25
 8001be6:	f53f af2d 	bmi.w	8001a44 <_svfiprintf_r+0x28>
 8001bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bec:	b01d      	add	sp, #116	; 0x74
 8001bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bf2:	ab03      	add	r3, sp, #12
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	462a      	mov	r2, r5
 8001bf8:	4638      	mov	r0, r7
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <_svfiprintf_r+0x1f8>)
 8001bfc:	a904      	add	r1, sp, #16
 8001bfe:	f000 f87d 	bl	8001cfc <_printf_i>
 8001c02:	e7eb      	b.n	8001bdc <_svfiprintf_r+0x1c0>
 8001c04:	08002112 	.word	0x08002112
 8001c08:	08002118 	.word	0x08002118
 8001c0c:	0800211c 	.word	0x0800211c
 8001c10:	00000000 	.word	0x00000000
 8001c14:	08001969 	.word	0x08001969

08001c18 <_printf_common>:
 8001c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c1c:	4616      	mov	r6, r2
 8001c1e:	4699      	mov	r9, r3
 8001c20:	688a      	ldr	r2, [r1, #8]
 8001c22:	690b      	ldr	r3, [r1, #16]
 8001c24:	4607      	mov	r7, r0
 8001c26:	4293      	cmp	r3, r2
 8001c28:	bfb8      	it	lt
 8001c2a:	4613      	movlt	r3, r2
 8001c2c:	6033      	str	r3, [r6, #0]
 8001c2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c32:	460c      	mov	r4, r1
 8001c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c38:	b10a      	cbz	r2, 8001c3e <_printf_common+0x26>
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	6033      	str	r3, [r6, #0]
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	0699      	lsls	r1, r3, #26
 8001c42:	bf42      	ittt	mi
 8001c44:	6833      	ldrmi	r3, [r6, #0]
 8001c46:	3302      	addmi	r3, #2
 8001c48:	6033      	strmi	r3, [r6, #0]
 8001c4a:	6825      	ldr	r5, [r4, #0]
 8001c4c:	f015 0506 	ands.w	r5, r5, #6
 8001c50:	d106      	bne.n	8001c60 <_printf_common+0x48>
 8001c52:	f104 0a19 	add.w	sl, r4, #25
 8001c56:	68e3      	ldr	r3, [r4, #12]
 8001c58:	6832      	ldr	r2, [r6, #0]
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	42ab      	cmp	r3, r5
 8001c5e:	dc2b      	bgt.n	8001cb8 <_printf_common+0xa0>
 8001c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c64:	1e13      	subs	r3, r2, #0
 8001c66:	6822      	ldr	r2, [r4, #0]
 8001c68:	bf18      	it	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	0692      	lsls	r2, r2, #26
 8001c6e:	d430      	bmi.n	8001cd2 <_printf_common+0xba>
 8001c70:	4649      	mov	r1, r9
 8001c72:	4638      	mov	r0, r7
 8001c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c78:	47c0      	blx	r8
 8001c7a:	3001      	adds	r0, #1
 8001c7c:	d023      	beq.n	8001cc6 <_printf_common+0xae>
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	6922      	ldr	r2, [r4, #16]
 8001c82:	f003 0306 	and.w	r3, r3, #6
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf14      	ite	ne
 8001c8a:	2500      	movne	r5, #0
 8001c8c:	6833      	ldreq	r3, [r6, #0]
 8001c8e:	f04f 0600 	mov.w	r6, #0
 8001c92:	bf08      	it	eq
 8001c94:	68e5      	ldreq	r5, [r4, #12]
 8001c96:	f104 041a 	add.w	r4, r4, #26
 8001c9a:	bf08      	it	eq
 8001c9c:	1aed      	subeq	r5, r5, r3
 8001c9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001ca2:	bf08      	it	eq
 8001ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	bfc4      	itt	gt
 8001cac:	1a9b      	subgt	r3, r3, r2
 8001cae:	18ed      	addgt	r5, r5, r3
 8001cb0:	42b5      	cmp	r5, r6
 8001cb2:	d11a      	bne.n	8001cea <_printf_common+0xd2>
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	e008      	b.n	8001cca <_printf_common+0xb2>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4652      	mov	r2, sl
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	47c0      	blx	r8
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	d103      	bne.n	8001cce <_printf_common+0xb6>
 8001cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cce:	3501      	adds	r5, #1
 8001cd0:	e7c1      	b.n	8001c56 <_printf_common+0x3e>
 8001cd2:	2030      	movs	r0, #48	; 0x30
 8001cd4:	18e1      	adds	r1, r4, r3
 8001cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ce0:	4422      	add	r2, r4
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ce8:	e7c2      	b.n	8001c70 <_printf_common+0x58>
 8001cea:	2301      	movs	r3, #1
 8001cec:	4622      	mov	r2, r4
 8001cee:	4649      	mov	r1, r9
 8001cf0:	4638      	mov	r0, r7
 8001cf2:	47c0      	blx	r8
 8001cf4:	3001      	adds	r0, #1
 8001cf6:	d0e6      	beq.n	8001cc6 <_printf_common+0xae>
 8001cf8:	3601      	adds	r6, #1
 8001cfa:	e7d9      	b.n	8001cb0 <_printf_common+0x98>

08001cfc <_printf_i>:
 8001cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d00:	7e0f      	ldrb	r7, [r1, #24]
 8001d02:	4691      	mov	r9, r2
 8001d04:	2f78      	cmp	r7, #120	; 0x78
 8001d06:	4680      	mov	r8, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	469a      	mov	sl, r3
 8001d0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d12:	d807      	bhi.n	8001d24 <_printf_i+0x28>
 8001d14:	2f62      	cmp	r7, #98	; 0x62
 8001d16:	d80a      	bhi.n	8001d2e <_printf_i+0x32>
 8001d18:	2f00      	cmp	r7, #0
 8001d1a:	f000 80d5 	beq.w	8001ec8 <_printf_i+0x1cc>
 8001d1e:	2f58      	cmp	r7, #88	; 0x58
 8001d20:	f000 80c1 	beq.w	8001ea6 <_printf_i+0x1aa>
 8001d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d2c:	e03a      	b.n	8001da4 <_printf_i+0xa8>
 8001d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d32:	2b15      	cmp	r3, #21
 8001d34:	d8f6      	bhi.n	8001d24 <_printf_i+0x28>
 8001d36:	a101      	add	r1, pc, #4	; (adr r1, 8001d3c <_printf_i+0x40>)
 8001d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d3c:	08001d95 	.word	0x08001d95
 8001d40:	08001da9 	.word	0x08001da9
 8001d44:	08001d25 	.word	0x08001d25
 8001d48:	08001d25 	.word	0x08001d25
 8001d4c:	08001d25 	.word	0x08001d25
 8001d50:	08001d25 	.word	0x08001d25
 8001d54:	08001da9 	.word	0x08001da9
 8001d58:	08001d25 	.word	0x08001d25
 8001d5c:	08001d25 	.word	0x08001d25
 8001d60:	08001d25 	.word	0x08001d25
 8001d64:	08001d25 	.word	0x08001d25
 8001d68:	08001eaf 	.word	0x08001eaf
 8001d6c:	08001dd5 	.word	0x08001dd5
 8001d70:	08001e69 	.word	0x08001e69
 8001d74:	08001d25 	.word	0x08001d25
 8001d78:	08001d25 	.word	0x08001d25
 8001d7c:	08001ed1 	.word	0x08001ed1
 8001d80:	08001d25 	.word	0x08001d25
 8001d84:	08001dd5 	.word	0x08001dd5
 8001d88:	08001d25 	.word	0x08001d25
 8001d8c:	08001d25 	.word	0x08001d25
 8001d90:	08001e71 	.word	0x08001e71
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	1d1a      	adds	r2, r3, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	602a      	str	r2, [r5, #0]
 8001d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0a0      	b.n	8001eea <_printf_i+0x1ee>
 8001da8:	6820      	ldr	r0, [r4, #0]
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	0607      	lsls	r7, r0, #24
 8001dae:	f103 0104 	add.w	r1, r3, #4
 8001db2:	6029      	str	r1, [r5, #0]
 8001db4:	d501      	bpl.n	8001dba <_printf_i+0xbe>
 8001db6:	681e      	ldr	r6, [r3, #0]
 8001db8:	e003      	b.n	8001dc2 <_printf_i+0xc6>
 8001dba:	0646      	lsls	r6, r0, #25
 8001dbc:	d5fb      	bpl.n	8001db6 <_printf_i+0xba>
 8001dbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001dc2:	2e00      	cmp	r6, #0
 8001dc4:	da03      	bge.n	8001dce <_printf_i+0xd2>
 8001dc6:	232d      	movs	r3, #45	; 0x2d
 8001dc8:	4276      	negs	r6, r6
 8001dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dce:	230a      	movs	r3, #10
 8001dd0:	4859      	ldr	r0, [pc, #356]	; (8001f38 <_printf_i+0x23c>)
 8001dd2:	e012      	b.n	8001dfa <_printf_i+0xfe>
 8001dd4:	682b      	ldr	r3, [r5, #0]
 8001dd6:	6820      	ldr	r0, [r4, #0]
 8001dd8:	1d19      	adds	r1, r3, #4
 8001dda:	6029      	str	r1, [r5, #0]
 8001ddc:	0605      	lsls	r5, r0, #24
 8001dde:	d501      	bpl.n	8001de4 <_printf_i+0xe8>
 8001de0:	681e      	ldr	r6, [r3, #0]
 8001de2:	e002      	b.n	8001dea <_printf_i+0xee>
 8001de4:	0641      	lsls	r1, r0, #25
 8001de6:	d5fb      	bpl.n	8001de0 <_printf_i+0xe4>
 8001de8:	881e      	ldrh	r6, [r3, #0]
 8001dea:	2f6f      	cmp	r7, #111	; 0x6f
 8001dec:	bf0c      	ite	eq
 8001dee:	2308      	moveq	r3, #8
 8001df0:	230a      	movne	r3, #10
 8001df2:	4851      	ldr	r0, [pc, #324]	; (8001f38 <_printf_i+0x23c>)
 8001df4:	2100      	movs	r1, #0
 8001df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001dfa:	6865      	ldr	r5, [r4, #4]
 8001dfc:	2d00      	cmp	r5, #0
 8001dfe:	bfa8      	it	ge
 8001e00:	6821      	ldrge	r1, [r4, #0]
 8001e02:	60a5      	str	r5, [r4, #8]
 8001e04:	bfa4      	itt	ge
 8001e06:	f021 0104 	bicge.w	r1, r1, #4
 8001e0a:	6021      	strge	r1, [r4, #0]
 8001e0c:	b90e      	cbnz	r6, 8001e12 <_printf_i+0x116>
 8001e0e:	2d00      	cmp	r5, #0
 8001e10:	d04b      	beq.n	8001eaa <_printf_i+0x1ae>
 8001e12:	4615      	mov	r5, r2
 8001e14:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e18:	fb03 6711 	mls	r7, r3, r1, r6
 8001e1c:	5dc7      	ldrb	r7, [r0, r7]
 8001e1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e22:	4637      	mov	r7, r6
 8001e24:	42bb      	cmp	r3, r7
 8001e26:	460e      	mov	r6, r1
 8001e28:	d9f4      	bls.n	8001e14 <_printf_i+0x118>
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d10b      	bne.n	8001e46 <_printf_i+0x14a>
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	07de      	lsls	r6, r3, #31
 8001e32:	d508      	bpl.n	8001e46 <_printf_i+0x14a>
 8001e34:	6923      	ldr	r3, [r4, #16]
 8001e36:	6861      	ldr	r1, [r4, #4]
 8001e38:	4299      	cmp	r1, r3
 8001e3a:	bfde      	ittt	le
 8001e3c:	2330      	movle	r3, #48	; 0x30
 8001e3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e46:	1b52      	subs	r2, r2, r5
 8001e48:	6122      	str	r2, [r4, #16]
 8001e4a:	464b      	mov	r3, r9
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	4640      	mov	r0, r8
 8001e50:	f8cd a000 	str.w	sl, [sp]
 8001e54:	aa03      	add	r2, sp, #12
 8001e56:	f7ff fedf 	bl	8001c18 <_printf_common>
 8001e5a:	3001      	adds	r0, #1
 8001e5c:	d14a      	bne.n	8001ef4 <_printf_i+0x1f8>
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e62:	b004      	add	sp, #16
 8001e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	2778      	movs	r7, #120	; 0x78
 8001e72:	4832      	ldr	r0, [pc, #200]	; (8001f3c <_printf_i+0x240>)
 8001e74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	6829      	ldr	r1, [r5, #0]
 8001e7c:	061f      	lsls	r7, r3, #24
 8001e7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e82:	d402      	bmi.n	8001e8a <_printf_i+0x18e>
 8001e84:	065f      	lsls	r7, r3, #25
 8001e86:	bf48      	it	mi
 8001e88:	b2b6      	uxthmi	r6, r6
 8001e8a:	07df      	lsls	r7, r3, #31
 8001e8c:	bf48      	it	mi
 8001e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8001e92:	6029      	str	r1, [r5, #0]
 8001e94:	bf48      	it	mi
 8001e96:	6023      	strmi	r3, [r4, #0]
 8001e98:	b91e      	cbnz	r6, 8001ea2 <_printf_i+0x1a6>
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	f023 0320 	bic.w	r3, r3, #32
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	e7a6      	b.n	8001df4 <_printf_i+0xf8>
 8001ea6:	4824      	ldr	r0, [pc, #144]	; (8001f38 <_printf_i+0x23c>)
 8001ea8:	e7e4      	b.n	8001e74 <_printf_i+0x178>
 8001eaa:	4615      	mov	r5, r2
 8001eac:	e7bd      	b.n	8001e2a <_printf_i+0x12e>
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	6826      	ldr	r6, [r4, #0]
 8001eb2:	1d18      	adds	r0, r3, #4
 8001eb4:	6961      	ldr	r1, [r4, #20]
 8001eb6:	6028      	str	r0, [r5, #0]
 8001eb8:	0635      	lsls	r5, r6, #24
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	d501      	bpl.n	8001ec2 <_printf_i+0x1c6>
 8001ebe:	6019      	str	r1, [r3, #0]
 8001ec0:	e002      	b.n	8001ec8 <_printf_i+0x1cc>
 8001ec2:	0670      	lsls	r0, r6, #25
 8001ec4:	d5fb      	bpl.n	8001ebe <_printf_i+0x1c2>
 8001ec6:	8019      	strh	r1, [r3, #0]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	4615      	mov	r5, r2
 8001ecc:	6123      	str	r3, [r4, #16]
 8001ece:	e7bc      	b.n	8001e4a <_printf_i+0x14e>
 8001ed0:	682b      	ldr	r3, [r5, #0]
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	1d1a      	adds	r2, r3, #4
 8001ed6:	602a      	str	r2, [r5, #0]
 8001ed8:	681d      	ldr	r5, [r3, #0]
 8001eda:	6862      	ldr	r2, [r4, #4]
 8001edc:	4628      	mov	r0, r5
 8001ede:	f000 f859 	bl	8001f94 <memchr>
 8001ee2:	b108      	cbz	r0, 8001ee8 <_printf_i+0x1ec>
 8001ee4:	1b40      	subs	r0, r0, r5
 8001ee6:	6060      	str	r0, [r4, #4]
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	6123      	str	r3, [r4, #16]
 8001eec:	2300      	movs	r3, #0
 8001eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ef2:	e7aa      	b.n	8001e4a <_printf_i+0x14e>
 8001ef4:	462a      	mov	r2, r5
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	4640      	mov	r0, r8
 8001efa:	6923      	ldr	r3, [r4, #16]
 8001efc:	47d0      	blx	sl
 8001efe:	3001      	adds	r0, #1
 8001f00:	d0ad      	beq.n	8001e5e <_printf_i+0x162>
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	079b      	lsls	r3, r3, #30
 8001f06:	d413      	bmi.n	8001f30 <_printf_i+0x234>
 8001f08:	68e0      	ldr	r0, [r4, #12]
 8001f0a:	9b03      	ldr	r3, [sp, #12]
 8001f0c:	4298      	cmp	r0, r3
 8001f0e:	bfb8      	it	lt
 8001f10:	4618      	movlt	r0, r3
 8001f12:	e7a6      	b.n	8001e62 <_printf_i+0x166>
 8001f14:	2301      	movs	r3, #1
 8001f16:	4632      	mov	r2, r6
 8001f18:	4649      	mov	r1, r9
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	47d0      	blx	sl
 8001f1e:	3001      	adds	r0, #1
 8001f20:	d09d      	beq.n	8001e5e <_printf_i+0x162>
 8001f22:	3501      	adds	r5, #1
 8001f24:	68e3      	ldr	r3, [r4, #12]
 8001f26:	9903      	ldr	r1, [sp, #12]
 8001f28:	1a5b      	subs	r3, r3, r1
 8001f2a:	42ab      	cmp	r3, r5
 8001f2c:	dcf2      	bgt.n	8001f14 <_printf_i+0x218>
 8001f2e:	e7eb      	b.n	8001f08 <_printf_i+0x20c>
 8001f30:	2500      	movs	r5, #0
 8001f32:	f104 0619 	add.w	r6, r4, #25
 8001f36:	e7f5      	b.n	8001f24 <_printf_i+0x228>
 8001f38:	08002123 	.word	0x08002123
 8001f3c:	08002134 	.word	0x08002134

08001f40 <memmove>:
 8001f40:	4288      	cmp	r0, r1
 8001f42:	b510      	push	{r4, lr}
 8001f44:	eb01 0402 	add.w	r4, r1, r2
 8001f48:	d902      	bls.n	8001f50 <memmove+0x10>
 8001f4a:	4284      	cmp	r4, r0
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	d807      	bhi.n	8001f60 <memmove+0x20>
 8001f50:	1e43      	subs	r3, r0, #1
 8001f52:	42a1      	cmp	r1, r4
 8001f54:	d008      	beq.n	8001f68 <memmove+0x28>
 8001f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f5e:	e7f8      	b.n	8001f52 <memmove+0x12>
 8001f60:	4601      	mov	r1, r0
 8001f62:	4402      	add	r2, r0
 8001f64:	428a      	cmp	r2, r1
 8001f66:	d100      	bne.n	8001f6a <memmove+0x2a>
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f72:	e7f7      	b.n	8001f64 <memmove+0x24>

08001f74 <_sbrk_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	2300      	movs	r3, #0
 8001f78:	4d05      	ldr	r5, [pc, #20]	; (8001f90 <_sbrk_r+0x1c>)
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	602b      	str	r3, [r5, #0]
 8001f80:	f7ff fb52 	bl	8001628 <_sbrk>
 8001f84:	1c43      	adds	r3, r0, #1
 8001f86:	d102      	bne.n	8001f8e <_sbrk_r+0x1a>
 8001f88:	682b      	ldr	r3, [r5, #0]
 8001f8a:	b103      	cbz	r3, 8001f8e <_sbrk_r+0x1a>
 8001f8c:	6023      	str	r3, [r4, #0]
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	20000258 	.word	0x20000258

08001f94 <memchr>:
 8001f94:	4603      	mov	r3, r0
 8001f96:	b510      	push	{r4, lr}
 8001f98:	b2c9      	uxtb	r1, r1
 8001f9a:	4402      	add	r2, r0
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	d101      	bne.n	8001fa6 <memchr+0x12>
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	e003      	b.n	8001fae <memchr+0x1a>
 8001fa6:	7804      	ldrb	r4, [r0, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	428c      	cmp	r4, r1
 8001fac:	d1f6      	bne.n	8001f9c <memchr+0x8>
 8001fae:	bd10      	pop	{r4, pc}

08001fb0 <memcpy>:
 8001fb0:	440a      	add	r2, r1
 8001fb2:	4291      	cmp	r1, r2
 8001fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001fb8:	d100      	bne.n	8001fbc <memcpy+0xc>
 8001fba:	4770      	bx	lr
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fc2:	4291      	cmp	r1, r2
 8001fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fc8:	d1f9      	bne.n	8001fbe <memcpy+0xe>
 8001fca:	bd10      	pop	{r4, pc}

08001fcc <_realloc_r>:
 8001fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd0:	4680      	mov	r8, r0
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	460e      	mov	r6, r1
 8001fd6:	b921      	cbnz	r1, 8001fe2 <_realloc_r+0x16>
 8001fd8:	4611      	mov	r1, r2
 8001fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fde:	f7ff bc37 	b.w	8001850 <_malloc_r>
 8001fe2:	b92a      	cbnz	r2, 8001ff0 <_realloc_r+0x24>
 8001fe4:	f7ff fbcc 	bl	8001780 <_free_r>
 8001fe8:	4625      	mov	r5, r4
 8001fea:	4628      	mov	r0, r5
 8001fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff0:	f000 f81b 	bl	800202a <_malloc_usable_size_r>
 8001ff4:	4284      	cmp	r4, r0
 8001ff6:	4607      	mov	r7, r0
 8001ff8:	d802      	bhi.n	8002000 <_realloc_r+0x34>
 8001ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001ffe:	d812      	bhi.n	8002026 <_realloc_r+0x5a>
 8002000:	4621      	mov	r1, r4
 8002002:	4640      	mov	r0, r8
 8002004:	f7ff fc24 	bl	8001850 <_malloc_r>
 8002008:	4605      	mov	r5, r0
 800200a:	2800      	cmp	r0, #0
 800200c:	d0ed      	beq.n	8001fea <_realloc_r+0x1e>
 800200e:	42bc      	cmp	r4, r7
 8002010:	4622      	mov	r2, r4
 8002012:	4631      	mov	r1, r6
 8002014:	bf28      	it	cs
 8002016:	463a      	movcs	r2, r7
 8002018:	f7ff ffca 	bl	8001fb0 <memcpy>
 800201c:	4631      	mov	r1, r6
 800201e:	4640      	mov	r0, r8
 8002020:	f7ff fbae 	bl	8001780 <_free_r>
 8002024:	e7e1      	b.n	8001fea <_realloc_r+0x1e>
 8002026:	4635      	mov	r5, r6
 8002028:	e7df      	b.n	8001fea <_realloc_r+0x1e>

0800202a <_malloc_usable_size_r>:
 800202a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800202e:	1f18      	subs	r0, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	bfbc      	itt	lt
 8002034:	580b      	ldrlt	r3, [r1, r0]
 8002036:	18c0      	addlt	r0, r0, r3
 8002038:	4770      	bx	lr
	...

0800203c <_init>:
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	bf00      	nop
 8002040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002042:	bc08      	pop	{r3}
 8002044:	469e      	mov	lr, r3
 8002046:	4770      	bx	lr

08002048 <_fini>:
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	bf00      	nop
 800204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204e:	bc08      	pop	{r3}
 8002050:	469e      	mov	lr, r3
 8002052:	4770      	bx	lr
