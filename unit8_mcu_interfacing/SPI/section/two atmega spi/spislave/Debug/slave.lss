
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003f0  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006c3  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 65 00 	call	0xca	; 0xca <main>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_SlaveInit>:
#define MOSI 5
#define MISO 6
#define SCK 7

void SPI_SlaveInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output */
	DDRB |= (1<<MISO);
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24



	/* Set MOSI, SCK and SS input*/
	DDRB &= ~(1<<MOSI) & ~(1<<SCK) & ~(1<<SS);
  82:	a7 e3       	ldi	r26, 0x37	; 55
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 74       	andi	r24, 0x4F	; 79
  8e:	8c 93       	st	X, r24




	/* Enable SPI, Slave, set clock rate fck/16 */
	SPCR = (1<<SPE);
  90:	ed e2       	ldi	r30, 0x2D	; 45
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	80 83       	st	Z, r24



}
  98:	cf 91       	pop	r28
  9a:	df 91       	pop	r29
  9c:	08 95       	ret

0000009e <SPI_SlaveRecieve>:
unsigned char SPI_SlaveRecieve(unsigned char cData)
{
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	0f 92       	push	r0
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = cData;
  aa:	ef e2       	ldi	r30, 0x2F	; 47
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  b2:	ee e2       	ldi	r30, 0x2E	; 46
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	dc f7       	brge	.-10     	; 0xb2 <SPI_SlaveRecieve+0x14>
	return SPDR;
  bc:	ef e2       	ldi	r30, 0x2F	; 47
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
}
  c2:	0f 90       	pop	r0
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <main>:


int main(void)
{
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	0f 92       	push	r0
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	unsigned char ch = 255;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	89 83       	std	Y+1, r24	; 0x01
	DDRA = 0xFF;
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	80 83       	st	Z, r24
	SPI_SlaveInit();
  e4:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_SlaveInit>
	for (ch = 255; ch >= 0; ch--)
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	89 83       	std	Y+1, r24	; 0x01
	{
		PORTA = SPI_SlaveRecieve(ch);
  ec:	0b e3       	ldi	r16, 0x3B	; 59
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	0e 94 4f 00 	call	0x9e	; 0x9e <SPI_SlaveRecieve>
  f6:	f8 01       	movw	r30, r16
  f8:	80 83       	st	Z, r24
{
    /* Replace with your application code */
	unsigned char ch = 255;
	DDRA = 0xFF;
	SPI_SlaveInit();
	for (ch = 255; ch >= 0; ch--)
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	f5 cf       	rjmp	.-22     	; 0xec <main+0x22>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
