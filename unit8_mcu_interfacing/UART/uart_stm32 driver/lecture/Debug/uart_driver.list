
uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800091c  0800091c  0001091c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000948  08000948  00010950  2**0
                  CONTENTS
  4 .ARM          00000000  08000948  08000948  00010950  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000948  08000950  00010950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000948  08000948  00010948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800094c  0800094c  0001094c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000950  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000950  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010950  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010979  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001099  00000000  00000000  000109bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000054c  00000000  00000000  00011a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000734  00000000  00000000  00011fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000150  00000000  00000000  000126d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000108  00000000  00000000  00012828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000252e  00000000  00000000  00012930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001e6c  00000000  00000000  00014e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00008fd3  00000000  00000000  00016cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000003e0  00000000  00000000  0001fca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000904 	.word	0x08000904

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000904 	.word	0x08000904

08000170 <main>:
void clock_init();
void abdo_IRQ_callback();


int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0


	clock_init();
 8000176:	f000 f831 	bl	80001dc <clock_init>

	UART_config Cnfg;
	Cnfg.uart_mode = uart_mode_TX_RX;
 800017a:	230c      	movs	r3, #12
 800017c:	713b      	strb	r3, [r7, #4]
	Cnfg.uart_baudrate = uart_baud_115200;
 800017e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000182:	60bb      	str	r3, [r7, #8]
	Cnfg.uart_IRQ_enable = uart_irq_enable_RXNE;
 8000184:	2320      	movs	r3, #32
 8000186:	73fb      	strb	r3, [r7, #15]
	Cnfg.uart_parity = uart_parity_none;
 8000188:	2300      	movs	r3, #0
 800018a:	733b      	strb	r3, [r7, #12]
	Cnfg.uart_stopbits = stopbit_1;
 800018c:	2300      	movs	r3, #0
 800018e:	73bb      	strb	r3, [r7, #14]
	Cnfg.uart_payload_length = uart_payload_8bit;
 8000190:	2300      	movs	r3, #0
 8000192:	737b      	strb	r3, [r7, #13]
	Cnfg.flow_ctrl = uart_flowctrl_none;
 8000194:	2300      	movs	r3, #0
 8000196:	743b      	strb	r3, [r7, #16]
	Cnfg.P_IRQ_callback = abdo_IRQ_callback;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <main+0x40>)
 800019a:	617b      	str	r3, [r7, #20]

	MCAL_uart_init(UART1,&Cnfg );
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	4619      	mov	r1, r3
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <main+0x44>)
 80001a2:	f000 f9fb 	bl	800059c <MCAL_uart_init>
	MCAL_GPIO_uart_init(UART1);
 80001a6:	4803      	ldr	r0, [pc, #12]	; (80001b4 <main+0x44>)
 80001a8:	f000 fabc 	bl	8000724 <MCAL_GPIO_uart_init>


    while(1)
 80001ac:	e7fe      	b.n	80001ac <main+0x3c>
 80001ae:	bf00      	nop
 80001b0:	080001b9 	.word	0x080001b9
 80001b4:	40013800 	.word	0x40013800

080001b8 <abdo_IRQ_callback>:

}



void abdo_IRQ_callback(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	MCAL_uart_recieve(UART1,&ch , polling_disable);
 80001bc:	2201      	movs	r2, #1
 80001be:	4905      	ldr	r1, [pc, #20]	; (80001d4 <abdo_IRQ_callback+0x1c>)
 80001c0:	4805      	ldr	r0, [pc, #20]	; (80001d8 <abdo_IRQ_callback+0x20>)
 80001c2:	f000 fb2f 	bl	8000824 <MCAL_uart_recieve>
	MCAL_uart_send(UART1,&ch , polling_enable);
 80001c6:	2200      	movs	r2, #0
 80001c8:	4902      	ldr	r1, [pc, #8]	; (80001d4 <abdo_IRQ_callback+0x1c>)
 80001ca:	4803      	ldr	r0, [pc, #12]	; (80001d8 <abdo_IRQ_callback+0x20>)
 80001cc:	f000 fb0e 	bl	80007ec <MCAL_uart_send>


}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	40013800 	.word	0x40013800

080001dc <clock_init>:
void clock_init()
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLOCK_ENABLE;
 80001e0:	4b0a      	ldr	r3, [pc, #40]	; (800020c <clock_init+0x30>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a09      	ldr	r2, [pc, #36]	; (800020c <clock_init+0x30>)
 80001e6:	f043 0304 	orr.w	r3, r3, #4
 80001ea:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_ENABLE;
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <clock_init+0x30>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <clock_init+0x30>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_ENABLE;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <clock_init+0x30>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <clock_init+0x30>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6193      	str	r3, [r2, #24]




}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021000 	.word	0x40021000

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 fb3d 	bl	80008bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ff95 	bl	8000170 <main>

08000246 <LoopForever>:

LoopForever:
  b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	08000950 	.word	0x08000950
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	20000024 	.word	0x20000024

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <MCAL_RCC_GetSysCLK>:

const uint16_t AHB_PRESCALER[17U]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};


uint32_t MCAL_RCC_GetSysCLK(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable

			switch((RCC->CFGR >>2) & 0b11)
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <MCAL_RCC_GetSysCLK+0x28>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	089b      	lsrs	r3, r3, #2
 800026e:	f003 0303 	and.w	r3, r3, #3
 8000272:	2b00      	cmp	r3, #0
 8000274:	d002      	beq.n	800027c <MCAL_RCC_GetSysCLK+0x18>
 8000276:	2b01      	cmp	r3, #1
 8000278:	d002      	beq.n	8000280 <MCAL_RCC_GetSysCLK+0x1c>
 800027a:	e003      	b.n	8000284 <MCAL_RCC_GetSysCLK+0x20>
			{

			case 0:
				return HSI_CLK;
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <MCAL_RCC_GetSysCLK+0x2c>)
 800027e:	e001      	b.n	8000284 <MCAL_RCC_GetSysCLK+0x20>
				break;
			case 1:
				return HSE_CLK;
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <MCAL_RCC_GetSysCLK+0x30>)
 8000282:	e7ff      	b.n	8000284 <MCAL_RCC_GetSysCLK+0x20>
				break;

			}

}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40021000 	.word	0x40021000
 8000290:	007a1200 	.word	0x007a1200
 8000294:	00f42400 	.word	0x00f42400

08000298 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return( MCAL_RCC_GetSysCLK()>>(AHB_PRESCALER[(RCC->CFGR>>4) &0b1111]));
 800029c:	f7ff ffe2 	bl	8000264 <MCAL_RCC_GetSysCLK>
 80002a0:	4602      	mov	r2, r0
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <MCAL_RCC_GetHCLKFreq+0x24>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	091b      	lsrs	r3, r3, #4
 80002a8:	f003 030f 	and.w	r3, r3, #15
 80002ac:	4904      	ldr	r1, [pc, #16]	; (80002c0 <MCAL_RCC_GetHCLKFreq+0x28>)
 80002ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002b2:	fa22 f303 	lsr.w	r3, r2, r3


}
 80002b6:	4618      	mov	r0, r3
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000
 80002c0:	08000924 	.word	0x08000924

080002c4 <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq()>>(APB_PRESCALER[(RCC->CFGR>>8) &0b111]));
 80002c8:	f7ff ffe6 	bl	8000298 <MCAL_RCC_GetHCLKFreq>
 80002cc:	4602      	mov	r2, r0
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	0a1b      	lsrs	r3, r3, #8
 80002d4:	f003 0307 	and.w	r3, r3, #7
 80002d8:	4903      	ldr	r1, [pc, #12]	; (80002e8 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80002da:	5ccb      	ldrb	r3, [r1, r3]
 80002dc:	fa22 f303 	lsr.w	r3, r2, r3

}
 80002e0:	4618      	mov	r0, r3
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	0800091c 	.word	0x0800091c

080002ec <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq()>>(APB_PRESCALER[(RCC->CFGR)>>11 &0b111]));
 80002f0:	f7ff ffd2 	bl	8000298 <MCAL_RCC_GetHCLKFreq>
 80002f4:	4602      	mov	r2, r0
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <MCAL_RCC_GetPCLK2Freq+0x20>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	0adb      	lsrs	r3, r3, #11
 80002fc:	f003 0307 	and.w	r3, r3, #7
 8000300:	4903      	ldr	r1, [pc, #12]	; (8000310 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000302:	5ccb      	ldrb	r3, [r1, r3]
 8000304:	fa22 f303 	lsr.w	r3, r2, r3


}
 8000308:	4618      	mov	r0, r3
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40021000 	.word	0x40021000
 8000310:	0800091c 	.word	0x0800091c

08000314 <get_pin_position>:

 */


uint8_t get_pin_position(uint16_t pin)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	80fb      	strh	r3, [r7, #6]
	switch (pin) {
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000324:	f000 80a5 	beq.w	8000472 <get_pin_position+0x15e>
 8000328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800032c:	f300 80a3 	bgt.w	8000476 <get_pin_position+0x162>
 8000330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000334:	f000 809b 	beq.w	800046e <get_pin_position+0x15a>
 8000338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800033c:	f300 809b 	bgt.w	8000476 <get_pin_position+0x162>
 8000340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000344:	f000 8091 	beq.w	800046a <get_pin_position+0x156>
 8000348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800034c:	f300 8093 	bgt.w	8000476 <get_pin_position+0x162>
 8000350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000354:	f000 8087 	beq.w	8000466 <get_pin_position+0x152>
 8000358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800035c:	f300 808b 	bgt.w	8000476 <get_pin_position+0x162>
 8000360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000364:	d07d      	beq.n	8000462 <get_pin_position+0x14e>
 8000366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800036a:	f300 8084 	bgt.w	8000476 <get_pin_position+0x162>
 800036e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000372:	d074      	beq.n	800045e <get_pin_position+0x14a>
 8000374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000378:	dc7d      	bgt.n	8000476 <get_pin_position+0x162>
 800037a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800037e:	d06c      	beq.n	800045a <get_pin_position+0x146>
 8000380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000384:	dc77      	bgt.n	8000476 <get_pin_position+0x162>
 8000386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800038a:	d064      	beq.n	8000456 <get_pin_position+0x142>
 800038c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000390:	dc71      	bgt.n	8000476 <get_pin_position+0x162>
 8000392:	2b80      	cmp	r3, #128	; 0x80
 8000394:	d05d      	beq.n	8000452 <get_pin_position+0x13e>
 8000396:	2b80      	cmp	r3, #128	; 0x80
 8000398:	dc6d      	bgt.n	8000476 <get_pin_position+0x162>
 800039a:	2b20      	cmp	r3, #32
 800039c:	dc48      	bgt.n	8000430 <get_pin_position+0x11c>
 800039e:	2b00      	cmp	r3, #0
 80003a0:	dd69      	ble.n	8000476 <get_pin_position+0x162>
 80003a2:	3b01      	subs	r3, #1
 80003a4:	2b1f      	cmp	r3, #31
 80003a6:	d866      	bhi.n	8000476 <get_pin_position+0x162>
 80003a8:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <get_pin_position+0x9c>)
 80003aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ae:	bf00      	nop
 80003b0:	08000437 	.word	0x08000437
 80003b4:	0800043b 	.word	0x0800043b
 80003b8:	08000477 	.word	0x08000477
 80003bc:	0800043f 	.word	0x0800043f
 80003c0:	08000477 	.word	0x08000477
 80003c4:	08000477 	.word	0x08000477
 80003c8:	08000477 	.word	0x08000477
 80003cc:	08000443 	.word	0x08000443
 80003d0:	08000477 	.word	0x08000477
 80003d4:	08000477 	.word	0x08000477
 80003d8:	08000477 	.word	0x08000477
 80003dc:	08000477 	.word	0x08000477
 80003e0:	08000477 	.word	0x08000477
 80003e4:	08000477 	.word	0x08000477
 80003e8:	08000477 	.word	0x08000477
 80003ec:	08000447 	.word	0x08000447
 80003f0:	08000477 	.word	0x08000477
 80003f4:	08000477 	.word	0x08000477
 80003f8:	08000477 	.word	0x08000477
 80003fc:	08000477 	.word	0x08000477
 8000400:	08000477 	.word	0x08000477
 8000404:	08000477 	.word	0x08000477
 8000408:	08000477 	.word	0x08000477
 800040c:	08000477 	.word	0x08000477
 8000410:	08000477 	.word	0x08000477
 8000414:	08000477 	.word	0x08000477
 8000418:	08000477 	.word	0x08000477
 800041c:	08000477 	.word	0x08000477
 8000420:	08000477 	.word	0x08000477
 8000424:	08000477 	.word	0x08000477
 8000428:	08000477 	.word	0x08000477
 800042c:	0800044b 	.word	0x0800044b
 8000430:	2b40      	cmp	r3, #64	; 0x40
 8000432:	d00c      	beq.n	800044e <get_pin_position+0x13a>
 8000434:	e01f      	b.n	8000476 <get_pin_position+0x162>
	case GPIO_PIN0:
			return 0;
 8000436:	2300      	movs	r3, #0
 8000438:	e01e      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN1:
			return 4;
 800043a:	2304      	movs	r3, #4
 800043c:	e01c      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN2:
			return 8;
 800043e:	2308      	movs	r3, #8
 8000440:	e01a      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN3:
			return 12;
 8000442:	230c      	movs	r3, #12
 8000444:	e018      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN4:
			return 16;
 8000446:	2310      	movs	r3, #16
 8000448:	e016      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN5:
			return 20;
 800044a:	2314      	movs	r3, #20
 800044c:	e014      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN6:
			return 24;
 800044e:	2318      	movs	r3, #24
 8000450:	e012      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN7:
			return 28;
 8000452:	231c      	movs	r3, #28
 8000454:	e010      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN8:
			return 0;
 8000456:	2300      	movs	r3, #0
 8000458:	e00e      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN9:
			return 4;
 800045a:	2304      	movs	r3, #4
 800045c:	e00c      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN10:
			return 8;
 800045e:	2308      	movs	r3, #8
 8000460:	e00a      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN11:
			return 12;
 8000462:	230c      	movs	r3, #12
 8000464:	e008      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN12:
			return 16;
 8000466:	2310      	movs	r3, #16
 8000468:	e006      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN13:
			return 20;
 800046a:	2314      	movs	r3, #20
 800046c:	e004      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN14:
			return 24;
 800046e:	2318      	movs	r3, #24
 8000470:	e002      	b.n	8000478 <get_pin_position+0x164>
			break;
		case GPIO_PIN15:
			return 28;
 8000472:	231c      	movs	r3, #28
 8000474:	e000      	b.n	8000478 <get_pin_position+0x164>
			break;
		}


	return -1;
 8000476:	23ff      	movs	r3, #255	; 0xff

}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MCAL_GPIO_INIT>:


void MCAL_GPIO_INIT(GPIOx_typedef *GPIOx, GPIO_CONFIGURATION *pin_config){
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configregister = NULL;
 800048e:	2300      	movs	r3, #0
 8000490:	60bb      	str	r3, [r7, #8]
     uint16_t val;
	//check if the pin lies in CRL range or CRH range -> CRL[0-7] CRH[8-15]

	configregister =((pin_config->GPIO_PIN_NUMBER) < GPIO_PIN8 ) ? &GPIOx->CRL : &GPIOx->CRH;
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	2bff      	cmp	r3, #255	; 0xff
 800049a:	d801      	bhi.n	80004a0 <MCAL_GPIO_INIT+0x1c>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	e001      	b.n	80004a4 <MCAL_GPIO_INIT+0x20>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3304      	adds	r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]

	//Clear  CNFy[1:0] MODEy[1:0] 4BITS OF THE PIN
	*configregister &= ~( 0xF<< get_pin_position(pin_config->GPIO_PIN_NUMBER) );
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ff31 	bl	8000314 <get_pin_position>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461a      	mov	r2, r3
 80004b6:	230f      	movs	r3, #15
 80004b8:	4093      	lsls	r3, r2
 80004ba:	43da      	mvns	r2, r3
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	401a      	ands	r2, r3
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	601a      	str	r2, [r3, #0]

	//if the pin is in output mode
	if(pin_config->GPIO_PIN_MODE==GPIO_PUSHPULL_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_OPENDRAIN_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_AFIO_PP_OUTPUT  || pin_config->GPIO_PIN_MODE==GPIO_AFIO_OP_OUTPUT )
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	885b      	ldrh	r3, [r3, #2]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	2b04      	cmp	r3, #4
 80004ce:	d00e      	beq.n	80004ee <MCAL_GPIO_INIT+0x6a>
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	885b      	ldrh	r3, [r3, #2]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	2b05      	cmp	r3, #5
 80004d8:	d009      	beq.n	80004ee <MCAL_GPIO_INIT+0x6a>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	885b      	ldrh	r3, [r3, #2]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	2b06      	cmp	r3, #6
 80004e2:	d004      	beq.n	80004ee <MCAL_GPIO_INIT+0x6a>
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	885b      	ldrh	r3, [r3, #2]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	2b07      	cmp	r3, #7
 80004ec:	d110      	bne.n	8000510 <MCAL_GPIO_INIT+0x8c>
	{
		//set the values for CNF bits and MODEy
		val =(((pin_config->GPIO_PIN_MODE - 4) << 2 | pin_config->GPIO_OUTPUT_SPEED  )) & 0x0f;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	885b      	ldrh	r3, [r3, #2]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	3b04      	subs	r3, #4
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	b21a      	sxth	r2, r3
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	889b      	ldrh	r3, [r3, #4]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	b21b      	sxth	r3, r3
 8000502:	4313      	orrs	r3, r2
 8000504:	b21b      	sxth	r3, r3
 8000506:	b29b      	uxth	r3, r3
 8000508:	f003 030f 	and.w	r3, r3, #15
 800050c:	81fb      	strh	r3, [r7, #14]
 800050e:	e031      	b.n	8000574 <MCAL_GPIO_INIT+0xf0>
	}

	//in case if the pin is input
	else
	{
		if(pin_config->GPIO_PIN_MODE == GPIO_FLOATING_INPUT || pin_config->GPIO_PIN_MODE == GPIO_ANALOG)
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	885b      	ldrh	r3, [r3, #2]
 8000514:	b29b      	uxth	r3, r3
 8000516:	2b01      	cmp	r3, #1
 8000518:	d004      	beq.n	8000524 <MCAL_GPIO_INIT+0xa0>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	885b      	ldrh	r3, [r3, #2]
 800051e:	b29b      	uxth	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d108      	bne.n	8000536 <MCAL_GPIO_INIT+0xb2>
		{

			val =((pin_config->GPIO_PIN_MODE )<< 2 | (0x0)  ) & 0x0f;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	885b      	ldrh	r3, [r3, #2]
 8000528:	b29b      	uxth	r3, r3
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	b29b      	uxth	r3, r3
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	81fb      	strh	r3, [r7, #14]
 8000534:	e01e      	b.n	8000574 <MCAL_GPIO_INIT+0xf0>

		}

		else
		{
				val =((pin_config->GPIO_PIN_MODE)<<2) &0x0f;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	885b      	ldrh	r3, [r3, #2]
 800053a:	b29b      	uxth	r3, r3
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	b29b      	uxth	r3, r3
 8000540:	f003 030f 	and.w	r3, r3, #15
 8000544:	81fb      	strh	r3, [r7, #14]
			if(pin_config->GPIO_PIN_MODE == GPIO_PULLUP_INPUT)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	885b      	ldrh	r3, [r3, #2]
 800054a:	b29b      	uxth	r3, r3
 800054c:	2b02      	cmp	r3, #2
 800054e:	d108      	bne.n	8000562 <MCAL_GPIO_INIT+0xde>
			{
				GPIOx->ODR |= (pin_config->GPIO_PIN_NUMBER);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	b29a      	uxth	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	431a      	orrs	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	e008      	b.n	8000574 <MCAL_GPIO_INIT+0xf0>

			}
			else
			{
				GPIOx->ODR &= ~(pin_config->GPIO_PIN_NUMBER);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b29b      	uxth	r3, r3
 8000568:	43da      	mvns	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	401a      	ands	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	60da      	str	r2, [r3, #12]
		}

	}


	*configregister |=(val << (get_pin_position(pin_config->GPIO_PIN_NUMBER)));
 8000574:	89fc      	ldrh	r4, [r7, #14]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	b29b      	uxth	r3, r3
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fec9 	bl	8000314 <get_pin_position>
 8000582:	4603      	mov	r3, r0
 8000584:	fa04 f203 	lsl.w	r2, r4, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	431a      	orrs	r2, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	601a      	str	r2, [r3, #0]

}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bd90      	pop	{r4, r7, pc}
	...

0800059c <MCAL_uart_init>:
 * ===============================================
 */


void MCAL_uart_init(UART_typedef * UARTx, UART_config * config)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]

	Global_UART_Config =config;
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <MCAL_uart_init+0x16c>)
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	6013      	str	r3, [r2, #0]
	uint16_t fclk ;

	if (UARTx == UART1) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a57      	ldr	r2, [pc, #348]	; (800070c <MCAL_uart_init+0x170>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <MCAL_uart_init+0x26>
		RCC_USART1_CLK_EN;
 80005b4:	4b56      	ldr	r3, [pc, #344]	; (8000710 <MCAL_uart_init+0x174>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a55      	ldr	r2, [pc, #340]	; (8000710 <MCAL_uart_init+0x174>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	e014      	b.n	80005ec <MCAL_uart_init+0x50>

	} else if (UARTx == UART2) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a53      	ldr	r2, [pc, #332]	; (8000714 <MCAL_uart_init+0x178>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <MCAL_uart_init+0x3c>
		RCC_USART2_CLK_EN;
 80005ca:	4b51      	ldr	r3, [pc, #324]	; (8000710 <MCAL_uart_init+0x174>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a50      	ldr	r2, [pc, #320]	; (8000710 <MCAL_uart_init+0x174>)
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	e009      	b.n	80005ec <MCAL_uart_init+0x50>
	}

	else if (UARTx == UART3) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a4f      	ldr	r2, [pc, #316]	; (8000718 <MCAL_uart_init+0x17c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d105      	bne.n	80005ec <MCAL_uart_init+0x50>

		RCC_USART3_CLK_EN;
 80005e0:	4b4b      	ldr	r3, [pc, #300]	; (8000710 <MCAL_uart_init+0x174>)
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	4a4a      	ldr	r2, [pc, #296]	; (8000710 <MCAL_uart_init+0x174>)
 80005e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ea:	61d3      	str	r3, [r2, #28]
	}

//	 Enable the USART by writing the UE bit in USART_CR1 register to 1.
	UARTx->CR1 |= (1 << 13);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	60da      	str	r2, [r3, #12]


//configure uart mode TX or RX
	UARTx->CR1 |=config->uart_mode;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	7812      	ldrb	r2, [r2, #0]
 8000600:	431a      	orrs	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60da      	str	r2, [r3, #12]

//Program the M bit in USART_CR1 to define the word length.
	UARTx->CR1 |= config->uart_payload_length;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	7a52      	ldrb	r2, [r2, #9]
 800060e:	431a      	orrs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	60da      	str	r2, [r3, #12]

//CONFIGURE parity
	UARTx->CR1 |=config->uart_parity;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	7a12      	ldrb	r2, [r2, #8]
 800061c:	431a      	orrs	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60da      	str	r2, [r3, #12]

//Program the number of stop bits in USART_CR2.
	UARTx->CR2 |=config->uart_stopbits;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	7a92      	ldrb	r2, [r2, #10]
 800062a:	431a      	orrs	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	611a      	str	r2, [r3, #16]


//configure flow control
	UARTx->CR3 |=config->flow_ctrl;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	7b12      	ldrb	r2, [r2, #12]
 8000638:	431a      	orrs	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	615a      	str	r2, [r3, #20]


//Select the desired baud rate using the USART_BRR register

    if(UARTx == UART1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a32      	ldr	r2, [pc, #200]	; (800070c <MCAL_uart_init+0x170>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d104      	bne.n	8000650 <MCAL_uart_init+0xb4>

    {
    	fclk = MCAL_RCC_GetPCLK2Freq();
 8000646:	f7ff fe51 	bl	80002ec <MCAL_RCC_GetPCLK2Freq>
 800064a:	4603      	mov	r3, r0
 800064c:	81fb      	strh	r3, [r7, #14]
 800064e:	e003      	b.n	8000658 <MCAL_uart_init+0xbc>
    }
    else
    {
    	fclk=MCAL_RCC_GetPCLK1Freq();
 8000650:	f7ff fe38 	bl	80002c4 <MCAL_RCC_GetPCLK1Freq>
 8000654:	4603      	mov	r3, r0
 8000656:	81fb      	strh	r3, [r7, #14]
    }

    UARTx->BRR = (UART_BRR_Register(fclk,config->uart_baudrate));
 8000658:	89fa      	ldrh	r2, [r7, #14]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	fbb2 f3f3 	udiv	r3, r2, r3
 8000664:	0119      	lsls	r1, r3, #4
 8000666:	89fa      	ldrh	r2, [r7, #14]
 8000668:	4613      	mov	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	009a      	lsls	r2, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	fbb2 f2f3 	udiv	r2, r2, r3
 800067e:	89f8      	ldrh	r0, [r7, #14]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	fbb0 f3f3 	udiv	r3, r0, r3
 800068a:	2064      	movs	r0, #100	; 0x64
 800068c:	fb00 f303 	mul.w	r3, r0, r3
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <MCAL_uart_init+0x180>)
 8000696:	fba2 2303 	umull	r2, r3, r2, r3
 800069a:	095b      	lsrs	r3, r3, #5
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	ea41 0203 	orr.w	r2, r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	609a      	str	r2, [r3, #8]

//configure irq

	if (config->uart_IRQ_enable != uart_irq_NONE) {
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	7adb      	ldrb	r3, [r3, #11]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d026      	beq.n	80006fe <MCAL_uart_init+0x162>
		UARTx->CR1 |= config->uart_IRQ_enable;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	7ad2      	ldrb	r2, [r2, #11]
 80006b8:	431a      	orrs	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60da      	str	r2, [r3, #12]

		//NVIC enable
		if (UARTx == UART1) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <MCAL_uart_init+0x170>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d106      	bne.n	80006d4 <MCAL_uart_init+0x138>
			NVIC_USART1_IRQ_ENABLE;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MCAL_uart_init+0x184>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <MCAL_uart_init+0x184>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	6013      	str	r3, [r2, #0]
		} else if (UARTx == UART3) {
			NVIC_USART3_IRQ_ENABLE;
		}
	}

}
 80006d2:	e014      	b.n	80006fe <MCAL_uart_init+0x162>
		} else if (UARTx == UART2) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <MCAL_uart_init+0x178>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d106      	bne.n	80006ea <MCAL_uart_init+0x14e>
			NVIC_USART2_IRQ_ENABLE;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MCAL_uart_init+0x184>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <MCAL_uart_init+0x184>)
 80006e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	e009      	b.n	80006fe <MCAL_uart_init+0x162>
		} else if (UARTx == UART3) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <MCAL_uart_init+0x17c>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d105      	bne.n	80006fe <MCAL_uart_init+0x162>
			NVIC_USART3_IRQ_ENABLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MCAL_uart_init+0x184>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <MCAL_uart_init+0x184>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6013      	str	r3, [r2, #0]
}
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000020 	.word	0x20000020
 800070c:	40013800 	.word	0x40013800
 8000710:	40021000 	.word	0x40021000
 8000714:	40004400 	.word	0x40004400
 8000718:	40004800 	.word	0x40004800
 800071c:	51eb851f 	.word	0x51eb851f
 8000720:	e000e104 	.word	0xe000e104

08000724 <MCAL_GPIO_uart_init>:

	}

}
void MCAL_GPIO_uart_init(UART_typedef * UARTx)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	GPIO_CONFIGURATION gpio_config;


	if(UARTx == UART1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <MCAL_GPIO_uart_init+0xb8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d118      	bne.n	8000766 <MCAL_GPIO_uart_init+0x42>
	{
	//uart1   pa9 tx , pa10 rx, pa11 cts, pa12 rts

	//tx
	gpio_config.GPIO_PIN_NUMBER = GPIO_PIN9 ;
 8000734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000738:	813b      	strh	r3, [r7, #8]
	gpio_config.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 800073a:	2304      	movs	r3, #4
 800073c:	817b      	strh	r3, [r7, #10]
	gpio_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 800073e:	2301      	movs	r3, #1
 8000740:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_INIT(GPIOA, &gpio_config);
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4619      	mov	r1, r3
 8000748:	4825      	ldr	r0, [pc, #148]	; (80007e0 <MCAL_GPIO_uart_init+0xbc>)
 800074a:	f7ff fe9b 	bl	8000484 <MCAL_GPIO_INIT>


	//rx
	gpio_config.GPIO_PIN_NUMBER = GPIO_PIN10 ;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	813b      	strh	r3, [r7, #8]
	gpio_config.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 8000754:	2301      	movs	r3, #1
 8000756:	817b      	strh	r3, [r7, #10]
	MCAL_GPIO_INIT(GPIOA, &gpio_config);
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4619      	mov	r1, r3
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <MCAL_GPIO_uart_init+0xbc>)
 8000760:	f7ff fe90 	bl	8000484 <MCAL_GPIO_INIT>


	}


}
 8000764:	e036      	b.n	80007d4 <MCAL_GPIO_uart_init+0xb0>
	else if (UARTx == UART2) {
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <MCAL_GPIO_uart_init+0xc0>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d116      	bne.n	800079c <MCAL_GPIO_uart_init+0x78>
		gpio_config.GPIO_PIN_NUMBER = GPIO_PIN2;
 800076e:	2304      	movs	r3, #4
 8000770:	813b      	strh	r3, [r7, #8]
		gpio_config.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000772:	2304      	movs	r3, #4
 8000774:	817b      	strh	r3, [r7, #10]
		gpio_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000776:	2301      	movs	r3, #1
 8000778:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOA, &gpio_config);
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	4619      	mov	r1, r3
 8000780:	4817      	ldr	r0, [pc, #92]	; (80007e0 <MCAL_GPIO_uart_init+0xbc>)
 8000782:	f7ff fe7f 	bl	8000484 <MCAL_GPIO_INIT>
		gpio_config.GPIO_PIN_NUMBER = GPIO_PIN3;
 8000786:	2308      	movs	r3, #8
 8000788:	813b      	strh	r3, [r7, #8]
		gpio_config.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 800078a:	2301      	movs	r3, #1
 800078c:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_INIT(GPIOA, &gpio_config);
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4619      	mov	r1, r3
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MCAL_GPIO_uart_init+0xbc>)
 8000796:	f7ff fe75 	bl	8000484 <MCAL_GPIO_INIT>
}
 800079a:	e01b      	b.n	80007d4 <MCAL_GPIO_uart_init+0xb0>
	else if (UARTx == UART2) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <MCAL_GPIO_uart_init+0xc0>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d117      	bne.n	80007d4 <MCAL_GPIO_uart_init+0xb0>
		gpio_config.GPIO_PIN_NUMBER = GPIO_PIN10;
 80007a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a8:	813b      	strh	r3, [r7, #8]
		gpio_config.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80007aa:	2304      	movs	r3, #4
 80007ac:	817b      	strh	r3, [r7, #10]
		gpio_config.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 80007ae:	2301      	movs	r3, #1
 80007b0:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOB, &gpio_config);
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MCAL_GPIO_uart_init+0xc4>)
 80007ba:	f7ff fe63 	bl	8000484 <MCAL_GPIO_INIT>
		gpio_config.GPIO_PIN_NUMBER = GPIO_PIN11;
 80007be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c2:	813b      	strh	r3, [r7, #8]
		gpio_config.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 80007c4:	2301      	movs	r3, #1
 80007c6:	817b      	strh	r3, [r7, #10]
		MCAL_GPIO_INIT(GPIOB, &gpio_config);
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MCAL_GPIO_uart_init+0xc4>)
 80007d0:	f7ff fe58 	bl	8000484 <MCAL_GPIO_INIT>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40013800 	.word	0x40013800
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40004400 	.word	0x40004400
 80007e8:	40010c00 	.word	0x40010c00

080007ec <MCAL_uart_send>:
void MCAL_uart_send(UART_typedef * UARTx,uint16_t *TX_buffer ,  Polling_mechanism polling)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	4613      	mov	r3, r2
 80007f8:	71fb      	strb	r3, [r7, #7]


	if(polling == polling_enable)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d106      	bne.n	800080e <MCAL_uart_send+0x22>
	{
		while(!((UARTx->SR)&(1<<7)));
 8000800:	bf00      	nop
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f9      	beq.n	8000802 <MCAL_uart_send+0x16>

	}
	else

	{  //8bit
		UARTx->DR = (*TX_buffer & (uint8_t)0xff);
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	605a      	str	r2, [r3, #4]


	}


}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
	...

08000824 <MCAL_uart_recieve>:
void MCAL_uart_recieve(UART_typedef * UARTx,uint16_t *RX_buffer, Polling_mechanism polling)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]


	if(polling == polling_enable)
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d106      	bne.n	8000846 <MCAL_uart_recieve+0x22>
		{
			while(!((UARTx->SR)&(1<<5)));
 8000838:	bf00      	nop
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f9      	beq.n	800083a <MCAL_uart_recieve+0x16>
	}

	else
		{

		if(Global_UART_Config->uart_parity == uart_parity_none)
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MCAL_uart_recieve+0x58>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	7a1b      	ldrb	r3, [r3, #8]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d107      	bne.n	8000860 <MCAL_uart_recieve+0x3c>

			{
				*((uint16_t*)RX_buffer) = (UARTx->DR & (uint8_t)(0xff));
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	b29b      	uxth	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	b29a      	uxth	r2, r3
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	801a      	strh	r2, [r3, #0]


	}


}
 800085e:	e007      	b.n	8000870 <MCAL_uart_recieve+0x4c>
			*((uint16_t*)RX_buffer) = (UARTx->DR & (uint8_t)(0x7f));
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800086a:	b29a      	uxth	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	801a      	strh	r2, [r3, #0]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000020 	.word	0x20000020

08000880 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	/* USART1 global interrupt */
	Global_UART_Config->P_IRQ_callback();
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <USART1_IRQHandler+0x10>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	4798      	blx	r3
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000020 	.word	0x20000020

08000894 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	/* USART2 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <USART2_IRQHandler+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	4798      	blx	r3
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000020 	.word	0x20000020

080008a8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	/* USART3 global interrupt */
	Global_UART_Config->P_IRQ_callback ();
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <USART3_IRQHandler+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	4798      	blx	r3
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000020 	.word	0x20000020

080008bc <__libc_init_array>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	2600      	movs	r6, #0
 80008c0:	4d0c      	ldr	r5, [pc, #48]	; (80008f4 <__libc_init_array+0x38>)
 80008c2:	4c0d      	ldr	r4, [pc, #52]	; (80008f8 <__libc_init_array+0x3c>)
 80008c4:	1b64      	subs	r4, r4, r5
 80008c6:	10a4      	asrs	r4, r4, #2
 80008c8:	42a6      	cmp	r6, r4
 80008ca:	d109      	bne.n	80008e0 <__libc_init_array+0x24>
 80008cc:	f000 f81a 	bl	8000904 <_init>
 80008d0:	2600      	movs	r6, #0
 80008d2:	4d0a      	ldr	r5, [pc, #40]	; (80008fc <__libc_init_array+0x40>)
 80008d4:	4c0a      	ldr	r4, [pc, #40]	; (8000900 <__libc_init_array+0x44>)
 80008d6:	1b64      	subs	r4, r4, r5
 80008d8:	10a4      	asrs	r4, r4, #2
 80008da:	42a6      	cmp	r6, r4
 80008dc:	d105      	bne.n	80008ea <__libc_init_array+0x2e>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e4:	4798      	blx	r3
 80008e6:	3601      	adds	r6, #1
 80008e8:	e7ee      	b.n	80008c8 <__libc_init_array+0xc>
 80008ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ee:	4798      	blx	r3
 80008f0:	3601      	adds	r6, #1
 80008f2:	e7f2      	b.n	80008da <__libc_init_array+0x1e>
 80008f4:	08000948 	.word	0x08000948
 80008f8:	08000948 	.word	0x08000948
 80008fc:	08000948 	.word	0x08000948
 8000900:	0800094c 	.word	0x0800094c

08000904 <_init>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr

08000910 <_fini>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	bf00      	nop
 8000914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000916:	bc08      	pop	{r3}
 8000918:	469e      	mov	lr, r3
 800091a:	4770      	bx	lr
