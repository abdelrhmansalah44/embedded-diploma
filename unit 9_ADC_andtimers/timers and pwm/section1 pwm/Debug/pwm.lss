
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000382  2**0
                  ALLOC
  2 .stab         00000714  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009d5  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  74:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <pwm_init>:
#include "pwm.h"
pwm_config_t *global_cnfg;


void pwm_init(pwm_config_t *configuration)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <pwm_init+0x6>
  82:	0f 92       	push	r0
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	9b 83       	std	Y+3, r25	; 0x03
  8a:	8a 83       	std	Y+2, r24	; 0x02
	E_STATUS_t val = OK;
  8c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_PTR == configuration)
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
  90:	9b 81       	ldd	r25, Y+3	; 0x03
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	19 f4       	brne	.+6      	; 0x9c <pwm_init+0x20>
	{
		val = NOK;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	89 83       	std	Y+1, r24	; 0x01
  9a:	6b c0       	rjmp	.+214    	; 0x172 <pwm_init+0xf6>
	}
	else
	{
		global_cnfg = configuration;
  9c:	8a 81       	ldd	r24, Y+2	; 0x02
  9e:	9b 81       	ldd	r25, Y+3	; 0x03
  a0:	90 93 61 00 	sts	0x0061, r25
  a4:	80 93 60 00 	sts	0x0060, r24
		if( (global_cnfg->pwm_mode ==pwm_fastmode) || (global_cnfg->pwm_mode ==pwm_phasecorrect) )
		{

			TCCR0 |=global_cnfg->pwm_mode;
  a8:	a3 e5       	ldi	r26, 0x53	; 83
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e3 e5       	ldi	r30, 0x53	; 83
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	20 81       	ld	r18, Z
  b2:	e0 91 60 00 	lds	r30, 0x0060
  b6:	f0 91 61 00 	lds	r31, 0x0061
  ba:	80 81       	ld	r24, Z
  bc:	91 81       	ldd	r25, Z+1	; 0x01
  be:	82 2b       	or	r24, r18
  c0:	8c 93       	st	X, r24
			val =OK;
  c2:	19 82       	std	Y+1, r1	; 0x01
			val= NOK;
		}



		if((global_cnfg->pwm_clk ==No_clck_src) || (global_cnfg->pwm_clk ==Prescaling_8))
  c4:	e0 91 60 00 	lds	r30, 0x0060
  c8:	f0 91 61 00 	lds	r31, 0x0061
  cc:	82 81       	ldd	r24, Z+2	; 0x02
  ce:	93 81       	ldd	r25, Z+3	; 0x03
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	49 f0       	breq	.+18     	; 0xe6 <pwm_init+0x6a>
  d4:	e0 91 60 00 	lds	r30, 0x0060
  d8:	f0 91 61 00 	lds	r31, 0x0061
  dc:	82 81       	ldd	r24, Z+2	; 0x02
  de:	93 81       	ldd	r25, Z+3	; 0x03
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	91 05       	cpc	r25, r1
  e4:	79 f4       	brne	.+30     	; 0x104 <pwm_init+0x88>
		{

			TCCR0 |=global_cnfg->pwm_clk;
  e6:	a3 e5       	ldi	r26, 0x53	; 83
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e3 e5       	ldi	r30, 0x53	; 83
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	20 81       	ld	r18, Z
  f0:	e0 91 60 00 	lds	r30, 0x0060
  f4:	f0 91 61 00 	lds	r31, 0x0061
  f8:	82 81       	ldd	r24, Z+2	; 0x02
  fa:	93 81       	ldd	r25, Z+3	; 0x03
  fc:	82 2b       	or	r24, r18
  fe:	8c 93       	st	X, r24
			val =OK;
 100:	19 82       	std	Y+1, r1	; 0x01
 102:	02 c0       	rjmp	.+4      	; 0x108 <pwm_init+0x8c>
		}
		else
		{
			val= NOK;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	89 83       	std	Y+1, r24	; 0x01
		}


		if((global_cnfg->pwm_output_mode ==pwm_fastmode_inverting) || (global_cnfg->pwm_output_mode ==pwm_fastmode_noninverting) || (global_cnfg->pwm_output_mode ==pwm_phase_noninverting) || (global_cnfg->pwm_output_mode ==pwm_phase_inverting) )
 108:	e0 91 60 00 	lds	r30, 0x0060
 10c:	f0 91 61 00 	lds	r31, 0x0061
 110:	80 85       	ldd	r24, Z+8	; 0x08
 112:	91 85       	ldd	r25, Z+9	; 0x09
 114:	80 33       	cpi	r24, 0x30	; 48
 116:	91 05       	cpc	r25, r1
 118:	d9 f0       	breq	.+54     	; 0x150 <pwm_init+0xd4>
 11a:	e0 91 60 00 	lds	r30, 0x0060
 11e:	f0 91 61 00 	lds	r31, 0x0061
 122:	80 85       	ldd	r24, Z+8	; 0x08
 124:	91 85       	ldd	r25, Z+9	; 0x09
 126:	80 32       	cpi	r24, 0x20	; 32
 128:	91 05       	cpc	r25, r1
 12a:	91 f0       	breq	.+36     	; 0x150 <pwm_init+0xd4>
 12c:	e0 91 60 00 	lds	r30, 0x0060
 130:	f0 91 61 00 	lds	r31, 0x0061
 134:	80 85       	ldd	r24, Z+8	; 0x08
 136:	91 85       	ldd	r25, Z+9	; 0x09
 138:	80 32       	cpi	r24, 0x20	; 32
 13a:	91 05       	cpc	r25, r1
 13c:	49 f0       	breq	.+18     	; 0x150 <pwm_init+0xd4>
 13e:	e0 91 60 00 	lds	r30, 0x0060
 142:	f0 91 61 00 	lds	r31, 0x0061
 146:	80 85       	ldd	r24, Z+8	; 0x08
 148:	91 85       	ldd	r25, Z+9	; 0x09
 14a:	80 33       	cpi	r24, 0x30	; 48
 14c:	91 05       	cpc	r25, r1
 14e:	79 f4       	brne	.+30     	; 0x16e <pwm_init+0xf2>
		{

			TCCR0 |=global_cnfg->pwm_output_mode;
 150:	a3 e5       	ldi	r26, 0x53	; 83
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e3 e5       	ldi	r30, 0x53	; 83
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	20 81       	ld	r18, Z
 15a:	e0 91 60 00 	lds	r30, 0x0060
 15e:	f0 91 61 00 	lds	r31, 0x0061
 162:	80 85       	ldd	r24, Z+8	; 0x08
 164:	91 85       	ldd	r25, Z+9	; 0x09
 166:	82 2b       	or	r24, r18
 168:	8c 93       	st	X, r24
			val =OK;
 16a:	19 82       	std	Y+1, r1	; 0x01
 16c:	02 c0       	rjmp	.+4      	; 0x172 <pwm_init+0xf6>
		}
		else
		{
			val= NOK;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 83       	std	Y+1, r24	; 0x01

	TCCR0 |= global_cnfg->pwm_mode | global_cnfg->pwm_clk | global_cnfg->pwm_output_mode ;

	set_bit(TCCR0,5);

}
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	cf 91       	pop	r28
 17a:	df 91       	pop	r29
 17c:	08 95       	ret

0000017e <pwm_stop>:

void pwm_stop()
{
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62

		clear_bit(TCCR0,CS00);
 186:	a3 e5       	ldi	r26, 0x53	; 83
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e3 e5       	ldi	r30, 0x53	; 83
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	8c 93       	st	X, r24
		clear_bit(TCCR0,CS01);
 194:	a3 e5       	ldi	r26, 0x53	; 83
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e3 e5       	ldi	r30, 0x53	; 83
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8d 7f       	andi	r24, 0xFD	; 253
 1a0:	8c 93       	st	X, r24
		clear_bit(TCCR0,CS02);
 1a2:	a3 e5       	ldi	r26, 0x53	; 83
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e3 e5       	ldi	r30, 0x53	; 83
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8b 7f       	andi	r24, 0xFB	; 251
 1ae:	8c 93       	st	X, r24

}
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <pwm_dutycycle>:

void pwm_dutycycle(unsigned char duty_cycle)
{
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	29 97       	sbiw	r28, 0x09	; 9
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	89 83       	std	Y+1, r24	; 0x01


	if(global_cnfg->pwm_output_mode ==pwm_phase_noninverting)
 1cc:	e0 91 60 00 	lds	r30, 0x0060
 1d0:	f0 91 61 00 	lds	r31, 0x0061
 1d4:	80 85       	ldd	r24, Z+8	; 0x08
 1d6:	91 85       	ldd	r25, Z+9	; 0x09
 1d8:	80 32       	cpi	r24, 0x20	; 32
 1da:	91 05       	cpc	r25, r1
 1dc:	79 f5       	brne	.+94     	; 0x23c <pwm_dutycycle+0x86>
		OCR0 = (uint32_t)((duty_cycle*510)/2*100);
 1de:	4c e5       	ldi	r20, 0x5C	; 92
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	5d 83       	std	Y+5, r21	; 0x05
 1e4:	4c 83       	std	Y+4, r20	; 0x04
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	28 2f       	mov	r18, r24
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	8e ef       	ldi	r24, 0xFE	; 254
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	fc 01       	movw	r30, r24
 1f2:	2e 9f       	mul	r18, r30
 1f4:	c0 01       	movw	r24, r0
 1f6:	2f 9f       	mul	r18, r31
 1f8:	90 0d       	add	r25, r0
 1fa:	3e 9f       	mul	r19, r30
 1fc:	90 0d       	add	r25, r0
 1fe:	11 24       	eor	r1, r1
 200:	9f 83       	std	Y+7, r25	; 0x07
 202:	8e 83       	std	Y+6, r24	; 0x06
 204:	4e 81       	ldd	r20, Y+6	; 0x06
 206:	5f 81       	ldd	r21, Y+7	; 0x07
 208:	55 23       	and	r21, r21
 20a:	2c f4       	brge	.+10     	; 0x216 <pwm_dutycycle+0x60>
 20c:	8e 81       	ldd	r24, Y+6	; 0x06
 20e:	9f 81       	ldd	r25, Y+7	; 0x07
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	9f 83       	std	Y+7, r25	; 0x07
 214:	8e 83       	std	Y+6, r24	; 0x06
 216:	8e 81       	ldd	r24, Y+6	; 0x06
 218:	9f 81       	ldd	r25, Y+7	; 0x07
 21a:	95 95       	asr	r25
 21c:	87 95       	ror	r24
 21e:	9c 01       	movw	r18, r24
 220:	84 e6       	ldi	r24, 0x64	; 100
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	2e 9f       	mul	r18, r30
 228:	c0 01       	movw	r24, r0
 22a:	2f 9f       	mul	r18, r31
 22c:	90 0d       	add	r25, r0
 22e:	3e 9f       	mul	r19, r30
 230:	90 0d       	add	r25, r0
 232:	11 24       	eor	r1, r1
 234:	ec 81       	ldd	r30, Y+4	; 0x04
 236:	fd 81       	ldd	r31, Y+5	; 0x05
 238:	80 83       	st	Z, r24
 23a:	39 c0       	rjmp	.+114    	; 0x2ae <pwm_dutycycle+0xf8>
	else if(global_cnfg->pwm_output_mode ==pwm_phase_inverting)
 23c:	e0 91 60 00 	lds	r30, 0x0060
 240:	f0 91 61 00 	lds	r31, 0x0061
 244:	80 85       	ldd	r24, Z+8	; 0x08
 246:	91 85       	ldd	r25, Z+9	; 0x09
 248:	80 33       	cpi	r24, 0x30	; 48
 24a:	91 05       	cpc	r25, r1
 24c:	81 f5       	brne	.+96     	; 0x2ae <pwm_dutycycle+0xf8>
		OCR0 = (uint32_t)((510-510*duty_cycle)/2*100);
 24e:	4c e5       	ldi	r20, 0x5C	; 92
 250:	50 e0       	ldi	r21, 0x00	; 0
 252:	5b 83       	std	Y+3, r21	; 0x03
 254:	4a 83       	std	Y+2, r20	; 0x02
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	28 2f       	mov	r18, r24
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	9e ef       	ldi	r25, 0xFE	; 254
 260:	fc 01       	movw	r30, r24
 262:	2e 9f       	mul	r18, r30
 264:	c0 01       	movw	r24, r0
 266:	2f 9f       	mul	r18, r31
 268:	90 0d       	add	r25, r0
 26a:	3e 9f       	mul	r19, r30
 26c:	90 0d       	add	r25, r0
 26e:	11 24       	eor	r1, r1
 270:	82 50       	subi	r24, 0x02	; 2
 272:	9e 4f       	sbci	r25, 0xFE	; 254
 274:	99 87       	std	Y+9, r25	; 0x09
 276:	88 87       	std	Y+8, r24	; 0x08
 278:	48 85       	ldd	r20, Y+8	; 0x08
 27a:	59 85       	ldd	r21, Y+9	; 0x09
 27c:	55 23       	and	r21, r21
 27e:	2c f4       	brge	.+10     	; 0x28a <pwm_dutycycle+0xd4>
 280:	88 85       	ldd	r24, Y+8	; 0x08
 282:	99 85       	ldd	r25, Y+9	; 0x09
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	99 87       	std	Y+9, r25	; 0x09
 288:	88 87       	std	Y+8, r24	; 0x08
 28a:	88 85       	ldd	r24, Y+8	; 0x08
 28c:	99 85       	ldd	r25, Y+9	; 0x09
 28e:	95 95       	asr	r25
 290:	87 95       	ror	r24
 292:	9c 01       	movw	r18, r24
 294:	84 e6       	ldi	r24, 0x64	; 100
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	2e 9f       	mul	r18, r30
 29c:	c0 01       	movw	r24, r0
 29e:	2f 9f       	mul	r18, r31
 2a0:	90 0d       	add	r25, r0
 2a2:	3e 9f       	mul	r19, r30
 2a4:	90 0d       	add	r25, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	ea 81       	ldd	r30, Y+2	; 0x02
 2aa:	fb 81       	ldd	r31, Y+3	; 0x03
 2ac:	80 83       	st	Z, r24
	else{

	}

}
 2ae:	29 96       	adiw	r28, 0x09	; 9
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <main>:
 */

#include "pwm.h"
#define F_CPU 8000000
int main()
{
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	2a 97       	sbiw	r28, 0x0a	; 10
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	cd bf       	out	0x3d, r28	; 61
	pwm_config_t cnfg;

	DDRB |=(1<<3);
 2d4:	a7 e3       	ldi	r26, 0x37	; 55
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e7 e3       	ldi	r30, 0x37	; 55
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 60       	ori	r24, 0x08	; 8
 2e0:	8c 93       	st	X, r24

	cnfg.pwm_mode =pwm_fastmode;
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
	cnfg.pwm_clk = Prescaling_8;
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	9c 83       	std	Y+4, r25	; 0x04
 2f0:	8b 83       	std	Y+3, r24	; 0x03
	cnfg.pwm_output_mode =pwm_fastmode_noninverting;
 2f2:	80 e2       	ldi	r24, 0x20	; 32
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	9a 87       	std	Y+10, r25	; 0x0a
 2f8:	89 87       	std	Y+9, r24	; 0x09
	pwm_init(&cnfg);
 2fa:	ce 01       	movw	r24, r28
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	0e 94 3e 00 	call	0x7c	; 0x7c <pwm_init>


	while(1)
	{

	pwm_dutycycle(50);
 302:	82 e3       	ldi	r24, 0x32	; 50
 304:	0e 94 db 00 	call	0x1b6	; 0x1b6 <pwm_dutycycle>
 308:	fc cf       	rjmp	.-8      	; 0x302 <main+0x42>

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
