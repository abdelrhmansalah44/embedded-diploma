
DRIVERS2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e18  08000e18  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000e18  08000e18  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e18  08000e18  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e18  08000e18  00010e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000004  08000e24  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000e24  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000115f  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000604  00000000  00000000  000211cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000a10  00000000  00000000  000217d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001b0  00000000  00000000  000221e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000168  00000000  00000000  00022398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000d81  00000000  00000000  00022500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002196  00000000  00000000  00023281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009ca7  00000000  00000000  00025417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000055c  00000000  00000000  0002f0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd8 	.word	0x08000dd8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000dd8 	.word	0x08000dd8

08000170 <delay_ms>:

#include "../HAL.c/inc/lcd.h"

GPIO_CONFIGURATION pincnfg;

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	pincnfg.GPIO_PIN_NUMBER = RS_SWITCH;
 80001b0:	4b52      	ldr	r3, [pc, #328]	; (80002fc <LCD_GPIO_init+0x150>)
 80001b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b6:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 80001b8:	4b50      	ldr	r3, [pc, #320]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80001be:	4b4f      	ldr	r3, [pc, #316]	; (80002fc <LCD_GPIO_init+0x150>)
 80001c0:	2204      	movs	r2, #4
 80001c2:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 80001c4:	494d      	ldr	r1, [pc, #308]	; (80002fc <LCD_GPIO_init+0x150>)
 80001c6:	484e      	ldr	r0, [pc, #312]	; (8000300 <LCD_GPIO_init+0x154>)
 80001c8:	f000 fd32 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = RW_SWITCH;
 80001cc:	4b4b      	ldr	r3, [pc, #300]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001d2:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 80001d4:	4b49      	ldr	r3, [pc, #292]	; (80002fc <LCD_GPIO_init+0x150>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80001da:	4b48      	ldr	r3, [pc, #288]	; (80002fc <LCD_GPIO_init+0x150>)
 80001dc:	2204      	movs	r2, #4
 80001de:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 80001e0:	4946      	ldr	r1, [pc, #280]	; (80002fc <LCD_GPIO_init+0x150>)
 80001e2:	4847      	ldr	r0, [pc, #284]	; (8000300 <LCD_GPIO_init+0x154>)
 80001e4:	f000 fd24 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = EN_SWITCH;
 80001e8:	4b44      	ldr	r3, [pc, #272]	; (80002fc <LCD_GPIO_init+0x150>)
 80001ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ee:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 80001f0:	4b42      	ldr	r3, [pc, #264]	; (80002fc <LCD_GPIO_init+0x150>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80001f6:	4b41      	ldr	r3, [pc, #260]	; (80002fc <LCD_GPIO_init+0x150>)
 80001f8:	2204      	movs	r2, #4
 80001fa:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 80001fc:	493f      	ldr	r1, [pc, #252]	; (80002fc <LCD_GPIO_init+0x150>)
 80001fe:	4840      	ldr	r0, [pc, #256]	; (8000300 <LCD_GPIO_init+0x154>)
 8000200:	f000 fd16 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = GPIO_PIN0;
 8000204:	4b3d      	ldr	r3, [pc, #244]	; (80002fc <LCD_GPIO_init+0x150>)
 8000206:	2201      	movs	r2, #1
 8000208:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 800020a:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <LCD_GPIO_init+0x150>)
 800020c:	2201      	movs	r2, #1
 800020e:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000210:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <LCD_GPIO_init+0x150>)
 8000212:	2204      	movs	r2, #4
 8000214:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 8000216:	4939      	ldr	r1, [pc, #228]	; (80002fc <LCD_GPIO_init+0x150>)
 8000218:	4839      	ldr	r0, [pc, #228]	; (8000300 <LCD_GPIO_init+0x154>)
 800021a:	f000 fd09 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = GPIO_PIN1;
 800021e:	4b37      	ldr	r3, [pc, #220]	; (80002fc <LCD_GPIO_init+0x150>)
 8000220:	2202      	movs	r2, #2
 8000222:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000224:	4b35      	ldr	r3, [pc, #212]	; (80002fc <LCD_GPIO_init+0x150>)
 8000226:	2201      	movs	r2, #1
 8000228:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 800022a:	4b34      	ldr	r3, [pc, #208]	; (80002fc <LCD_GPIO_init+0x150>)
 800022c:	2204      	movs	r2, #4
 800022e:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 8000230:	4932      	ldr	r1, [pc, #200]	; (80002fc <LCD_GPIO_init+0x150>)
 8000232:	4833      	ldr	r0, [pc, #204]	; (8000300 <LCD_GPIO_init+0x154>)
 8000234:	f000 fcfc 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = GPIO_PIN2;
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <LCD_GPIO_init+0x150>)
 800023a:	2204      	movs	r2, #4
 800023c:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 800023e:	4b2f      	ldr	r3, [pc, #188]	; (80002fc <LCD_GPIO_init+0x150>)
 8000240:	2201      	movs	r2, #1
 8000242:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000244:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <LCD_GPIO_init+0x150>)
 8000246:	2204      	movs	r2, #4
 8000248:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 800024a:	492c      	ldr	r1, [pc, #176]	; (80002fc <LCD_GPIO_init+0x150>)
 800024c:	482c      	ldr	r0, [pc, #176]	; (8000300 <LCD_GPIO_init+0x154>)
 800024e:	f000 fcef 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = GPIO_PIN3;
 8000252:	4b2a      	ldr	r3, [pc, #168]	; (80002fc <LCD_GPIO_init+0x150>)
 8000254:	2208      	movs	r2, #8
 8000256:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000258:	4b28      	ldr	r3, [pc, #160]	; (80002fc <LCD_GPIO_init+0x150>)
 800025a:	2201      	movs	r2, #1
 800025c:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 800025e:	4b27      	ldr	r3, [pc, #156]	; (80002fc <LCD_GPIO_init+0x150>)
 8000260:	2204      	movs	r2, #4
 8000262:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 8000264:	4925      	ldr	r1, [pc, #148]	; (80002fc <LCD_GPIO_init+0x150>)
 8000266:	4826      	ldr	r0, [pc, #152]	; (8000300 <LCD_GPIO_init+0x154>)
 8000268:	f000 fce2 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = GPIO_PIN4;
 800026c:	4b23      	ldr	r3, [pc, #140]	; (80002fc <LCD_GPIO_init+0x150>)
 800026e:	2210      	movs	r2, #16
 8000270:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 8000272:	4b22      	ldr	r3, [pc, #136]	; (80002fc <LCD_GPIO_init+0x150>)
 8000274:	2201      	movs	r2, #1
 8000276:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000278:	4b20      	ldr	r3, [pc, #128]	; (80002fc <LCD_GPIO_init+0x150>)
 800027a:	2204      	movs	r2, #4
 800027c:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 800027e:	491f      	ldr	r1, [pc, #124]	; (80002fc <LCD_GPIO_init+0x150>)
 8000280:	481f      	ldr	r0, [pc, #124]	; (8000300 <LCD_GPIO_init+0x154>)
 8000282:	f000 fcd5 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = GPIO_PIN5;
 8000286:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <LCD_GPIO_init+0x150>)
 8000288:	2220      	movs	r2, #32
 800028a:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <LCD_GPIO_init+0x150>)
 800028e:	2201      	movs	r2, #1
 8000290:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <LCD_GPIO_init+0x150>)
 8000294:	2204      	movs	r2, #4
 8000296:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 8000298:	4918      	ldr	r1, [pc, #96]	; (80002fc <LCD_GPIO_init+0x150>)
 800029a:	4819      	ldr	r0, [pc, #100]	; (8000300 <LCD_GPIO_init+0x154>)
 800029c:	f000 fcc8 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = GPIO_PIN6;
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <LCD_GPIO_init+0x150>)
 80002a2:	2240      	movs	r2, #64	; 0x40
 80002a4:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <LCD_GPIO_init+0x150>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <LCD_GPIO_init+0x150>)
 80002ae:	2204      	movs	r2, #4
 80002b0:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 80002b2:	4912      	ldr	r1, [pc, #72]	; (80002fc <LCD_GPIO_init+0x150>)
 80002b4:	4812      	ldr	r0, [pc, #72]	; (8000300 <LCD_GPIO_init+0x154>)
 80002b6:	f000 fcbb 	bl	8000c30 <MCAL_GPIO_INIT>

	pincnfg.GPIO_PIN_NUMBER = GPIO_PIN7;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <LCD_GPIO_init+0x150>)
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	801a      	strh	r2, [r3, #0]
	pincnfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_10MHz;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <LCD_GPIO_init+0x150>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	809a      	strh	r2, [r3, #4]
	pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <LCD_GPIO_init+0x150>)
 80002c8:	2204      	movs	r2, #4
 80002ca:	805a      	strh	r2, [r3, #2]
	MCAL_GPIO_INIT(LCD_CTRL, &pincnfg);
 80002cc:	490b      	ldr	r1, [pc, #44]	; (80002fc <LCD_GPIO_init+0x150>)
 80002ce:	480c      	ldr	r0, [pc, #48]	; (8000300 <LCD_GPIO_init+0x154>)
 80002d0:	f000 fcae 	bl	8000c30 <MCAL_GPIO_INIT>




	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH,GPIO_PIN_true );
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002da:	4809      	ldr	r0, [pc, #36]	; (8000300 <LCD_GPIO_init+0x154>)
 80002dc:	f000 fd33 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH,GPIO_PIN_true );
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <LCD_GPIO_init+0x154>)
 80002e8:	f000 fd2d 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH,GPIO_PIN_true );
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <LCD_GPIO_init+0x154>)
 80002f4:	f000 fd27 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000020 	.word	0x20000020
 8000300:	40010800 	.word	0x40010800

08000304 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 f857 	bl	80003bc <LCD_WRITE_COMMAND>
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	MCAL_GPIO_WRITE_PIN(LCD_CTRL,EN_SWITCH,GPIO_PIN_true);
 8000318:	2201      	movs	r2, #1
 800031a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031e:	4807      	ldr	r0, [pc, #28]	; (800033c <LCD_lcd_kick+0x28>)
 8000320:	f000 fd11 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>
	delay_ms(50);
 8000324:	2032      	movs	r0, #50	; 0x32
 8000326:	f7ff ff23 	bl	8000170 <delay_ms>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL,EN_SWITCH,GPIO_PIN_false);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000330:	4802      	ldr	r0, [pc, #8]	; (800033c <LCD_lcd_kick+0x28>)
 8000332:	f000 fd08 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40010800 	.word	0x40010800

08000340 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	460a      	mov	r2, r1
 800034a:	71fb      	strb	r3, [r7, #7]
 800034c:	4613      	mov	r3, r2
 800034e:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d108      	bne.n	8000368 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000356:	79bb      	ldrb	r3, [r7, #6]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	d805      	bhi.n	8000368 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	3b80      	subs	r3, #128	; 0x80
 8000360:	b2db      	uxtb	r3, r3
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f82a 	bl	80003bc <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b02      	cmp	r3, #2
 800036c:	d108      	bne.n	8000380 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d805      	bhi.n	8000380 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	3b40      	subs	r3, #64	; 0x40
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f81e 	bl	80003bc <LCD_WRITE_COMMAND>
		}
	}
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <LCD_INIT>:

void LCD_INIT() {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	delay_ms(20);
 800038c:	2014      	movs	r0, #20
 800038e:	f7ff feef 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000392:	f7ff ff0b 	bl	80001ac <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000396:	200f      	movs	r0, #15
 8000398:	f7ff feea 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 800039c:	f7ff ffb2 	bl	8000304 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80003a0:	2038      	movs	r0, #56	; 0x38
 80003a2:	f000 f80b 	bl	80003bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80003a6:	2006      	movs	r0, #6
 80003a8:	f000 f808 	bl	80003bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80003ac:	2080      	movs	r0, #128	; 0x80
 80003ae:	f000 f805 	bl	80003bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003b2:	200f      	movs	r0, #15
 80003b4:	f000 f802 	bl	80003bc <LCD_WRITE_COMMAND>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_false);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WRITE_PORT(LCD_CTRL, command);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	4619      	mov	r1, r3
 80003ca:	480c      	ldr	r0, [pc, #48]	; (80003fc <LCD_WRITE_COMMAND+0x40>)
 80003cc:	f000 fcd2 	bl	8000d74 <MCAL_GPIO_WRITE_PORT>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_false);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d6:	4809      	ldr	r0, [pc, #36]	; (80003fc <LCD_WRITE_COMMAND+0x40>)
 80003d8:	f000 fcb5 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_false);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e2:	4806      	ldr	r0, [pc, #24]	; (80003fc <LCD_WRITE_COMMAND+0x40>)
 80003e4:	f000 fcaf 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f7ff fec1 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003ee:	f7ff ff91 	bl	8000314 <LCD_lcd_kick>

}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40010800 	.word	0x40010800

08000400 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITE_PORT(LCD_CTRL, character);
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	4619      	mov	r1, r3
 800040e:	480c      	ldr	r0, [pc, #48]	; (8000440 <LCD_WRITE_CHAR+0x40>)
 8000410:	f000 fcb0 	bl	8000d74 <MCAL_GPIO_WRITE_PORT>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_false);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800041a:	4809      	ldr	r0, [pc, #36]	; (8000440 <LCD_WRITE_CHAR+0x40>)
 800041c:	f000 fc93 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_true);
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <LCD_WRITE_CHAR+0x40>)
 8000428:	f000 fc8d 	bl	8000d46 <MCAL_GPIO_WRITE_PIN>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800042c:	2001      	movs	r0, #1
 800042e:	f7ff fe9f 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 8000432:	f7ff ff6f 	bl	8000314 <LCD_lcd_kick>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010800 	.word	0x40010800

08000444 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000450:	e01c      	b.n	800048c <LCD_WRITE_STRING+0x48>
		count++;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	3301      	adds	r3, #1
 8000456:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ffcd 	bl	8000400 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b10      	cmp	r3, #16
 800046a:	d104      	bne.n	8000476 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 800046c:	2100      	movs	r1, #0
 800046e:	2002      	movs	r0, #2
 8000470:	f7ff ff66 	bl	8000340 <LCD_GOTO_XY>
 8000474:	e00a      	b.n	800048c <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b20      	cmp	r3, #32
 800047a:	d107      	bne.n	800048c <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 800047c:	f7ff ff42 	bl	8000304 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000480:	2100      	movs	r1, #0
 8000482:	2001      	movs	r0, #1
 8000484:	f7ff ff5c 	bl	8000340 <LCD_GOTO_XY>
			count = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1de      	bne.n	8000452 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <my_wait>:
#include "stm32_f103c6_EXTI_driver.h"
#include "stm32_f103c6_gpio_driver.h"
#include "stdio.h"

int flag=1;
void my_wait(int x){
 800049e:	b480      	push	{r7}
 80004a0:	b085      	sub	sp, #20
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	for(i = 0; i < x; i++){
 80004a6:	2300      	movs	r3, #0
 80004a8:	81fb      	strh	r3, [r7, #14]
 80004aa:	e00b      	b.n	80004c4 <my_wait+0x26>
		for(j = 0; j < 255; j++);
 80004ac:	2300      	movs	r3, #0
 80004ae:	81bb      	strh	r3, [r7, #12]
 80004b0:	e002      	b.n	80004b8 <my_wait+0x1a>
 80004b2:	89bb      	ldrh	r3, [r7, #12]
 80004b4:	3301      	adds	r3, #1
 80004b6:	81bb      	strh	r3, [r7, #12]
 80004b8:	89bb      	ldrh	r3, [r7, #12]
 80004ba:	2bfe      	cmp	r3, #254	; 0xfe
 80004bc:	d9f9      	bls.n	80004b2 <my_wait+0x14>
	for(i = 0; i < x; i++){
 80004be:	89fb      	ldrh	r3, [r7, #14]
 80004c0:	3301      	adds	r3, #1
 80004c2:	81fb      	strh	r3, [r7, #14]
 80004c4:	89fb      	ldrh	r3, [r7, #14]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	dcef      	bgt.n	80004ac <my_wait+0xe>
	}
}
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <EXTI_callback9>:

void EXTI_callback9()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	flag = 1;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI_callback9+0x1c>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 IS DONE");
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <EXTI_callback9+0x20>)
 80004e4:	f7ff ffae 	bl	8000444 <LCD_WRITE_STRING>
	my_wait(100);
 80004e8:	2064      	movs	r0, #100	; 0x64
 80004ea:	f7ff ffd8 	bl	800049e <my_wait>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000000 	.word	0x20000000
 80004f8:	08000df0 	.word	0x08000df0

080004fc <clock_init>:

void clock_init()
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

	RCC_AFIO_ENABLE;
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <clock_init+0x30>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <clock_init+0x30>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLOCK_ENABLE;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <clock_init+0x30>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <clock_init+0x30>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_ENABLE;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <clock_init+0x30>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <clock_init+0x30>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000

08000530 <EXTI_init>:

void EXTI_init()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
	EXTI_PINCONFIG pinconfig;
	pinconfig.EXTI_PIN=EXTI9PB9;
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <EXTI_init+0x30>)
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	ca07      	ldmia	r2, {r0, r1, r2}
 800053e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	pinconfig.trigger_case = trigger_rise;
 8000542:	2301      	movs	r3, #1
 8000544:	833b      	strh	r3, [r7, #24]
	pinconfig.IRQ_enable =EXTI_PIN_ENABLE;
 8000546:	2301      	movs	r3, #1
 8000548:	837b      	strh	r3, [r7, #26]
	pinconfig.P_IRQ_CallBack= EXTI_callback9;
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <EXTI_init+0x34>)
 800054c:	61fb      	str	r3, [r7, #28]
	MCAL_EXTI_GPIO_INIT(&pinconfig);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f998 	bl	8000888 <MCAL_EXTI_GPIO_INIT>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	08000e04 	.word	0x08000e04
 8000564:	080004d9 	.word	0x080004d9

08000568 <main>:

int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	clock_init();
 800056c:	f7ff ffc6 	bl	80004fc <clock_init>
    LCD_INIT();
 8000570:	f7ff ff0a 	bl	8000388 <LCD_INIT>

//    LCD_GOTO_XY(1,0);
    LCD_WRITE_STRING("welcome");
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <main+0x34>)
 8000576:	f7ff ff65 	bl	8000444 <LCD_WRITE_STRING>
    my_wait(1000);
 800057a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057e:	f7ff ff8e 	bl	800049e <my_wait>
    EXTI_init();
 8000582:	f7ff ffd5 	bl	8000530 <EXTI_init>


    while(1)
    {
    	if(flag)
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <main+0x38>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0fb      	beq.n	8000586 <main+0x1e>
    	{
    		LCD_clear_screen();
 800058e:	f7ff feb9 	bl	8000304 <LCD_clear_screen>
    		flag=0;
 8000592:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <main+0x38>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
    	if(flag)
 8000598:	e7f5      	b.n	8000586 <main+0x1e>
 800059a:	bf00      	nop
 800059c:	08000e10 	.word	0x08000e10
 80005a0:	20000000 	.word	0x20000000

080005a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ae:	490d      	ldr	r1, [pc, #52]	; (80005e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <LoopForever+0xe>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c4:	4c0a      	ldr	r4, [pc, #40]	; (80005f0 <LoopForever+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d2:	f000 fbdd 	bl	8000d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff ffc7 	bl	8000568 <main>

080005da <LoopForever>:

LoopForever:
  b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   r0, =_estack
 80005dc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005e8:	08000e20 	.word	0x08000e20
  ldr r2, =_sbss
 80005ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005f0:	20000064 	.word	0x20000064

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <NVIC_EXTI_ENABLE>:
//               GLOBAL VARIABLES
//******************************************************

void (*GP_IRQ_CallBack[15])(void);

void NVIC_EXTI_ENABLE(uint8_t IRQ) {
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	switch (IRQ) {
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d854      	bhi.n	80006b2 <NVIC_EXTI_ENABLE+0xba>
 8000608:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <NVIC_EXTI_ENABLE+0x18>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000651 	.word	0x08000651
 8000614:	0800065f 	.word	0x0800065f
 8000618:	0800066d 	.word	0x0800066d
 800061c:	0800067b 	.word	0x0800067b
 8000620:	08000689 	.word	0x08000689
 8000624:	08000697 	.word	0x08000697
 8000628:	08000697 	.word	0x08000697
 800062c:	08000697 	.word	0x08000697
 8000630:	08000697 	.word	0x08000697
 8000634:	08000697 	.word	0x08000697
 8000638:	080006a5 	.word	0x080006a5
 800063c:	080006a5 	.word	0x080006a5
 8000640:	080006a5 	.word	0x080006a5
 8000644:	080006a5 	.word	0x080006a5
 8000648:	080006a5 	.word	0x080006a5
 800064c:	080006a5 	.word	0x080006a5

	case EXTI0:
		NVIC_IRQ6_EXTI0_Enable();
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 8000656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065a:	6013      	str	r3, [r2, #0]
		break;
 800065c:	e02a      	b.n	80006b4 <NVIC_EXTI_ENABLE+0xbc>
	case EXTI1:
		NVIC_IRQ7_EXTI1_Enable();
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6013      	str	r3, [r2, #0]
		break;
 800066a:	e023      	b.n	80006b4 <NVIC_EXTI_ENABLE+0xbc>
	case EXTI2:
		NVIC_IRQ8_EXTI2_Enable();
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 8000672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000676:	6013      	str	r3, [r2, #0]
		break;
 8000678:	e01c      	b.n	80006b4 <NVIC_EXTI_ENABLE+0xbc>
	case EXTI3:
		NVIC_IRQ9_EXTI3_Enable();
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000684:	6013      	str	r3, [r2, #0]
		break;
 8000686:	e015      	b.n	80006b4 <NVIC_EXTI_ENABLE+0xbc>

	case EXTI4:
		NVIC_IRQ10_EXTI4_Enable();
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 800068e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000692:	6013      	str	r3, [r2, #0]
		break;
 8000694:	e00e      	b.n	80006b4 <NVIC_EXTI_ENABLE+0xbc>
	case EXTI5:
	case EXTI6:
	case EXTI7:
	case EXTI8:
	case EXTI9:
		NVIC_IRQ23_EXTI5_9_Enable();
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <NVIC_EXTI_ENABLE+0xc8>)
 800069c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006a0:	6013      	str	r3, [r2, #0]
		break;
 80006a2:	e007      	b.n	80006b4 <NVIC_EXTI_ENABLE+0xbc>
	case EXTI11:
	case EXTI12:
	case EXTI13:
	case EXTI14:
	case EXTI15:
		NVIC_IRQ40_EXTI10_15_Enable();
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <NVIC_EXTI_ENABLE+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <NVIC_EXTI_ENABLE+0xcc>)
 80006aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ae:	6013      	str	r3, [r2, #0]
		break;
 80006b0:	e000      	b.n	80006b4 <NVIC_EXTI_ENABLE+0xbc>

	default:
		break;
 80006b2:	bf00      	nop

	}

}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100
 80006c4:	e000e104 	.word	0xe000e104

080006c8 <update>:

	}

}

static void update(EXTI_PINCONFIG *EXTI_pinconfig) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]


	// 1- configure the pin as AFIO floating input
	GPIO_CONFIGURATION g_pin_config;
	g_pin_config.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 80006d0:	2301      	movs	r3, #1
 80006d2:	817b      	strh	r3, [r7, #10]
	g_pin_config.GPIO_PIN_NUMBER = EXTI_pinconfig->EXTI_PIN.GPIO_PIN;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	88db      	ldrh	r3, [r3, #6]
 80006d8:	813b      	strh	r3, [r7, #8]
	MCAL_GPIO_INIT(EXTI_pinconfig->EXTI_PIN.GPIO_PORT, &g_pin_config);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f107 0208 	add.w	r2, r7, #8
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 faa3 	bl	8000c30 <MCAL_GPIO_INIT>

	//2-
	uint8_t AFIO_EXTI_index = (EXTI_pinconfig->EXTI_PIN.EXTI_LINE) / 4;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	889b      	ldrh	r3, [r3, #4]
 80006ee:	089b      	lsrs	r3, r3, #2
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTI_position = ((EXTI_pinconfig->EXTI_PIN.EXTI_LINE) % 4) * 4;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	889b      	ldrh	r3, [r3, #4]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	f003 0303 	and.w	r3, r3, #3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	73bb      	strb	r3, [r7, #14]
	AFIO->EXTICR[AFIO_EXTI_index] &= ~(0xf << AFIO_EXTI_position);
 8000704:	4a59      	ldr	r2, [pc, #356]	; (800086c <update+0x1a4>)
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	3302      	adds	r3, #2
 800070a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	210f      	movs	r1, #15
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	4954      	ldr	r1, [pc, #336]	; (800086c <update+0x1a4>)
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4002      	ands	r2, r0
 8000720:	3302      	adds	r3, #2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTI_index] |=((AFIO_EXTI_GPIO_SELECTOR(EXTI_pinconfig->EXTI_PIN.GPIO_PORT) & 0X0F)<< AFIO_EXTI_position);
 8000726:	4a51      	ldr	r2, [pc, #324]	; (800086c <update+0x1a4>)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3302      	adds	r3, #2
 800072c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	494e      	ldr	r1, [pc, #312]	; (8000870 <update+0x1a8>)
 8000736:	428b      	cmp	r3, r1
 8000738:	d016      	beq.n	8000768 <update+0xa0>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	494d      	ldr	r1, [pc, #308]	; (8000874 <update+0x1ac>)
 8000740:	428b      	cmp	r3, r1
 8000742:	d00f      	beq.n	8000764 <update+0x9c>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	494b      	ldr	r1, [pc, #300]	; (8000878 <update+0x1b0>)
 800074a:	428b      	cmp	r3, r1
 800074c:	d008      	beq.n	8000760 <update+0x98>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	494a      	ldr	r1, [pc, #296]	; (800087c <update+0x1b4>)
 8000754:	428b      	cmp	r3, r1
 8000756:	d101      	bne.n	800075c <update+0x94>
 8000758:	2303      	movs	r3, #3
 800075a:	e006      	b.n	800076a <update+0xa2>
 800075c:	2300      	movs	r3, #0
 800075e:	e004      	b.n	800076a <update+0xa2>
 8000760:	2302      	movs	r3, #2
 8000762:	e002      	b.n	800076a <update+0xa2>
 8000764:	2301      	movs	r3, #1
 8000766:	e000      	b.n	800076a <update+0xa2>
 8000768:	2300      	movs	r3, #0
 800076a:	7bb9      	ldrb	r1, [r7, #14]
 800076c:	408b      	lsls	r3, r1
 800076e:	4618      	mov	r0, r3
 8000770:	493e      	ldr	r1, [pc, #248]	; (800086c <update+0x1a4>)
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4302      	orrs	r2, r0
 8000776:	3302      	adds	r3, #2
 8000778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//3 - //trigger case rising or falling or both

	EXTI->FTSR &= ~(1 << EXTI_pinconfig->EXTI_PIN.EXTI_LINE);
 800077c:	4b40      	ldr	r3, [pc, #256]	; (8000880 <update+0x1b8>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	8892      	ldrh	r2, [r2, #4]
 8000784:	4611      	mov	r1, r2
 8000786:	2201      	movs	r2, #1
 8000788:	408a      	lsls	r2, r1
 800078a:	43d2      	mvns	r2, r2
 800078c:	4611      	mov	r1, r2
 800078e:	4a3c      	ldr	r2, [pc, #240]	; (8000880 <update+0x1b8>)
 8000790:	400b      	ands	r3, r1
 8000792:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~(1 << EXTI_pinconfig->EXTI_PIN.EXTI_LINE);
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <update+0x1b8>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	8892      	ldrh	r2, [r2, #4]
 800079c:	4611      	mov	r1, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	408a      	lsls	r2, r1
 80007a2:	43d2      	mvns	r2, r2
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a36      	ldr	r2, [pc, #216]	; (8000880 <update+0x1b8>)
 80007a8:	400b      	ands	r3, r1
 80007aa:	6093      	str	r3, [r2, #8]

	if (EXTI_pinconfig->trigger_case == trigger_rise) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	899b      	ldrh	r3, [r3, #12]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d108      	bne.n	80007c6 <update+0xfe>
		EXTI->RTSR |= EXTI_pinconfig->EXTI_PIN.GPIO_PIN;
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <update+0x1b8>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	88d2      	ldrh	r2, [r2, #6]
 80007bc:	4611      	mov	r1, r2
 80007be:	4a30      	ldr	r2, [pc, #192]	; (8000880 <update+0x1b8>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6093      	str	r3, [r2, #8]
 80007c4:	e020      	b.n	8000808 <update+0x140>
	}

	else if (EXTI_pinconfig->trigger_case == trigger_fall) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	899b      	ldrh	r3, [r3, #12]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d108      	bne.n	80007e0 <update+0x118>
		EXTI->FTSR |= (EXTI_pinconfig->EXTI_PIN.GPIO_PIN);
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <update+0x1b8>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	88d2      	ldrh	r2, [r2, #6]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a29      	ldr	r2, [pc, #164]	; (8000880 <update+0x1b8>)
 80007da:	430b      	orrs	r3, r1
 80007dc:	60d3      	str	r3, [r2, #12]
 80007de:	e013      	b.n	8000808 <update+0x140>

	}

	else if (EXTI_pinconfig->trigger_case == trigger_fall_rise) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d10f      	bne.n	8000808 <update+0x140>
		EXTI->FTSR |= (EXTI_pinconfig->EXTI_PIN.GPIO_PIN);
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <update+0x1b8>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	88d2      	ldrh	r2, [r2, #6]
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <update+0x1b8>)
 80007f4:	430b      	orrs	r3, r1
 80007f6:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= EXTI_pinconfig->EXTI_PIN.GPIO_PIN;
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <update+0x1b8>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	88d2      	ldrh	r2, [r2, #6]
 8000800:	4611      	mov	r1, r2
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <update+0x1b8>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6093      	str	r3, [r2, #8]
	else{

	}

//4- IRQ HANDLING CALL-BACK
	GP_IRQ_CallBack[EXTI_pinconfig->EXTI_PIN.EXTI_LINE] =
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	889b      	ldrh	r3, [r3, #4]
 800080c:	4619      	mov	r1, r3
			EXTI_pinconfig->P_IRQ_CallBack;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	691b      	ldr	r3, [r3, #16]
	GP_IRQ_CallBack[EXTI_pinconfig->EXTI_PIN.EXTI_LINE] =
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <update+0x1bc>)
 8000814:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	if (EXTI_pinconfig->IRQ_enable == EXTI_PIN_ENABLE) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	89db      	ldrh	r3, [r3, #14]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10e      	bne.n	800083e <update+0x176>
		EXTI->IMR |= EXTI_pinconfig->EXTI_PIN.GPIO_PIN;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <update+0x1b8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	88d2      	ldrh	r2, [r2, #6]
 8000828:	4611      	mov	r1, r2
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <update+0x1b8>)
 800082c:	430b      	orrs	r3, r1
 800082e:	6013      	str	r3, [r2, #0]
		NVIC_EXTI_ENABLE(EXTI_pinconfig->EXTI_PIN.EXTI_LINE);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	889b      	ldrh	r3, [r3, #4]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fede 	bl	80005f8 <NVIC_EXTI_ENABLE>

	else {

	}

}
 800083c:	e012      	b.n	8000864 <update+0x19c>
	else if (EXTI_pinconfig->IRQ_enable == EXTI_PIN_DISABLE) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	89db      	ldrh	r3, [r3, #14]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d10e      	bne.n	8000864 <update+0x19c>
		EXTI->IMR &= ~(EXTI_pinconfig->EXTI_PIN.GPIO_PIN);
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <update+0x1b8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	88d2      	ldrh	r2, [r2, #6]
 800084e:	43d2      	mvns	r2, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <update+0x1b8>)
 8000854:	400b      	ands	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
		NVIC_EXTI_ENABLE(EXTI_pinconfig->EXTI_PIN.EXTI_LINE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	889b      	ldrh	r3, [r3, #4]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff feca 	bl	80005f8 <NVIC_EXTI_ENABLE>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40010000 	.word	0x40010000
 8000870:	40010800 	.word	0x40010800
 8000874:	40010c00 	.word	0x40010c00
 8000878:	40011000 	.word	0x40011000
 800087c:	40011400 	.word	0x40011400
 8000880:	40010400 	.word	0x40010400
 8000884:	20000028 	.word	0x20000028

08000888 <MCAL_EXTI_GPIO_INIT>:

void MCAL_EXTI_GPIO_INIT(EXTI_PINCONFIG *EXTI_pinconfig) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	update(EXTI_pinconfig);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff19 	bl	80006c8 <update>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <EXTI0_IRQHandler>:

	update(EXTI_pinconfig);

}

void EXTI0_IRQHandler() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <EXTI0_IRQHandler+0x1c>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <EXTI0_IRQHandler+0x1c>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <EXTI0_IRQHandler+0x20>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4798      	blx	r3

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40010400 	.word	0x40010400
 80008c0:	20000028 	.word	0x20000028

080008c4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <EXTI1_IRQHandler+0x1c>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <EXTI1_IRQHandler+0x1c>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <EXTI1_IRQHandler+0x20>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4798      	blx	r3

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40010400 	.word	0x40010400
 80008e4:	20000028 	.word	0x20000028

080008e8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <EXTI2_IRQHandler+0x1c>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <EXTI2_IRQHandler+0x1c>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <EXTI2_IRQHandler+0x20>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4798      	blx	r3

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010400 	.word	0x40010400
 8000908:	20000028 	.word	0x20000028

0800090c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <EXTI3_IRQHandler+0x1c>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <EXTI3_IRQHandler+0x1c>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <EXTI3_IRQHandler+0x20>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4798      	blx	r3

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010400 	.word	0x40010400
 800092c:	20000028 	.word	0x20000028

08000930 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler() {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <EXTI4_IRQHandler+0x1c>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <EXTI4_IRQHandler+0x1c>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <EXTI4_IRQHandler+0x20>)
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	4798      	blx	r3

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010400 	.word	0x40010400
 8000950:	20000028 	.word	0x20000028

08000954 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler() {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 8000958:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f003 0320 	and.w	r3, r3, #32
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= (1 << 5);
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 800096a:	f043 0320 	orr.w	r3, r3, #32
 800096e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[5]();
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 6)) {
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	2b00      	cmp	r3, #0
 8000980:	d008      	beq.n	8000994 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (1 << 6);
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[6]();
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 7)) {
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099c:	2b00      	cmp	r3, #0
 800099e:	d008      	beq.n	80009b2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (1 << 7);
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009aa:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[7]();
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 8)) {
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (1 << 8);
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c8:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[8]();
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 80009cc:	6a1b      	ldr	r3, [r3, #32]
 80009ce:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 9)) {
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d008      	beq.n	80009ee <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (1 << 9);
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <EXTI9_5_IRQHandler+0xa0>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[9]();
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <EXTI9_5_IRQHandler+0xa4>)
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	4798      	blx	r3
	}

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010400 	.word	0x40010400
 80009f8:	20000028 	.word	0x20000028

080009fc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

	if (EXTI->PR & (1 << 10)) {
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d008      	beq.n	8000a1e <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= (1 << 10);
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[10]();
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 11)) {
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d008      	beq.n	8000a3c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (1 << 11);
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a34:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[11]();
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3a:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 12)) {
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d008      	beq.n	8000a5a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (1 << 12);
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a52:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[12]();
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 13)) {
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d008      	beq.n	8000a78 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (1 << 13);
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a70:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[13]();
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a76:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 14)) {
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d008      	beq.n	8000a96 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (1 << 14);
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[14]();
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a94:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 15)) {
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d008      	beq.n	8000ab4 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (1 << 15);
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <EXTI15_10_IRQHandler+0xbc>)
 8000aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aac:	6153      	str	r3, [r2, #20]
		GP_IRQ_CallBack[15]();
 8000aae:	4b03      	ldr	r3, [pc, #12]	; (8000abc <EXTI15_10_IRQHandler+0xc0>)
 8000ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab2:	4798      	blx	r3
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40010400 	.word	0x40010400
 8000abc:	20000028 	.word	0x20000028

08000ac0 <get_pin_position>:

 */


uint8_t get_pin_position(uint16_t pin)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
	switch (pin) {
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ad0:	f000 80a5 	beq.w	8000c1e <get_pin_position+0x15e>
 8000ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ad8:	f300 80a3 	bgt.w	8000c22 <get_pin_position+0x162>
 8000adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ae0:	f000 809b 	beq.w	8000c1a <get_pin_position+0x15a>
 8000ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ae8:	f300 809b 	bgt.w	8000c22 <get_pin_position+0x162>
 8000aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af0:	f000 8091 	beq.w	8000c16 <get_pin_position+0x156>
 8000af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af8:	f300 8093 	bgt.w	8000c22 <get_pin_position+0x162>
 8000afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b00:	f000 8087 	beq.w	8000c12 <get_pin_position+0x152>
 8000b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b08:	f300 808b 	bgt.w	8000c22 <get_pin_position+0x162>
 8000b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b10:	d07d      	beq.n	8000c0e <get_pin_position+0x14e>
 8000b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b16:	f300 8084 	bgt.w	8000c22 <get_pin_position+0x162>
 8000b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b1e:	d074      	beq.n	8000c0a <get_pin_position+0x14a>
 8000b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b24:	dc7d      	bgt.n	8000c22 <get_pin_position+0x162>
 8000b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b2a:	d06c      	beq.n	8000c06 <get_pin_position+0x146>
 8000b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b30:	dc77      	bgt.n	8000c22 <get_pin_position+0x162>
 8000b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b36:	d064      	beq.n	8000c02 <get_pin_position+0x142>
 8000b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b3c:	dc71      	bgt.n	8000c22 <get_pin_position+0x162>
 8000b3e:	2b80      	cmp	r3, #128	; 0x80
 8000b40:	d05d      	beq.n	8000bfe <get_pin_position+0x13e>
 8000b42:	2b80      	cmp	r3, #128	; 0x80
 8000b44:	dc6d      	bgt.n	8000c22 <get_pin_position+0x162>
 8000b46:	2b20      	cmp	r3, #32
 8000b48:	dc48      	bgt.n	8000bdc <get_pin_position+0x11c>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dd69      	ble.n	8000c22 <get_pin_position+0x162>
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	2b1f      	cmp	r3, #31
 8000b52:	d866      	bhi.n	8000c22 <get_pin_position+0x162>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <get_pin_position+0x9c>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000be3 	.word	0x08000be3
 8000b60:	08000be7 	.word	0x08000be7
 8000b64:	08000c23 	.word	0x08000c23
 8000b68:	08000beb 	.word	0x08000beb
 8000b6c:	08000c23 	.word	0x08000c23
 8000b70:	08000c23 	.word	0x08000c23
 8000b74:	08000c23 	.word	0x08000c23
 8000b78:	08000bef 	.word	0x08000bef
 8000b7c:	08000c23 	.word	0x08000c23
 8000b80:	08000c23 	.word	0x08000c23
 8000b84:	08000c23 	.word	0x08000c23
 8000b88:	08000c23 	.word	0x08000c23
 8000b8c:	08000c23 	.word	0x08000c23
 8000b90:	08000c23 	.word	0x08000c23
 8000b94:	08000c23 	.word	0x08000c23
 8000b98:	08000bf3 	.word	0x08000bf3
 8000b9c:	08000c23 	.word	0x08000c23
 8000ba0:	08000c23 	.word	0x08000c23
 8000ba4:	08000c23 	.word	0x08000c23
 8000ba8:	08000c23 	.word	0x08000c23
 8000bac:	08000c23 	.word	0x08000c23
 8000bb0:	08000c23 	.word	0x08000c23
 8000bb4:	08000c23 	.word	0x08000c23
 8000bb8:	08000c23 	.word	0x08000c23
 8000bbc:	08000c23 	.word	0x08000c23
 8000bc0:	08000c23 	.word	0x08000c23
 8000bc4:	08000c23 	.word	0x08000c23
 8000bc8:	08000c23 	.word	0x08000c23
 8000bcc:	08000c23 	.word	0x08000c23
 8000bd0:	08000c23 	.word	0x08000c23
 8000bd4:	08000c23 	.word	0x08000c23
 8000bd8:	08000bf7 	.word	0x08000bf7
 8000bdc:	2b40      	cmp	r3, #64	; 0x40
 8000bde:	d00c      	beq.n	8000bfa <get_pin_position+0x13a>
 8000be0:	e01f      	b.n	8000c22 <get_pin_position+0x162>
	case GPIO_PIN0:
			return 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e01e      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN1:
			return 4;
 8000be6:	2304      	movs	r3, #4
 8000be8:	e01c      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN2:
			return 8;
 8000bea:	2308      	movs	r3, #8
 8000bec:	e01a      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN3:
			return 12;
 8000bee:	230c      	movs	r3, #12
 8000bf0:	e018      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN4:
			return 16;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	e016      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN5:
			return 20;
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	e014      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN6:
			return 24;
 8000bfa:	2318      	movs	r3, #24
 8000bfc:	e012      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN7:
			return 28;
 8000bfe:	231c      	movs	r3, #28
 8000c00:	e010      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN8:
			return 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e00e      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN9:
			return 4;
 8000c06:	2304      	movs	r3, #4
 8000c08:	e00c      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN10:
			return 8;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	e00a      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN11:
			return 12;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	e008      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN12:
			return 16;
 8000c12:	2310      	movs	r3, #16
 8000c14:	e006      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN13:
			return 20;
 8000c16:	2314      	movs	r3, #20
 8000c18:	e004      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN14:
			return 24;
 8000c1a:	2318      	movs	r3, #24
 8000c1c:	e002      	b.n	8000c24 <get_pin_position+0x164>
			break;
		case GPIO_PIN15:
			return 28;
 8000c1e:	231c      	movs	r3, #28
 8000c20:	e000      	b.n	8000c24 <get_pin_position+0x164>
			break;
		}


	return -1;
 8000c22:	23ff      	movs	r3, #255	; 0xff

}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <MCAL_GPIO_INIT>:


void MCAL_GPIO_INIT(GPIOx_typedef *GPIOx, GPIO_CONFIGURATION *pin_config){
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configregister = NULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
     uint16_t val;
	//check if the pin lies in CRL range or CRH range -> CRL[0-7] CRH[8-15]

	configregister =((pin_config->GPIO_PIN_NUMBER) < GPIO_PIN8 ) ? &GPIOx->CRL : &GPIOx->CRH;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	2bff      	cmp	r3, #255	; 0xff
 8000c46:	d801      	bhi.n	8000c4c <MCAL_GPIO_INIT+0x1c>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	e001      	b.n	8000c50 <MCAL_GPIO_INIT+0x20>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]

	//Clear  CNFy[1:0] MODEy[1:0] 4BITS OF THE PIN
	*configregister &= ~( 0xF<< get_pin_position(pin_config->GPIO_PIN_NUMBER) );
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff31 	bl	8000ac0 <get_pin_position>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	230f      	movs	r3, #15
 8000c64:	4093      	lsls	r3, r2
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	601a      	str	r2, [r3, #0]

	//if the pin is in output mode
	if(pin_config->GPIO_PIN_MODE==GPIO_PUSHPULL_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_OPENDRAIN_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_AFIO_PP_OUTPUT  || pin_config->GPIO_PIN_MODE==GPIO_AFIO_OP_OUTPUT )
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	885b      	ldrh	r3, [r3, #2]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d00e      	beq.n	8000c9a <MCAL_GPIO_INIT+0x6a>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	885b      	ldrh	r3, [r3, #2]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d009      	beq.n	8000c9a <MCAL_GPIO_INIT+0x6a>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	885b      	ldrh	r3, [r3, #2]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2b06      	cmp	r3, #6
 8000c8e:	d004      	beq.n	8000c9a <MCAL_GPIO_INIT+0x6a>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	885b      	ldrh	r3, [r3, #2]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	d110      	bne.n	8000cbc <MCAL_GPIO_INIT+0x8c>
	{
		//set the values for CNF bits and MODEy
		val =(((pin_config->GPIO_PIN_MODE - 4) << 2 | pin_config->GPIO_OUTPUT_SPEED  )) & 0x0f;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	885b      	ldrh	r3, [r3, #2]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	3b04      	subs	r3, #4
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	889b      	ldrh	r3, [r3, #4]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	f003 030f 	and.w	r3, r3, #15
 8000cb8:	81fb      	strh	r3, [r7, #14]
 8000cba:	e031      	b.n	8000d20 <MCAL_GPIO_INIT+0xf0>
	}

	//in case if the pin is input
	else
	{
		if(pin_config->GPIO_PIN_MODE == GPIO_FLOATING_INPUT || pin_config->GPIO_PIN_MODE == GPIO_ANALOG)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	885b      	ldrh	r3, [r3, #2]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d004      	beq.n	8000cd0 <MCAL_GPIO_INIT+0xa0>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	885b      	ldrh	r3, [r3, #2]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d108      	bne.n	8000ce2 <MCAL_GPIO_INIT+0xb2>
		{

			val =((pin_config->GPIO_PIN_MODE )<< 2 | (0x0)  ) & 0x0f;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	885b      	ldrh	r3, [r3, #2]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	81fb      	strh	r3, [r7, #14]
 8000ce0:	e01e      	b.n	8000d20 <MCAL_GPIO_INIT+0xf0>

		}

		else
		{
				val =((pin_config->GPIO_PIN_MODE)<<2) &0x0f;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	885b      	ldrh	r3, [r3, #2]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f003 030f 	and.w	r3, r3, #15
 8000cf0:	81fb      	strh	r3, [r7, #14]
			if(pin_config->GPIO_PIN_MODE == GPIO_PULLUP_INPUT)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	885b      	ldrh	r3, [r3, #2]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d108      	bne.n	8000d0e <MCAL_GPIO_INIT+0xde>
			{
				GPIOx->ODR |= (pin_config->GPIO_PIN_NUMBER);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	e008      	b.n	8000d20 <MCAL_GPIO_INIT+0xf0>

			}
			else
			{
				GPIOx->ODR &= ~(pin_config->GPIO_PIN_NUMBER);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	43da      	mvns	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	60da      	str	r2, [r3, #12]
		}

	}


	*configregister |=(val << (get_pin_position(pin_config->GPIO_PIN_NUMBER)));
 8000d20:	89fc      	ldrh	r4, [r7, #14]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fec9 	bl	8000ac0 <get_pin_position>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	fa04 f203 	lsl.w	r2, r4, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	601a      	str	r2, [r3, #0]

}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}

08000d46 <MCAL_GPIO_WRITE_PIN>:
 @param[in]-pin number
 @param[in]-value
 @returnval-none
 note- none
 */
void MCAL_GPIO_WRITE_PIN(GPIOx_typedef *GPIOx, uint16_t pin_number ,uint8_t value){
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	807b      	strh	r3, [r7, #2]
 8000d52:	4613      	mov	r3, r2
 8000d54:	707b      	strb	r3, [r7, #1]


			if(value == GPIO_PIN_true)
 8000d56:	787b      	ldrb	r3, [r7, #1]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d103      	bne.n	8000d64 <MCAL_GPIO_WRITE_PIN+0x1e>
			{
				GPIOx->BSRR =(uint32_t)pin_number;
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	611a      	str	r2, [r3, #16]
			else
			{
				GPIOx->BRR =(uint32_t)pin_number;
			}

}
 8000d62:	e002      	b.n	8000d6a <MCAL_GPIO_WRITE_PIN+0x24>
				GPIOx->BRR =(uint32_t)pin_number;
 8000d64:	887a      	ldrh	r2, [r7, #2]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	615a      	str	r2, [r3, #20]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <MCAL_GPIO_WRITE_PORT>:
 @param[in]-GPIO port
 @param[in]-value
 @returnval-none
 note- none
 */
void MCAL_GPIO_WRITE_PORT(GPIOx_typedef *GPIOx , uint8_t value){
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]


       GPIOx->ODR =(uint32_t)value;
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60da      	str	r2, [r3, #12]

}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <__libc_init_array>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	2600      	movs	r6, #0
 8000d94:	4d0c      	ldr	r5, [pc, #48]	; (8000dc8 <__libc_init_array+0x38>)
 8000d96:	4c0d      	ldr	r4, [pc, #52]	; (8000dcc <__libc_init_array+0x3c>)
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	10a4      	asrs	r4, r4, #2
 8000d9c:	42a6      	cmp	r6, r4
 8000d9e:	d109      	bne.n	8000db4 <__libc_init_array+0x24>
 8000da0:	f000 f81a 	bl	8000dd8 <_init>
 8000da4:	2600      	movs	r6, #0
 8000da6:	4d0a      	ldr	r5, [pc, #40]	; (8000dd0 <__libc_init_array+0x40>)
 8000da8:	4c0a      	ldr	r4, [pc, #40]	; (8000dd4 <__libc_init_array+0x44>)
 8000daa:	1b64      	subs	r4, r4, r5
 8000dac:	10a4      	asrs	r4, r4, #2
 8000dae:	42a6      	cmp	r6, r4
 8000db0:	d105      	bne.n	8000dbe <__libc_init_array+0x2e>
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db8:	4798      	blx	r3
 8000dba:	3601      	adds	r6, #1
 8000dbc:	e7ee      	b.n	8000d9c <__libc_init_array+0xc>
 8000dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc2:	4798      	blx	r3
 8000dc4:	3601      	adds	r6, #1
 8000dc6:	e7f2      	b.n	8000dae <__libc_init_array+0x1e>
 8000dc8:	08000e18 	.word	0x08000e18
 8000dcc:	08000e18 	.word	0x08000e18
 8000dd0:	08000e18 	.word	0x08000e18
 8000dd4:	08000e1c 	.word	0x08000e1c

08000dd8 <_init>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr

08000de4 <_fini>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr
