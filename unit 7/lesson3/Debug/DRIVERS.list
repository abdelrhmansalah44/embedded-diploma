
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000624  0800062c  0001062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000624  08000624  0001062c  2**0
                  CONTENTS
  4 .ARM          00000000  08000624  08000624  0001062c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000624  0800062c  0001062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000624  08000624  00010624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000628  08000628  00010628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800062c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800062c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001062c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010655  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000825  00000000  00000000  00010698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002f0  00000000  00000000  00010ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000044c  00000000  00000000  000111ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c0  00000000  00000000  00011600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000098  00000000  00000000  000116c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001eaf  00000000  00000000  00011758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000f63  00000000  00000000  00013607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00007f4e  00000000  00000000  0001456a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000023c  00000000  00000000  0001c4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800060c 	.word	0x0800060c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800060c 	.word	0x0800060c

08000170 <delay>:




void delay(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	int i,j ;
	for(i=0;i<x;i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay+0x26>
	{
		for(j=0;j<255;j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	ddf9      	ble.n	8000184 <delay+0x14>
	for(i=0;i<x;i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	dbef      	blt.n	800017e <delay+0xe>
	}

}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <clock_init>:


void clock_init()
{
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0

	RCC->APB2ENR |=(1<<2);
 80001b0:	4b07      	ldr	r3, [pc, #28]	; (80001d0 <clock_init+0x24>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a06      	ldr	r2, [pc, #24]	; (80001d0 <clock_init+0x24>)
 80001b6:	f043 0304 	orr.w	r3, r3, #4
 80001ba:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |=(1<<3);
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <clock_init+0x24>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a03      	ldr	r2, [pc, #12]	; (80001d0 <clock_init+0x24>)
 80001c2:	f043 0308 	orr.w	r3, r3, #8
 80001c6:	6193      	str	r3, [r2, #24]
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000

080001d4 <GPIO_init>:


void GPIO_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  GPIO_CONFIGURATION pincnfg;

  //for PA1 as a floating input pin
  pincnfg.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 80001da:	2301      	movs	r3, #1
 80001dc:	807b      	strh	r3, [r7, #2]
  pincnfg.GPIO_PIN_NUMBER =GPIO_PIN1;
 80001de:	2302      	movs	r3, #2
 80001e0:	803b      	strh	r3, [r7, #0]
  MCAL_GPIO_INIT(GPIOA, &pincnfg);
 80001e2:	463b      	mov	r3, r7
 80001e4:	4619      	mov	r1, r3
 80001e6:	4813      	ldr	r0, [pc, #76]	; (8000234 <GPIO_init+0x60>)
 80001e8:	f000 f938 	bl	800045c <MCAL_GPIO_INIT>

  //for PB1 as a push-pull output pin
  pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 80001ec:	2304      	movs	r3, #4
 80001ee:	807b      	strh	r3, [r7, #2]
  pincnfg.GPIO_PIN_NUMBER= GPIO_PIN1;
 80001f0:	2302      	movs	r3, #2
 80001f2:	803b      	strh	r3, [r7, #0]
  pincnfg.GPIO_OUTPUT_SPEED =GPIO_OUTPUT_10MHz;
 80001f4:	2301      	movs	r3, #1
 80001f6:	80bb      	strh	r3, [r7, #4]
  MCAL_GPIO_INIT(GPIOB, &pincnfg);
 80001f8:	463b      	mov	r3, r7
 80001fa:	4619      	mov	r1, r3
 80001fc:	480e      	ldr	r0, [pc, #56]	; (8000238 <GPIO_init+0x64>)
 80001fe:	f000 f92d 	bl	800045c <MCAL_GPIO_INIT>



  //for PA6 as a floating input pin
  pincnfg.GPIO_PIN_MODE = GPIO_FLOATING_INPUT;
 8000202:	2301      	movs	r3, #1
 8000204:	807b      	strh	r3, [r7, #2]
  pincnfg.GPIO_PIN_NUMBER =GPIO_PIN6;
 8000206:	2340      	movs	r3, #64	; 0x40
 8000208:	803b      	strh	r3, [r7, #0]
  MCAL_GPIO_INIT(GPIOA, &pincnfg);
 800020a:	463b      	mov	r3, r7
 800020c:	4619      	mov	r1, r3
 800020e:	4809      	ldr	r0, [pc, #36]	; (8000234 <GPIO_init+0x60>)
 8000210:	f000 f924 	bl	800045c <MCAL_GPIO_INIT>

  //for PB12 as a push-pull output pin
  pincnfg.GPIO_PIN_MODE = GPIO_PUSHPULL_OUTPUT;
 8000214:	2304      	movs	r3, #4
 8000216:	807b      	strh	r3, [r7, #2]
  pincnfg.GPIO_PIN_NUMBER= GPIO_PIN12;
 8000218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800021c:	803b      	strh	r3, [r7, #0]
  pincnfg.GPIO_OUTPUT_SPEED =GPIO_OUTPUT_10MHz;
 800021e:	2301      	movs	r3, #1
 8000220:	80bb      	strh	r3, [r7, #4]
  MCAL_GPIO_INIT(GPIOB, &pincnfg);
 8000222:	463b      	mov	r3, r7
 8000224:	4619      	mov	r1, r3
 8000226:	4804      	ldr	r0, [pc, #16]	; (8000238 <GPIO_init+0x64>)
 8000228:	f000 f918 	bl	800045c <MCAL_GPIO_INIT>



}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40010800 	.word	0x40010800
 8000238:	40010c00 	.word	0x40010c00

0800023c <main>:

int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	clock_init();
 8000240:	f7ff ffb4 	bl	80001ac <clock_init>
	GPIO_init();
 8000244:	f7ff ffc6 	bl	80001d4 <GPIO_init>

	while(1)
	{


	if( (MCAL_GPIO_READ_PIN(GPIOA, GPIO_PIN1)) ==0) //single press
 8000248:	2102      	movs	r1, #2
 800024a:	4811      	ldr	r0, [pc, #68]	; (8000290 <main+0x54>)
 800024c:	f000 f991 	bl	8000572 <MCAL_GPIO_READ_PIN>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d10b      	bne.n	800026e <main+0x32>
	{
		MCAL_GPIO_TOGGLE(GPIOB,GPIO_PIN1);
 8000256:	2102      	movs	r1, #2
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0x58>)
 800025a:	f000 f9a1 	bl	80005a0 <MCAL_GPIO_TOGGLE>
		while((MCAL_GPIO_READ_PIN(GPIOA, GPIO_PIN1)) ==0);
 800025e:	bf00      	nop
 8000260:	2102      	movs	r1, #2
 8000262:	480b      	ldr	r0, [pc, #44]	; (8000290 <main+0x54>)
 8000264:	f000 f985 	bl	8000572 <MCAL_GPIO_READ_PIN>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f8      	beq.n	8000260 <main+0x24>

	}

	if( (MCAL_GPIO_READ_PIN(GPIOA, GPIO_PIN6)) ==1) // single press
 800026e:	2140      	movs	r1, #64	; 0x40
 8000270:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0x54>)
 8000272:	f000 f97e 	bl	8000572 <MCAL_GPIO_READ_PIN>
 8000276:	4603      	mov	r3, r0
 8000278:	2b01      	cmp	r3, #1
 800027a:	d104      	bne.n	8000286 <main+0x4a>
	{
		MCAL_GPIO_TOGGLE(GPIOB,GPIO_PIN12);
 800027c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <main+0x58>)
 8000282:	f000 f98d 	bl	80005a0 <MCAL_GPIO_TOGGLE>

	}


		delay(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f7ff ff72 	bl	8000170 <delay>
	if( (MCAL_GPIO_READ_PIN(GPIOA, GPIO_PIN1)) ==0) //single press
 800028c:	e7dc      	b.n	8000248 <main+0xc>
 800028e:	bf00      	nop
 8000290:	40010800 	.word	0x40010800
 8000294:	40010c00 	.word	0x40010c00

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	; (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f97d 	bl	80005c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ffb7 	bl	800023c <main>

080002ce <LoopForever>:

LoopForever:
  b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	0800062c 	.word	0x0800062c
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_2_IRQHandler>
	...

080002ec <get_pin_position>:

 */


uint8_t get_pin_position(uint16_t pin)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	80fb      	strh	r3, [r7, #6]
	switch (pin) {
 80002f6:	88fb      	ldrh	r3, [r7, #6]
 80002f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002fc:	f000 80a5 	beq.w	800044a <get_pin_position+0x15e>
 8000300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000304:	f300 80a3 	bgt.w	800044e <get_pin_position+0x162>
 8000308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800030c:	f000 809b 	beq.w	8000446 <get_pin_position+0x15a>
 8000310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000314:	f300 809b 	bgt.w	800044e <get_pin_position+0x162>
 8000318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800031c:	f000 8091 	beq.w	8000442 <get_pin_position+0x156>
 8000320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000324:	f300 8093 	bgt.w	800044e <get_pin_position+0x162>
 8000328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800032c:	f000 8087 	beq.w	800043e <get_pin_position+0x152>
 8000330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000334:	f300 808b 	bgt.w	800044e <get_pin_position+0x162>
 8000338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800033c:	d07d      	beq.n	800043a <get_pin_position+0x14e>
 800033e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000342:	f300 8084 	bgt.w	800044e <get_pin_position+0x162>
 8000346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800034a:	d074      	beq.n	8000436 <get_pin_position+0x14a>
 800034c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000350:	dc7d      	bgt.n	800044e <get_pin_position+0x162>
 8000352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000356:	d06c      	beq.n	8000432 <get_pin_position+0x146>
 8000358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800035c:	dc77      	bgt.n	800044e <get_pin_position+0x162>
 800035e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000362:	d064      	beq.n	800042e <get_pin_position+0x142>
 8000364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000368:	dc71      	bgt.n	800044e <get_pin_position+0x162>
 800036a:	2b80      	cmp	r3, #128	; 0x80
 800036c:	d05d      	beq.n	800042a <get_pin_position+0x13e>
 800036e:	2b80      	cmp	r3, #128	; 0x80
 8000370:	dc6d      	bgt.n	800044e <get_pin_position+0x162>
 8000372:	2b20      	cmp	r3, #32
 8000374:	dc48      	bgt.n	8000408 <get_pin_position+0x11c>
 8000376:	2b00      	cmp	r3, #0
 8000378:	dd69      	ble.n	800044e <get_pin_position+0x162>
 800037a:	3b01      	subs	r3, #1
 800037c:	2b1f      	cmp	r3, #31
 800037e:	d866      	bhi.n	800044e <get_pin_position+0x162>
 8000380:	a201      	add	r2, pc, #4	; (adr r2, 8000388 <get_pin_position+0x9c>)
 8000382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000386:	bf00      	nop
 8000388:	0800040f 	.word	0x0800040f
 800038c:	08000413 	.word	0x08000413
 8000390:	0800044f 	.word	0x0800044f
 8000394:	08000417 	.word	0x08000417
 8000398:	0800044f 	.word	0x0800044f
 800039c:	0800044f 	.word	0x0800044f
 80003a0:	0800044f 	.word	0x0800044f
 80003a4:	0800041b 	.word	0x0800041b
 80003a8:	0800044f 	.word	0x0800044f
 80003ac:	0800044f 	.word	0x0800044f
 80003b0:	0800044f 	.word	0x0800044f
 80003b4:	0800044f 	.word	0x0800044f
 80003b8:	0800044f 	.word	0x0800044f
 80003bc:	0800044f 	.word	0x0800044f
 80003c0:	0800044f 	.word	0x0800044f
 80003c4:	0800041f 	.word	0x0800041f
 80003c8:	0800044f 	.word	0x0800044f
 80003cc:	0800044f 	.word	0x0800044f
 80003d0:	0800044f 	.word	0x0800044f
 80003d4:	0800044f 	.word	0x0800044f
 80003d8:	0800044f 	.word	0x0800044f
 80003dc:	0800044f 	.word	0x0800044f
 80003e0:	0800044f 	.word	0x0800044f
 80003e4:	0800044f 	.word	0x0800044f
 80003e8:	0800044f 	.word	0x0800044f
 80003ec:	0800044f 	.word	0x0800044f
 80003f0:	0800044f 	.word	0x0800044f
 80003f4:	0800044f 	.word	0x0800044f
 80003f8:	0800044f 	.word	0x0800044f
 80003fc:	0800044f 	.word	0x0800044f
 8000400:	0800044f 	.word	0x0800044f
 8000404:	08000423 	.word	0x08000423
 8000408:	2b40      	cmp	r3, #64	; 0x40
 800040a:	d00c      	beq.n	8000426 <get_pin_position+0x13a>
 800040c:	e01f      	b.n	800044e <get_pin_position+0x162>
	case GPIO_PIN0:
			return 0;
 800040e:	2300      	movs	r3, #0
 8000410:	e01e      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN1:
			return 4;
 8000412:	2304      	movs	r3, #4
 8000414:	e01c      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN2:
			return 8;
 8000416:	2308      	movs	r3, #8
 8000418:	e01a      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN3:
			return 12;
 800041a:	230c      	movs	r3, #12
 800041c:	e018      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN4:
			return 16;
 800041e:	2310      	movs	r3, #16
 8000420:	e016      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN5:
			return 20;
 8000422:	2314      	movs	r3, #20
 8000424:	e014      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN6:
			return 24;
 8000426:	2318      	movs	r3, #24
 8000428:	e012      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN7:
			return 28;
 800042a:	231c      	movs	r3, #28
 800042c:	e010      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN8:
			return 0;
 800042e:	2300      	movs	r3, #0
 8000430:	e00e      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN9:
			return 4;
 8000432:	2304      	movs	r3, #4
 8000434:	e00c      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN10:
			return 8;
 8000436:	2308      	movs	r3, #8
 8000438:	e00a      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN11:
			return 12;
 800043a:	230c      	movs	r3, #12
 800043c:	e008      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN12:
			return 16;
 800043e:	2310      	movs	r3, #16
 8000440:	e006      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN13:
			return 20;
 8000442:	2314      	movs	r3, #20
 8000444:	e004      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN14:
			return 24;
 8000446:	2318      	movs	r3, #24
 8000448:	e002      	b.n	8000450 <get_pin_position+0x164>
			break;
		case GPIO_PIN15:
			return 28;
 800044a:	231c      	movs	r3, #28
 800044c:	e000      	b.n	8000450 <get_pin_position+0x164>
			break;
		}


	return -1;
 800044e:	23ff      	movs	r3, #255	; 0xff

}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop

0800045c <MCAL_GPIO_INIT>:


void MCAL_GPIO_INIT(GPIOx_typedef *GPIOx, GPIO_CONFIGURATION *pin_config){
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]

	volatile uint32_t *configregister = NULL;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
     uint16_t val;
	//check if the pin lies in CRL range or CRH range -> CRL[0-7] CRH[8-15]

	configregister =((pin_config->GPIO_PIN_NUMBER) < GPIO_PIN8 ) ? &GPIOx->CRL : &GPIOx->CRH;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	b29b      	uxth	r3, r3
 8000470:	2bff      	cmp	r3, #255	; 0xff
 8000472:	d801      	bhi.n	8000478 <MCAL_GPIO_INIT+0x1c>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	e001      	b.n	800047c <MCAL_GPIO_INIT+0x20>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3304      	adds	r3, #4
 800047c:	60bb      	str	r3, [r7, #8]

	//Clear  CNFy[1:0] MODEy[1:0] 4BITS OF THE PIN
	*configregister &= ~( 0xF<< get_pin_position(pin_config->GPIO_PIN_NUMBER) );
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	b29b      	uxth	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff31 	bl	80002ec <get_pin_position>
 800048a:	4603      	mov	r3, r0
 800048c:	461a      	mov	r2, r3
 800048e:	230f      	movs	r3, #15
 8000490:	4093      	lsls	r3, r2
 8000492:	43da      	mvns	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	401a      	ands	r2, r3
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	601a      	str	r2, [r3, #0]

	//if the pin is in output mode
	if(pin_config->GPIO_PIN_MODE==GPIO_PUSHPULL_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_OPENDRAIN_OUTPUT || pin_config->GPIO_PIN_MODE==GPIO_AFIO_PP_OUTPUT  || pin_config->GPIO_PIN_MODE==GPIO_AFIO_OP_OUTPUT )
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	885b      	ldrh	r3, [r3, #2]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d00e      	beq.n	80004c6 <MCAL_GPIO_INIT+0x6a>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	885b      	ldrh	r3, [r3, #2]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	2b05      	cmp	r3, #5
 80004b0:	d009      	beq.n	80004c6 <MCAL_GPIO_INIT+0x6a>
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	885b      	ldrh	r3, [r3, #2]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	2b06      	cmp	r3, #6
 80004ba:	d004      	beq.n	80004c6 <MCAL_GPIO_INIT+0x6a>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	885b      	ldrh	r3, [r3, #2]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	2b07      	cmp	r3, #7
 80004c4:	d110      	bne.n	80004e8 <MCAL_GPIO_INIT+0x8c>
	{
		//set the values for CNF bits and MODEy
		val =(((pin_config->GPIO_PIN_MODE - 4) << 2 | pin_config->GPIO_OUTPUT_SPEED  )) & 0x0f;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	885b      	ldrh	r3, [r3, #2]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	3b04      	subs	r3, #4
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	b21a      	sxth	r2, r3
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	889b      	ldrh	r3, [r3, #4]
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	b21b      	sxth	r3, r3
 80004da:	4313      	orrs	r3, r2
 80004dc:	b21b      	sxth	r3, r3
 80004de:	b29b      	uxth	r3, r3
 80004e0:	f003 030f 	and.w	r3, r3, #15
 80004e4:	81fb      	strh	r3, [r7, #14]
 80004e6:	e031      	b.n	800054c <MCAL_GPIO_INIT+0xf0>
	}

	//in case if the pin is input
	else
	{
		if(pin_config->GPIO_PIN_MODE == GPIO_FLOATING_INPUT || pin_config->GPIO_PIN_MODE == GPIO_ANALOG)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	885b      	ldrh	r3, [r3, #2]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d004      	beq.n	80004fc <MCAL_GPIO_INIT+0xa0>
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	885b      	ldrh	r3, [r3, #2]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d108      	bne.n	800050e <MCAL_GPIO_INIT+0xb2>
		{

			val =((pin_config->GPIO_PIN_MODE )<< 2 | (0x0)  ) & 0x0f;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	885b      	ldrh	r3, [r3, #2]
 8000500:	b29b      	uxth	r3, r3
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	b29b      	uxth	r3, r3
 8000506:	f003 030f 	and.w	r3, r3, #15
 800050a:	81fb      	strh	r3, [r7, #14]
 800050c:	e01e      	b.n	800054c <MCAL_GPIO_INIT+0xf0>

		}

		else
		{
				val =((pin_config->GPIO_PIN_MODE)<<2) &0x0f;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	885b      	ldrh	r3, [r3, #2]
 8000512:	b29b      	uxth	r3, r3
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	b29b      	uxth	r3, r3
 8000518:	f003 030f 	and.w	r3, r3, #15
 800051c:	81fb      	strh	r3, [r7, #14]
			if(pin_config->GPIO_PIN_MODE == GPIO_PULLUP_INPUT)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	885b      	ldrh	r3, [r3, #2]
 8000522:	b29b      	uxth	r3, r3
 8000524:	2b02      	cmp	r3, #2
 8000526:	d108      	bne.n	800053a <MCAL_GPIO_INIT+0xde>
			{
				GPIOx->ODR |= (pin_config->GPIO_PIN_NUMBER);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	b29a      	uxth	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	431a      	orrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	e008      	b.n	800054c <MCAL_GPIO_INIT+0xf0>

			}
			else
			{
				GPIOx->ODR &= ~(pin_config->GPIO_PIN_NUMBER);
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	b29b      	uxth	r3, r3
 8000540:	43da      	mvns	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	401a      	ands	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	60da      	str	r2, [r3, #12]
		}

	}


	*configregister |=(val << (get_pin_position(pin_config->GPIO_PIN_NUMBER)));
 800054c:	89fc      	ldrh	r4, [r7, #14]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	b29b      	uxth	r3, r3
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fec9 	bl	80002ec <get_pin_position>
 800055a:	4603      	mov	r3, r0
 800055c:	fa04 f203 	lsl.w	r2, r4, r3
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	431a      	orrs	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	601a      	str	r2, [r3, #0]

}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bd90      	pop	{r4, r7, pc}

08000572 <MCAL_GPIO_READ_PIN>:
 @param[in]-GPIO port
 @param[in]-pin number
 @returnval-pin state
 note- none
 */
uint8_t MCAL_GPIO_READ_PIN(GPIOx_typedef *GPIOx, uint16_t pin_number){
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	807b      	strh	r3, [r7, #2]


	uint8_t statues;
	if((GPIOx->IDR & pin_number) !=(uint32_t)GPIO_PIN_false)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	887b      	ldrh	r3, [r7, #2]
 8000584:	4013      	ands	r3, r2
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <MCAL_GPIO_READ_PIN+0x1e>
		statues =GPIO_PIN_true;
 800058a:	2301      	movs	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	e001      	b.n	8000594 <MCAL_GPIO_READ_PIN+0x22>

	else
		statues =GPIO_PIN_false;
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]

            return statues;
 8000594:	7bfb      	ldrb	r3, [r7, #15]

}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <MCAL_GPIO_TOGGLE>:
 @param[in]-GPIO port
 @param[in]-pin number
 @returnval-none
 note- none
 */
void MCAL_GPIO_TOGGLE(GPIOx_typedef *GPIOx, uint16_t pin_number){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]


		GPIOx->ODR ^=pin_number;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	68da      	ldr	r2, [r3, #12]
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	405a      	eors	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]


}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
	...

080005c4 <__libc_init_array>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	2600      	movs	r6, #0
 80005c8:	4d0c      	ldr	r5, [pc, #48]	; (80005fc <__libc_init_array+0x38>)
 80005ca:	4c0d      	ldr	r4, [pc, #52]	; (8000600 <__libc_init_array+0x3c>)
 80005cc:	1b64      	subs	r4, r4, r5
 80005ce:	10a4      	asrs	r4, r4, #2
 80005d0:	42a6      	cmp	r6, r4
 80005d2:	d109      	bne.n	80005e8 <__libc_init_array+0x24>
 80005d4:	f000 f81a 	bl	800060c <_init>
 80005d8:	2600      	movs	r6, #0
 80005da:	4d0a      	ldr	r5, [pc, #40]	; (8000604 <__libc_init_array+0x40>)
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <__libc_init_array+0x44>)
 80005de:	1b64      	subs	r4, r4, r5
 80005e0:	10a4      	asrs	r4, r4, #2
 80005e2:	42a6      	cmp	r6, r4
 80005e4:	d105      	bne.n	80005f2 <__libc_init_array+0x2e>
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ec:	4798      	blx	r3
 80005ee:	3601      	adds	r6, #1
 80005f0:	e7ee      	b.n	80005d0 <__libc_init_array+0xc>
 80005f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f6:	4798      	blx	r3
 80005f8:	3601      	adds	r6, #1
 80005fa:	e7f2      	b.n	80005e2 <__libc_init_array+0x1e>
 80005fc:	08000624 	.word	0x08000624
 8000600:	08000624 	.word	0x08000624
 8000604:	08000624 	.word	0x08000624
 8000608:	08000628 	.word	0x08000628

0800060c <_init>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr

08000618 <_fini>:
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	bf00      	nop
 800061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061e:	bc08      	pop	{r3}
 8000620:	469e      	mov	lr, r3
 8000622:	4770      	bx	lr
